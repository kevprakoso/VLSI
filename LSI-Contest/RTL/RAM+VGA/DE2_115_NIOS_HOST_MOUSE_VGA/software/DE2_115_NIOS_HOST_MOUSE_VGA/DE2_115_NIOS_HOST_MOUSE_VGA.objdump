
DE2_115_NIOS_HOST_MOUSE_VGA.elf:     file format elf32-littlenios2
DE2_115_NIOS_HOST_MOUSE_VGA.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00012438 memsz 0x00012438 flags r-x
    LOAD off    0x00013458 vaddr 0x00012458 paddr 0x00013fec align 2**12
         filesz 0x00001b94 memsz 0x00001b94 flags rw-
    LOAD off    0x00015b80 vaddr 0x00015b80 paddr 0x00015b80 align 2**12
         filesz 0x00000000 memsz 0x000002f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001151c  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000d88  000116d0  000116d0  000126d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b94  00012458  00013fec  00013458  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f0  00015b80  00015b80  00015b80  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00014fec  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d58  00000000  00000000  00015018  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001582  00000000  00000000  00015d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00025188  00000000  00000000  000172f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007f80  00000000  00000000  0003c47a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00016b88  00000000  00000000  000443fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001bcc  00000000  00000000  0005af84  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000022d9  00000000  00000000  0005cb50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c254  00000000  00000000  0005ee29  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0006b080  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  0006b0e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006ee84  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0006ee87  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006ee8a  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006ee8b  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0006ee8c  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0006ee90  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006ee94  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0006ee98  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0006eea1  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0006eeaa  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000c  00000000  00000000  0006eeb3  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000003b  00000000  00000000  0006eebf  2**0
                  CONTENTS, READONLY
 29 .jdi          00004e61  00000000  00000000  0006eefa  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
000116d0 l    d  .rodata	00000000 .rodata
00012458 l    d  .rwdata	00000000 .rwdata
00015b80 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 DE2_115_NIOS_HOST_MOUSE_VGA.c
00015b80 l     O .bss	00000002 no_device.3143
00015b82 l     O .bss	00000002 ctl_reg.3142
00000000 l    df *ABS*	00000000 LCD.c
00000000 l    df *ABS*	00000000 SEG7.c
00012458 l     O .rwdata	00000010 szMap
00000000 l    df *ABS*	00000000 VGA.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000043bc l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000046a8 l     F .text	00000058 __sprint_r
00011efe l     O .rodata	00000010 blanks.3452
00011eee l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000670c l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00008108 l     F .text	00000058 std
00008214 l     F .text	00000008 __fp_lock
0000821c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00012468 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
00013fb0 l     O .rwdata	00000004 charset
00011f34 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0001207c l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0000c3a8 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0000dbfc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000dc5c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000dd5c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000de7c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000df5c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000e0b8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000e2e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00013fd4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000e5b0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00012e24 l     O .rwdata	00001060 jtag_uart
00013e84 l     O .rwdata	00000120 lcd
0000e6b8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000e8f8 l     F .text	00000228 altera_avalon_jtag_uart_irq
0000eb20 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00013fd8 l     O .rwdata	00000004 colstart
0000f19c l     F .text	000000b8 lcd_write_command
0000f254 l     F .text	000000d4 lcd_write_data
0000f328 l     F .text	000000c4 lcd_clear_screen
0000f3ec l     F .text	000001ec lcd_repaint_screen
0000f5d8 l     F .text	000000c8 lcd_scroll_up
0000f6a0 l     F .text	000002d0 lcd_handle_escape
0000fe7c l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000100dc l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00010574 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00010998 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00010ad4 l     F .text	000000dc alt_file_locked
00010d38 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
000122d5 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0001144c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00011600 l     F .text	00000040 alt_sim_halt
00009ec4 g     F .text	00000094 _mprec_log10
00009fb0 g     F .text	00000088 __any_on
0000b6bc g     F .text	00000070 _isatty_r
00012054 g     O .rodata	00000028 __mprec_tinytens
0000e118 g     F .text	0000006c alt_main
00004580 g     F .text	000000a0 _puts_r
00015be0 g     O .bss	00000100 alt_irq
0000b72c g     F .text	00000078 _lseek_r
00013fec g       *ABS*	00000000 __flash_rwdata_start
0000cec8 g     F .text	00000088 __eqdf2
00015e70 g       *ABS*	00000000 __alt_heap_start
00004508 g     F .text	00000044 printf
08200000 g       *ABS*	00000000 __alt_mem_sram
0000b188 g     F .text	00000068 __sseek
00008170 g     F .text	000000a4 __sinit
00008e48 g     F .text	00000084 _setlocale_r
00008270 g     F .text	00000068 __sfmoreglue
0000e1a4 g     F .text	00000020 __malloc_unlock
00009940 g     F .text	000000e0 memmove
00008260 g     F .text	00000010 _cleanup
0000a038 g     F .text	000000bc _Balloc
00003f0c g     F .text	0000008c LCD_Test
0000cfd8 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0000430c g     F .text	00000058 Set_Pixel_On_Color
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000b648 g     F .text	00000074 _fstat_r
00015b9c g     O .bss	00000004 errno
00015ba4 g     O .bss	00000004 alt_argv
0001bfa4 g       *ABS*	00000000 _gp
0000e460 g     F .text	00000030 usleep
00012ca4 g     O .rwdata	00000180 alt_fd_list
00000254 g     F .text	00000088 Vga_clear_screen
00010f5c g     F .text	00000094 alt_find_dev
000098a0 g     F .text	000000a0 memcpy
00008254 g     F .text	0000000c _cleanup_r
0000d170 g     F .text	000000f8 __floatsidf
00010a5c g     F .text	00000078 alt_io_redirect
0000d0e8 g     F .text	00000088 __ltdf2
000116d0 g       *ABS*	00000000 __DTOR_END__
00004620 g     F .text	00000014 puts
00009e14 g     F .text	000000b0 __ratio
0000ed38 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0000454c g     F .text	00000034 _printf_r
000044f8 g     F .text	00000008 __udivsi3
0000ddbc g     F .text	000000c0 isatty
00011f64 g     O .rodata	000000c8 __mprec_tens
00008e24 g     F .text	00000008 __locale_charset
000111c8 g     F .text	00000090 alt_icache_flush
00015b90 g     O .bss	00000004 __malloc_top_pad
00013fac g     O .rwdata	00000004 __mb_cur_max
00008e2c g     F .text	0000000c _localeconv_r
0000a730 g     F .text	0000003c __i2b
00008808 g     F .text	0000049c __sfvwrite_r
00003f98 g     F .text	00000058 SEG7_Clear
0000b110 g     F .text	00000070 _sbrk_r
0000b7a4 g     F .text	00000078 _read_r
00012868 g     O .rwdata	0000000c __lc_ctype
00013fcc g     O .rwdata	00000004 alt_max_fd
0000d900 g     F .text	00000138 __unpack_d
0000b524 g     F .text	00000110 _fclose_r
000080d4 g     F .text	00000034 fflush
00015b94 g     O .bss	00000004 __malloc_max_sbrked_mem
0000c838 g     F .text	00000074 __adddf3
00009cf4 g     F .text	00000120 __b2d
0000bdf8 g     F .text	000005b0 __umoddi3
0000dfc8 g     F .text	000000f0 lseek
00013fa8 g     O .rwdata	00000004 _global_impure_ptr
0000aaac g     F .text	000005f4 _realloc_r
00015e70 g       *ABS*	00000000 __bss_end
000108a0 g     F .text	000000f8 alt_iic_isr_register
00010e30 g     F .text	0000010c alt_tick
0000b81c g     F .text	000005dc __udivdi3
0001202c g     O .rodata	00000028 __mprec_bigtens
0000a98c g     F .text	00000120 __s2b
0000d340 g     F .text	00000194 __floatunsidf
00009c14 g     F .text	00000060 __mcmp
00013fe8 g     O .rwdata	00000004 __ctype_ptr
0000823c g     F .text	00000018 __fp_lock_all
00010858 g     F .text	00000048 alt_ic_irq_enabled
00004050 g     F .text	00000074 SEG7_Number
00010d98 g     F .text	00000098 alt_alarm_stop
00015bac g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000c8 alt_irq_handler
00012c7c g     O .rwdata	00000028 alt_dev_null
00004270 g     F .text	00000044 Set_Cursor_XY
0001047c g     F .text	00000044 alt_dcache_flush_all
00009ae0 g     F .text	00000070 __hi0bits
0000d268 g     F .text	000000d8 __fixdfsi
00013fec g       *ABS*	00000000 __ram_rwdata_end
00013fc4 g     O .rwdata	00000008 alt_dev_list
0000e490 g     F .text	00000120 write
00012458 g       *ABS*	00000000 __ram_rodata_end
0000dc88 g     F .text	000000d4 fstat
0000a86c g     F .text	00000120 __pow5mult
00015b84 g     O .bss	00000004 __nlocale_changed
00004500 g     F .text	00000008 __umodsi3
00015e70 g       *ABS*	00000000 end
0000f970 g     F .text	0000050c altera_avalon_lcd_16207_write
0000e838 g     F .text	000000c0 altera_avalon_jtag_uart_init
000116cc g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0001014c g     F .text	00000090 alt_avalon_timer_sc_init
0000d56c g     F .text	00000080 __clzsi2
0000ef5c g     F .text	00000240 altera_avalon_jtag_uart_write
00008160 g     F .text	00000004 __sfp_lock_acquire
000097bc g     F .text	000000e4 memchr
00004700 g     F .text	00001eac ___vfprintf_internal_r
000084f4 g     F .text	00000314 _free_r
00011450 g     F .text	000001b0 __call_exitprocs
00015b88 g     O .bss	00000004 __mlocale_changed
00013fb8 g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000004c _start
00015bb0 g     O .bss	00000004 _alt_tick_rate
0000a3fc g     F .text	0000014c __lshift
00015bb4 g     O .bss	00000004 _alt_nticks
0000e1c4 g     F .text	00000120 read
0000e644 g     F .text	00000074 alt_sys_init
00011318 g     F .text	00000134 __register_exitproc
0000a548 g     F .text	000001e8 __multiply
0000ebd0 g     F .text	00000074 altera_avalon_jtag_uart_close
00012458 g       *ABS*	00000000 __ram_rwdata_start
000116d0 g       *ABS*	00000000 __ram_rodata_start
00015bb8 g     O .bss	00000028 __malloc_current_mallinfo
0000a0f4 g     F .text	0000017c __d2b
0000e6f0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00011110 g     F .text	000000b8 alt_get_fd
00010330 g     F .text	0000014c alt_busy_sleep
0000da38 g     F .text	000000c8 __fpcmp_parts_d
0000b4b4 g     F .text	00000070 _close_r
000112a4 g     F .text	00000074 memcmp
0000e7a0 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00015e70 g       *ABS*	00000000 __alt_stack_base
0000e7e8 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
000065d0 g     F .text	0000013c __swsetup_r
0000cc70 g     F .text	00000258 __divdf3
000082d8 g     F .text	000000f0 __sfp
00009f58 g     F .text	00000058 __copybits
00012874 g     O .rwdata	00000408 __malloc_av_
0000816c g     F .text	00000004 __sinit_lock_release
0000c8ac g     F .text	000003c4 __muldf3
0000b26c g     F .text	00000060 __sread
00003ff0 g     F .text	00000060 SEG7_Full
00010ff0 g     F .text	00000120 alt_find_file
00004190 g     F .text	000000e0 SEG7_Decimal
000104c0 g     F .text	000000b4 alt_dev_llist_insert
0000e184 g     F .text	00000020 __malloc_lock
0000e3a4 g     F .text	000000bc sbrk
00007ed8 g     F .text	000001fc _fflush_r
0000b400 g     F .text	000000b4 _calloc_r
00015b80 g       *ABS*	00000000 __bss_start
00003dac g     F .text	0000009c LCD_Init
00009a20 g     F .text	00000098 memset
000002dc g     F .text	00003990 main
00015ba8 g     O .bss	00000004 alt_envp
00015b98 g     O .bss	00000004 __malloc_max_total_mem
0000e748 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
000042b4 g     F .text	00000058 Set_Cursor_Color
0000ff48 g     F .text	0000013c altera_avalon_lcd_16207_init
00003ed0 g     F .text	0000003c LCD_Line2
0000b180 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
0000b634 g     F .text	00000014 fclose
00015ce0 g     O .bss	00000190 _atexit0
00006924 g     F .text	000015b4 _dtoa_r
0000907c g     F .text	00000740 _malloc_r
00013fd0 g     O .rwdata	00000004 alt_errno
00008d6c g     F .text	000000b8 _fwalk
00004438 g     F .text	00000060 __divsi3
00012088 g     O .rodata	00000014 __thenan_df
000083c8 g     F .text	0000012c _malloc_trim_r
000116d0 g       *ABS*	00000000 __CTOR_END__
0000b2cc g     F .text	000000bc strcmp
000116d0 g       *ABS*	00000000 __flash_rodata_start
000116d0 g       *ABS*	00000000 __DTOR_LIST__
0000cf50 g     F .text	00000088 __nedf2
00003cb0 g     F .text	00000040 UsbRead
0000e610 g     F .text	00000034 alt_irq_init
00003e48 g     F .text	00000088 LCD_Show_Text
0000e344 g     F .text	00000060 alt_release_fd
00000200 g     F .text	00000054 maxmin
0001209c g     O .rodata	00000100 __clz_tab
000040c4 g     F .text	000000cc SEG7_Hex
00015b8c g     O .bss	00000004 _PathLocale
00011258 g     F .text	00000014 atexit
0000b388 g     F .text	00000078 _write_r
00008ecc g     F .text	0000001c setlocale
00013fa4 g     O .rwdata	00000004 _impure_ptr
00015ba0 g     O .bss	00000004 alt_argc
00010638 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00009c74 g     F .text	00000080 __ulp
0000b0a0 g     F .text	00000040 __isinfd
00008224 g     F .text	00000018 __fp_unlock_all
00010084 g     F .text	00000058 altera_avalon_lcd_16207_write_fd
00013fbc g     O .rwdata	00000008 alt_fs_list
00004364 g     F .text	00000058 Set_Pixel_Off_Color
00000020 g       *ABS*	00000000 __ram_exceptions_start
00008e38 g     F .text	00000010 localeconv
000106cc g     F .text	00000050 alt_ic_isr_register
00013fec g       *ABS*	00000000 _edata
00015e70 g       *ABS*	00000000 _end
00003c6c g     F .text	00000044 UsbWrite
000001b4 g       *ABS*	00000000 __ram_exceptions_end
0000ec44 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000107b8 g     F .text	000000a0 alt_ic_irq_disable
0000b1f0 g     F .text	0000007c __swrite
00013fb4 g     O .rwdata	00000004 __malloc_trim_threshold
00010f3c g     F .text	00000020 altera_nios2_qsys_irq_init
0001126c g     F .text	00000038 exit
00008ca4 g     F .text	000000c8 _fwalk_reent
0000a270 g     F .text	0000018c __mdiff
00004498 g     F .text	00000060 __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00008164 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
000121d4 g     O .rodata	00000101 _ctype_
00011640 g     F .text	00000020 _exit
0000b0e0 g     F .text	00000030 __isnand
000101dc g     F .text	00000154 alt_alarm_start
0000d4d4 g     F .text	00000098 __muldi3
00008ee8 g     F .text	00000194 __smakebuf_r
00004634 g     F .text	00000074 strlen
00010bb0 g     F .text	00000188 open
0000d060 g     F .text	00000088 __gedf2
0001069c g     F .text	00000030 alt_icache_flush_all
00013fdc g     O .rwdata	00000004 alt_priority_mask
0001071c g     F .text	0000009c alt_ic_irq_enable
000065ac g     F .text	00000024 __vfprintf_internal
0000c7b8 g     F .text	00000080 __subdf3
00009b50 g     F .text	000000c4 __lo0bits
00013fe0 g     O .rwdata	00000008 alt_alarm_list
000105d4 g     F .text	00000064 _do_ctors
00003cf0 g     F .text	000000bc UsbSoftReset
0000db00 g     F .text	000000fc close
0000dedc g     F .text	00000080 alt_load
0000d5ec g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00008168 g     F .text	00000004 __sinit_lock_acquire
0000a76c g     F .text	00000100 __multadd
00009ab8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00074 	movhi	r3,1
 134:	18d6f804 	addi	r3,r3,23520
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00074 	movhi	r3,1
 14c:	18d6f804 	addi	r3,r3,23520
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     1b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     1b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     1bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
     1c0:	00bffd16 	blt	zero,r2,1b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1c4:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     1c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1cc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1d0:	d6afe914 	ori	gp,gp,49060
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1d4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1d8:	1096e014 	ori	r2,r2,23424

    movhi r3, %hi(__bss_end)
     1dc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1e0:	18d79c14 	ori	r3,r3,24176

    beq r2, r3, 1f
     1e4:	10c00326 	beq	r2,r3,1f4 <_start+0x40>

0:
    stw zero, (r2)
     1e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1f0:	10fffd36 	bltu	r2,r3,1e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1f4:	000dedc0 	call	dedc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1f8:	000e1180 	call	e118 <alt_main>

000001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1fc:	003fff06 	br	1fc <alt_after_alt_main>

00000200 <maxmin>:
*
******************************************************************************/
void UsbSoftReset();
//--------------------------------------
int maxmin(int no, int max, int min)
{
     200:	defffc04 	addi	sp,sp,-16
     204:	df000315 	stw	fp,12(sp)
     208:	df000304 	addi	fp,sp,12
     20c:	e13ffd15 	stw	r4,-12(fp)
     210:	e17ffe15 	stw	r5,-8(fp)
     214:	e1bfff15 	stw	r6,-4(fp)
 if(no>max) {no=max;}
     218:	e0fffd17 	ldw	r3,-12(fp)
     21c:	e0bffe17 	ldw	r2,-8(fp)
     220:	10c0020e 	bge	r2,r3,22c <maxmin+0x2c>
     224:	e0bffe17 	ldw	r2,-8(fp)
     228:	e0bffd15 	stw	r2,-12(fp)
 if(no<min) {no=min;}
     22c:	e0fffd17 	ldw	r3,-12(fp)
     230:	e0bfff17 	ldw	r2,-4(fp)
     234:	1880020e 	bge	r3,r2,240 <maxmin+0x40>
     238:	e0bfff17 	ldw	r2,-4(fp)
     23c:	e0bffd15 	stw	r2,-12(fp)

 return(no);
     240:	e0bffd17 	ldw	r2,-12(fp)
}
     244:	e037883a 	mov	sp,fp
     248:	df000017 	ldw	fp,0(sp)
     24c:	dec00104 	addi	sp,sp,4
     250:	f800283a 	ret

00000254 <Vga_clear_screen>:
//--------------------------------------
//----------clear screen----------------
void Vga_clear_screen(base)
{
     254:	defffd04 	addi	sp,sp,-12
     258:	df000215 	stw	fp,8(sp)
     25c:	df000204 	addi	fp,sp,8
     260:	e13fff15 	stw	r4,-4(fp)
    alt_u16 x_col,y_col;
    for(y_col=0;y_col<VGA_HEIGHT;y_col++)
     264:	e03ffe0d 	sth	zero,-8(fp)
     268:	00001506 	br	2c0 <Vga_clear_screen+0x6c>
      {
        for(x_col=0;x_col<VGA_WIDTH;x_col++)
     26c:	e03ffe8d 	sth	zero,-6(fp)
     270:	00000d06 	br	2a8 <Vga_clear_screen+0x54>
        {
            Vga_Clr_Pixel(base,x_col,y_col);
     274:	e0bffe0b 	ldhu	r2,-8(fp)
     278:	10c0a024 	muli	r3,r2,640
     27c:	e0bffe8b 	ldhu	r2,-6(fp)
     280:	1885883a 	add	r2,r3,r2
     284:	1085883a 	add	r2,r2,r2
     288:	1085883a 	add	r2,r2,r2
     28c:	1007883a 	mov	r3,r2
     290:	e0bfff17 	ldw	r2,-4(fp)
     294:	1885883a 	add	r2,r3,r2
     298:	10000035 	stwio	zero,0(r2)
void Vga_clear_screen(base)
{
    alt_u16 x_col,y_col;
    for(y_col=0;y_col<VGA_HEIGHT;y_col++)
      {
        for(x_col=0;x_col<VGA_WIDTH;x_col++)
     29c:	e0bffe8b 	ldhu	r2,-6(fp)
     2a0:	10800044 	addi	r2,r2,1
     2a4:	e0bffe8d 	sth	r2,-6(fp)
     2a8:	e0bffe8b 	ldhu	r2,-6(fp)
     2ac:	1080a030 	cmpltui	r2,r2,640
     2b0:	103ff01e 	bne	r2,zero,274 <Vga_clear_screen+0x20>
//--------------------------------------
//----------clear screen----------------
void Vga_clear_screen(base)
{
    alt_u16 x_col,y_col;
    for(y_col=0;y_col<VGA_HEIGHT;y_col++)
     2b4:	e0bffe0b 	ldhu	r2,-8(fp)
     2b8:	10800044 	addi	r2,r2,1
     2bc:	e0bffe0d 	sth	r2,-8(fp)
     2c0:	e0bffe0b 	ldhu	r2,-8(fp)
     2c4:	10807830 	cmpltui	r2,r2,480
     2c8:	103fe81e 	bne	r2,zero,26c <Vga_clear_screen+0x18>
        for(x_col=0;x_col<VGA_WIDTH;x_col++)
        {
            Vga_Clr_Pixel(base,x_col,y_col);
        }
      }
}
     2cc:	e037883a 	mov	sp,fp
     2d0:	df000017 	ldw	fp,0(sp)
     2d4:	dec00104 	addi	sp,sp,4
     2d8:	f800283a 	ret

000002dc <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
     2dc:	defff804 	addi	sp,sp,-32
     2e0:	dfc00715 	stw	ra,28(sp)
     2e4:	df000615 	stw	fp,24(sp)
     2e8:	df000604 	addi	fp,sp,24
    alt_u16 intStat;
    alt_u16 usb_ctl_val;
    static alt_u16 ctl_reg = 0;
    static alt_u16 no_device = 0;
    alt_u16 fs_device = 0;
     2ec:	e03ffe0d 	sth	zero,-8(fp)
    int button_value;
    alt_u16 px = 320;
     2f0:	00805004 	movi	r2,320
     2f4:	e0bffc0d 	sth	r2,-16(fp)
    alt_u16 py = 240; 
     2f8:	00803c04 	movi	r2,240
     2fc:	e0bffb8d 	sth	r2,-18(fp)
    signed char  dx = 0;
     300:	e03ffb05 	stb	zero,-20(fp)
    signed char  dy = 0; 
     304:	e03ffac5 	stb	zero,-21(fp)
    alt_u8  pbutton = 0;
     308:	e03ffa85 	stb	zero,-22(fp)
    alt_u8 toggle=0;
     30c:	e03ffa45 	stb	zero,-23(fp)
    
    //VGA display initial
    
    VGA_Ctrl_Reg vga_ctrl_set;

    vga_ctrl_set.VGA_Ctrl_Flags.RED_ON    = 1;
     310:	e0bfff83 	ldbu	r2,-2(fp)
     314:	10800054 	ori	r2,r2,1
     318:	e0bfff85 	stb	r2,-2(fp)
    vga_ctrl_set.VGA_Ctrl_Flags.GREEN_ON  = 1;
     31c:	e0bfff83 	ldbu	r2,-2(fp)
     320:	10800094 	ori	r2,r2,2
     324:	e0bfff85 	stb	r2,-2(fp)
    vga_ctrl_set.VGA_Ctrl_Flags.BLUE_ON   = 1;
     328:	e0bfff83 	ldbu	r2,-2(fp)
     32c:	10800114 	ori	r2,r2,4
     330:	e0bfff85 	stb	r2,-2(fp)
    vga_ctrl_set.VGA_Ctrl_Flags.CURSOR_ON = 1;
     334:	e0bfff83 	ldbu	r2,-2(fp)
     338:	10800214 	ori	r2,r2,8
     33c:	e0bfff85 	stb	r2,-2(fp)

    Vga_Write_Ctrl(VPG_BASE, vga_ctrl_set.Value);
     340:	e0bfff83 	ldbu	r2,-2(fp)
     344:	10c03fcc 	andi	r3,r2,255
     348:	008244f4 	movhi	r2,2323
     34c:	10b00004 	addi	r2,r2,-16384
     350:	10c00035 	stwio	r3,0(r2)
    Vga_clear_screen(VPG_BASE); //clear the screen
     354:	01024034 	movhi	r4,2304
     358:	00002540 	call	254 <Vga_clear_screen>
    Set_Pixel_On_Color(512,512,512);
     35c:	01008004 	movi	r4,512
     360:	01408004 	movi	r5,512
     364:	01808004 	movi	r6,512
     368:	000430c0 	call	430c <Set_Pixel_On_Color>
    Set_Pixel_Off_Color(0,0,0);
     36c:	0009883a 	mov	r4,zero
     370:	000b883a 	mov	r5,zero
     374:	000d883a 	mov	r6,zero
     378:	00043640 	call	4364 <Set_Pixel_Off_Color>
    Set_Cursor_Color(0,1023,0);
     37c:	0009883a 	mov	r4,zero
     380:	0140ffc4 	movi	r5,1023
     384:	000d883a 	mov	r6,zero
     388:	00042b40 	call	42b4 <Set_Cursor_Color>
    LCD_Test();
     38c:	0003f0c0 	call	3f0c <LCD_Test>
     390:	00000006 	br	394 <main+0xb8>
    
    //----------------------------------------SIE1 initial---------------------------------------------------//
USB_HOT_PLUG:
    UsbSoftReset();
     394:	0003cf00 	call	3cf0 <UsbSoftReset>
    UsbWrite (HPI_SIE1_MSG_ADR, 0);
     398:	01005104 	movi	r4,324
     39c:	000b883a 	mov	r5,zero
     3a0:	0003c6c0 	call	3c6c <UsbWrite>
    UsbWrite (HOST1_STAT_REG, 0xFFFF);
     3a4:	01302414 	movui	r4,49296
     3a8:	017fffd4 	movui	r5,65535
     3ac:	0003c6c0 	call	3c6c <UsbWrite>
              
    /* Set HUSB_pEOT time */
    UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
     3b0:	01006d04 	movi	r4,436
     3b4:	01409604 	movi	r5,600
     3b8:	0003c6c0 	call	3c6c <UsbWrite>
     
    usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
     3bc:	00811004 	movi	r2,1088
     3c0:	e0bffe8d 	sth	r2,-6(fp)
    UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
     3c4:	e17ffe8b 	ldhu	r5,-6(fp)
     3c8:	01005084 	movi	r4,322
     3cc:	0003c6c0 	call	3c6c <UsbWrite>
    
    intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
     3d0:	00808404 	movi	r2,528
     3d4:	e0bfff0d 	sth	r2,-4(fp)
    UsbWrite(HOST1_IRQ_EN_REG, intStat); 
     3d8:	e17fff0b 	ldhu	r5,-4(fp)
     3dc:	01302314 	movui	r4,49292
     3e0:	0003c6c0 	call	3c6c <UsbWrite>

    UsbWrite(COMM_R0,0x0000);//reset time 
     3e4:	01007104 	movi	r4,452
     3e8:	000b883a 	mov	r5,zero
     3ec:	0003c6c0 	call	3c6c <UsbWrite>
    UsbWrite(COMM_R1,0x0000);  //port number
     3f0:	01007184 	movi	r4,454
     3f4:	000b883a 	mov	r5,zero
     3f8:	0003c6c0 	call	3c6c <UsbWrite>
    UsbWrite(COMM_R2,0x0000);  //r1
     3fc:	01007204 	movi	r4,456
     400:	000b883a 	mov	r5,zero
     404:	0003c6c0 	call	3c6c <UsbWrite>
    UsbWrite(COMM_R3,0x0000);  //r1
     408:	01007284 	movi	r4,458
     40c:	000b883a 	mov	r5,zero
     410:	0003c6c0 	call	3c6c <UsbWrite>
    UsbWrite(COMM_R4,0x0000);  //r1
     414:	01007304 	movi	r4,460
     418:	000b883a 	mov	r5,zero
     41c:	0003c6c0 	call	3c6c <UsbWrite>
    UsbWrite(COMM_R5,0x0000);  //r1
     420:	01007384 	movi	r4,462
     424:	000b883a 	mov	r5,zero
     428:	0003c6c0 	call	3c6c <UsbWrite>
    UsbWrite(COMM_R6,0x0000);  //r1
     42c:	01007404 	movi	r4,464
     430:	000b883a 	mov	r5,zero
     434:	0003c6c0 	call	3c6c <UsbWrite>
    UsbWrite(COMM_R7,0x0000);  //r1
     438:	01007484 	movi	r4,466
     43c:	000b883a 	mov	r5,zero
     440:	0003c6c0 	call	3c6c <UsbWrite>
    UsbWrite(COMM_R8,0x0000);  //r1
     444:	01007504 	movi	r4,468
     448:	000b883a 	mov	r5,zero
     44c:	0003c6c0 	call	3c6c <UsbWrite>
    UsbWrite(COMM_R9,0x0000);  //r1
     450:	01007584 	movi	r4,470
     454:	000b883a 	mov	r5,zero
     458:	0003c6c0 	call	3c6c <UsbWrite>
    UsbWrite(COMM_R10,0x0000);  //r1
     45c:	01007604 	movi	r4,472
     460:	000b883a 	mov	r5,zero
     464:	0003c6c0 	call	3c6c <UsbWrite>
    UsbWrite(COMM_R11,0x0000);  //r1
     468:	01007684 	movi	r4,474
     46c:	000b883a 	mov	r5,zero
     470:	0003c6c0 	call	3c6c <UsbWrite>
    UsbWrite(COMM_R12,0x0000);  //r1
     474:	01007704 	movi	r4,476
     478:	000b883a 	mov	r5,zero
     47c:	0003c6c0 	call	3c6c <UsbWrite>
    UsbWrite(COMM_R13,0x0000);  //r1    
     480:	01007784 	movi	r4,478
     484:	000b883a 	mov	r5,zero
     488:	0003c6c0 	call	3c6c <UsbWrite>
    UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
     48c:	01007084 	movi	r4,450
     490:	01401c84 	movi	r5,114
     494:	0003c6c0 	call	3c6c <UsbWrite>
    IOWR(CY7C67200_BASE,HPI_MAILBOX,0xCE01);
     498:	00c24834 	movhi	r3,2336
     49c:	18c01d04 	addi	r3,r3,116
     4a0:	00b38054 	movui	r2,52737
     4a4:	18800035 	stwio	r2,0(r3)
     
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
     4a8:	00824834 	movhi	r2,2336
     4ac:	10801f04 	addi	r2,r2,124
     4b0:	10800037 	ldwio	r2,0(r2)
     4b4:	10bfffcc 	andi	r2,r2,65535
     4b8:	1005003a 	cmpeq	r2,r2,zero
     4bc:	103ffa1e 	bne	r2,zero,4a8 <main+0x1cc>
    {
    }
    while (IORD(CY7C67200_BASE,HPI_MAILBOX) != COMM_ACK) 
     4c0:	00824834 	movhi	r2,2336
     4c4:	10801d04 	addi	r2,r2,116
     4c8:	10800037 	ldwio	r2,0(r2)
     4cc:	1083fb60 	cmpeqi	r2,r2,4077
     4d0:	1000071e 	bne	r2,zero,4f0 <main+0x214>
    {
        printf("[ERROR]:routine mailbox data is %x\n",IORD(CY7C67200_BASE,HPI_MAILBOX));
     4d4:	00824834 	movhi	r2,2336
     4d8:	10801d04 	addi	r2,r2,116
     4dc:	11400037 	ldwio	r5,0(r2)
     4e0:	01000074 	movhi	r4,1
     4e4:	2105b404 	addi	r4,r4,5840
     4e8:	00045080 	call	4508 <printf>
        goto USB_HOT_PLUG;
     4ec:	003fa906 	br	394 <main+0xb8>
    }
    
  
    //usleep(30*1000);    
    UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
     4f0:	01007084 	movi	r4,450
     4f4:	01401d04 	movi	r5,116
     4f8:	0003c6c0 	call	3c6c <UsbWrite>
    UsbWrite(COMM_R0,0x003c);//reset time 
     4fc:	01007104 	movi	r4,452
     500:	01400f04 	movi	r5,60
     504:	0003c6c0 	call	3c6c <UsbWrite>
    UsbWrite(COMM_R1,0x0000);  //port number
     508:	01007184 	movi	r4,454
     50c:	000b883a 	mov	r5,zero
     510:	0003c6c0 	call	3c6c <UsbWrite>
    UsbWrite(COMM_R2,0x0000);  //r1
     514:	01007204 	movi	r4,456
     518:	000b883a 	mov	r5,zero
     51c:	0003c6c0 	call	3c6c <UsbWrite>
    UsbWrite(COMM_R3,0x0000);  //r1
     520:	01007284 	movi	r4,458
     524:	000b883a 	mov	r5,zero
     528:	0003c6c0 	call	3c6c <UsbWrite>
    UsbWrite(COMM_R4,0x0000);  //r1
     52c:	01007304 	movi	r4,460
     530:	000b883a 	mov	r5,zero
     534:	0003c6c0 	call	3c6c <UsbWrite>
    UsbWrite(COMM_R5,0x0000);  //r1
     538:	01007384 	movi	r4,462
     53c:	000b883a 	mov	r5,zero
     540:	0003c6c0 	call	3c6c <UsbWrite>
    UsbWrite(COMM_R6,0x0000);  //r1
     544:	01007404 	movi	r4,464
     548:	000b883a 	mov	r5,zero
     54c:	0003c6c0 	call	3c6c <UsbWrite>
    UsbWrite(COMM_R7,0x0000);  //r1
     550:	01007484 	movi	r4,466
     554:	000b883a 	mov	r5,zero
     558:	0003c6c0 	call	3c6c <UsbWrite>
    UsbWrite(COMM_R8,0x0000);  //r1
     55c:	01007504 	movi	r4,468
     560:	000b883a 	mov	r5,zero
     564:	0003c6c0 	call	3c6c <UsbWrite>
    UsbWrite(COMM_R9,0x0000);  //r1
     568:	01007584 	movi	r4,470
     56c:	000b883a 	mov	r5,zero
     570:	0003c6c0 	call	3c6c <UsbWrite>
    UsbWrite(COMM_R10,0x0000);  //r1
     574:	01007604 	movi	r4,472
     578:	000b883a 	mov	r5,zero
     57c:	0003c6c0 	call	3c6c <UsbWrite>
    UsbWrite(COMM_R11,0x0000);  //r1
     580:	01007684 	movi	r4,474
     584:	000b883a 	mov	r5,zero
     588:	0003c6c0 	call	3c6c <UsbWrite>
    UsbWrite(COMM_R12,0x0000);  //r1
     58c:	01007704 	movi	r4,476
     590:	000b883a 	mov	r5,zero
     594:	0003c6c0 	call	3c6c <UsbWrite>
    UsbWrite(COMM_R13,0x0000);  //r1    
     598:	01007784 	movi	r4,478
     59c:	000b883a 	mov	r5,zero
     5a0:	0003c6c0 	call	3c6c <UsbWrite>

    IOWR(CY7C67200_BASE,HPI_MAILBOX,0xCE01);
     5a4:	00c24834 	movhi	r3,2336
     5a8:	18c01d04 	addi	r3,r3,116
     5ac:	00b38054 	movui	r2,52737
     5b0:	18800035 	stwio	r2,0(r3)
  
    while (IORD(CY7C67200_BASE,HPI_MAILBOX) != COMM_ACK) 
     5b4:	00824834 	movhi	r2,2336
     5b8:	10801d04 	addi	r2,r2,116
     5bc:	10800037 	ldwio	r2,0(r2)
     5c0:	1083fb60 	cmpeqi	r2,r2,4077
     5c4:	1000071e 	bne	r2,zero,5e4 <main+0x308>
    {
        printf("[ERROR]:routine mailbox data is %x\n",IORD(CY7C67200_BASE,HPI_MAILBOX));
     5c8:	00824834 	movhi	r2,2336
     5cc:	10801d04 	addi	r2,r2,116
     5d0:	11400037 	ldwio	r5,0(r2)
     5d4:	01000074 	movhi	r4,1
     5d8:	2105b404 	addi	r4,r4,5840
     5dc:	00045080 	call	4508 <printf>
        goto USB_HOT_PLUG;
     5e0:	003f6c06 	br	394 <main+0xb8>
    }

    //usleep(30*1000);    
    ctl_reg = USB1_CTL_REG;
     5e4:	00b02284 	movi	r2,-16246
     5e8:	d0a6f78d 	sth	r2,-25634(gp)
    no_device = (A_DP_STAT | A_DM_STAT);
     5ec:	008c0004 	movi	r2,12288
     5f0:	d0a6f70d 	sth	r2,-25636(gp)
    fs_device = A_DP_STAT;
     5f4:	00880004 	movi	r2,8192
     5f8:	e0bffe0d 	sth	r2,-8(fp)
    
    usb_ctl_val = UsbRead(ctl_reg);
     5fc:	d0a6f78b 	ldhu	r2,-25634(gp)
     600:	113fffcc 	andi	r4,r2,65535
     604:	0003cb00 	call	3cb0 <UsbRead>
     608:	e0bffe8d 	sth	r2,-6(fp)
   
    if (!(usb_ctl_val & no_device))
     60c:	d0e6f70b 	ldhu	r3,-25636(gp)
     610:	e0bffe8b 	ldhu	r2,-6(fp)
     614:	1884703a 	and	r2,r3,r2
     618:	10bfffcc 	andi	r2,r2,65535
     61c:	1004c03a 	cmpne	r2,r2,zero
     620:	10001a1e 	bne	r2,zero,68c <main+0x3b0>
    {
      printf("\n[INFO]: no device is present in SIE1!\n");
     624:	01000074 	movhi	r4,1
     628:	2105bd04 	addi	r4,r4,5876
     62c:	00046200 	call	4620 <puts>
      printf("[INFO]: please insert a USB mouse in SIE1!\n");
     630:	01000074 	movhi	r4,1
     634:	2105c704 	addi	r4,r4,5916
     638:	00046200 	call	4620 <puts>
      while (!(usb_ctl_val & no_device))
     63c:	00000c06 	br	670 <main+0x394>
      {
       
         usb_ctl_val = UsbRead(ctl_reg);
     640:	d0a6f78b 	ldhu	r2,-25634(gp)
     644:	113fffcc 	andi	r4,r2,65535
     648:	0003cb00 	call	3cb0 <UsbRead>
     64c:	e0bffe8d 	sth	r2,-6(fp)
         if(usb_ctl_val & no_device)
     650:	d0e6f70b 	ldhu	r3,-25636(gp)
     654:	e0bffe8b 	ldhu	r2,-6(fp)
     658:	1884703a 	and	r2,r3,r2
     65c:	10bfffcc 	andi	r2,r2,65535
     660:	1004c03a 	cmpne	r2,r2,zero
     664:	103f4b1e 	bne	r2,zero,394 <main+0xb8>
           goto USB_HOT_PLUG;
       
         usleep(2000);
     668:	0101f404 	movi	r4,2000
     66c:	000e4600 	call	e460 <usleep>
   
    if (!(usb_ctl_val & no_device))
    {
      printf("\n[INFO]: no device is present in SIE1!\n");
      printf("[INFO]: please insert a USB mouse in SIE1!\n");
      while (!(usb_ctl_val & no_device))
     670:	d0e6f70b 	ldhu	r3,-25636(gp)
     674:	e0bffe8b 	ldhu	r2,-6(fp)
     678:	1884703a 	and	r2,r3,r2
     67c:	10bfffcc 	andi	r2,r2,65535
     680:	1005003a 	cmpeq	r2,r2,zero
     684:	103fee1e 	bne	r2,zero,640 <main+0x364>
     688:	00000d06 	br	6c0 <main+0x3e4>
      }
    }
    else
    {
        /* check for low speed or full speed by reading D+ and D- lines */    
        if (usb_ctl_val & fs_device)
     68c:	e0fffe8b 	ldhu	r3,-6(fp)
     690:	e0bffe0b 	ldhu	r2,-8(fp)
     694:	1884703a 	and	r2,r3,r2
     698:	10bfffcc 	andi	r2,r2,65535
     69c:	1005003a 	cmpeq	r2,r2,zero
     6a0:	1000041e 	bne	r2,zero,6b4 <main+0x3d8>
        {
            printf("[INFO]: full speed device\n");
     6a4:	01000074 	movhi	r4,1
     6a8:	2105d204 	addi	r4,r4,5960
     6ac:	00046200 	call	4620 <puts>
     6b0:	00000306 	br	6c0 <main+0x3e4>
            
        }
        else
        {
            printf("[INFO]: low speed device\n");            
     6b4:	01000074 	movhi	r4,1
     6b8:	2105d904 	addi	r4,r4,5988
     6bc:	00046200 	call	4620 <puts>

    //printf("[SIE1 INIT]:USB 1 Control Register reg is %x\n",UsbRead(0xC08A));
    
    //------------------------------------------------------set address -----------------------------------------------------------------
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
     6c0:	00c24834 	movhi	r3,2336
     6c4:	18c01e04 	addi	r3,r3,120
     6c8:	00814004 	movi	r2,1280
     6cc:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
     6d0:	00c24834 	movhi	r3,2336
     6d4:	18c01c04 	addi	r3,r3,112
     6d8:	00814304 	movi	r2,1292
     6dc:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
     6e0:	00c24834 	movhi	r3,2336
     6e4:	18c01c04 	addi	r3,r3,112
     6e8:	00800204 	movi	r2,8
     6ec:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x00D0);
     6f0:	00c24834 	movhi	r3,2336
     6f4:	18c01c04 	addi	r3,r3,112
     6f8:	00803404 	movi	r2,208
     6fc:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
     700:	00c24834 	movhi	r3,2336
     704:	18c01c04 	addi	r3,r3,112
     708:	00800044 	movi	r2,1
     70c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     710:	00c24834 	movhi	r3,2336
     714:	18c01c04 	addi	r3,r3,112
     718:	008004c4 	movi	r2,19
     71c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
     720:	00c24834 	movhi	r3,2336
     724:	18c01c04 	addi	r3,r3,112
     728:	00814504 	movi	r2,1300
     72c:	18800035 	stwio	r2,0(r3)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0500);
     730:	00c24834 	movhi	r3,2336
     734:	18c01c04 	addi	r3,r3,112
     738:	00814004 	movi	r2,1280
     73c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0002);//device address   
     740:	00c24834 	movhi	r3,2336
     744:	18c01c04 	addi	r3,r3,112
     748:	00800084 	movi	r2,2
     74c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     750:	00824834 	movhi	r2,2336
     754:	10801c04 	addi	r2,r2,112
     758:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     75c:	00824834 	movhi	r2,2336
     760:	10801c04 	addi	r2,r2,112
     764:	10000035 	stwio	zero,0(r2)
    
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
     768:	00824834 	movhi	r2,2336
     76c:	10801c04 	addi	r2,r2,112
     770:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
     774:	00824834 	movhi	r2,2336
     778:	10801c04 	addi	r2,r2,112
     77c:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0090);//device address
     780:	00c24834 	movhi	r3,2336
     784:	18c01c04 	addi	r3,r3,112
     788:	00802404 	movi	r2,144
     78c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
     790:	00c24834 	movhi	r3,2336
     794:	18c01c04 	addi	r3,r3,112
     798:	00801044 	movi	r2,65
     79c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     7a0:	00c24834 	movhi	r3,2336
     7a4:	18c01c04 	addi	r3,r3,112
     7a8:	008004c4 	movi	r2,19
     7ac:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     7b0:	00824834 	movhi	r2,2336
     7b4:	10801c04 	addi	r2,r2,112
     7b8:	10000035 	stwio	zero,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     7bc:	01006c04 	movi	r4,432
     7c0:	01414004 	movi	r5,1280
     7c4:	0003c6c0 	call	3c6c <UsbWrite>
    
   
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     7c8:	00004406 	br	8dc <main+0x600>
    {
        //the starting address
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
     7cc:	00c24834 	movhi	r3,2336
     7d0:	18c01e04 	addi	r3,r3,120
     7d4:	00814004 	movi	r2,1280
     7d8:	18800035 	stwio	r2,0(r3)
           IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
     7dc:	00c24834 	movhi	r3,2336
     7e0:	18c01c04 	addi	r3,r3,112
     7e4:	00814304 	movi	r2,1292
     7e8:	18800035 	stwio	r2,0(r3)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
     7ec:	00c24834 	movhi	r3,2336
     7f0:	18c01c04 	addi	r3,r3,112
     7f4:	00800204 	movi	r2,8
     7f8:	18800035 	stwio	r2,0(r3)
           IOWR(CY7C67200_BASE,HPI_DATA,0x00D0);
     7fc:	00c24834 	movhi	r3,2336
     800:	18c01c04 	addi	r3,r3,112
     804:	00803404 	movi	r2,208
     808:	18800035 	stwio	r2,0(r3)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
     80c:	00c24834 	movhi	r3,2336
     810:	18c01c04 	addi	r3,r3,112
     814:	00800044 	movi	r2,1
     818:	18800035 	stwio	r2,0(r3)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     81c:	00c24834 	movhi	r3,2336
     820:	18c01c04 	addi	r3,r3,112
     824:	008004c4 	movi	r2,19
     828:	18800035 	stwio	r2,0(r3)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0514); 
     82c:	00c24834 	movhi	r3,2336
     830:	18c01c04 	addi	r3,r3,112
     834:	00814504 	movi	r2,1300
     838:	18800035 	stwio	r2,0(r3)
    
           //td content 4 bytes
           IOWR(CY7C67200_BASE,HPI_DATA,0x0500);
     83c:	00c24834 	movhi	r3,2336
     840:	18c01c04 	addi	r3,r3,112
     844:	00814004 	movi	r2,1280
     848:	18800035 	stwio	r2,0(r3)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0002);//device address   
     84c:	00c24834 	movhi	r3,2336
     850:	18c01c04 	addi	r3,r3,112
     854:	00800084 	movi	r2,2
     858:	18800035 	stwio	r2,0(r3)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     85c:	00824834 	movhi	r2,2336
     860:	10801c04 	addi	r2,r2,112
     864:	10000035 	stwio	zero,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     868:	00824834 	movhi	r2,2336
     86c:	10801c04 	addi	r2,r2,112
     870:	10000035 	stwio	zero,0(r2)
           //IN 
           IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
     874:	00824834 	movhi	r2,2336
     878:	10801c04 	addi	r2,r2,112
     87c:	10000035 	stwio	zero,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
     880:	00824834 	movhi	r2,2336
     884:	10801c04 	addi	r2,r2,112
     888:	10000035 	stwio	zero,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0090);//device address
     88c:	00c24834 	movhi	r3,2336
     890:	18c01c04 	addi	r3,r3,112
     894:	00802404 	movi	r2,144
     898:	18800035 	stwio	r2,0(r3)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
     89c:	00c24834 	movhi	r3,2336
     8a0:	18c01c04 	addi	r3,r3,112
     8a4:	00801044 	movi	r2,65
     8a8:	18800035 	stwio	r2,0(r3)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     8ac:	00c24834 	movhi	r3,2336
     8b0:	18c01c04 	addi	r3,r3,112
     8b4:	008004c4 	movi	r2,19
     8b8:	18800035 	stwio	r2,0(r3)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     8bc:	00824834 	movhi	r2,2336
     8c0:	10801c04 	addi	r2,r2,112
     8c4:	10000035 	stwio	zero,0(r2)
        
           UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr 
     8c8:	01006c04 	movi	r4,432
     8cc:	01414004 	movi	r5,1280
     8d0:	0003c6c0 	call	3c6c <UsbWrite>
           usleep(10*1000);
     8d4:	0109c404 	movi	r4,10000
     8d8:	000e4600 	call	e460 <usleep>
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    
   
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     8dc:	00824834 	movhi	r2,2336
     8e0:	10801f04 	addi	r2,r2,124
     8e4:	10800037 	ldwio	r2,0(r2)
     8e8:	1080040c 	andi	r2,r2,16
     8ec:	1005003a 	cmpeq	r2,r2,zero
     8f0:	103fb61e 	bne	r2,zero,7cc <main+0x4f0>
           UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr 
           usleep(10*1000);
    }
    
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
     8f4:	01005104 	movi	r4,324
     8f8:	0003cb00 	call	3cb0 <UsbRead>
     8fc:	e0bffe8d 	sth	r2,-6(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
     900:	01005104 	movi	r4,324
     904:	000b883a 	mov	r5,zero
     908:	0003c6c0 	call	3c6c <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
     90c:	00000d06 	br	944 <main+0x668>
    {
       if(usb_ctl_val == 0x000)
     910:	e0bffe8b 	ldhu	r2,-6(fp)
     914:	1005003a 	cmpeq	r2,r2,zero
     918:	1000041e 	bne	r2,zero,92c <main+0x650>
       {
       }
       else
       {
        printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
     91c:	e17ffe8b 	ldhu	r5,-6(fp)
     920:	01000074 	movhi	r4,1
     924:	2105e004 	addi	r4,r4,6016
     928:	00045080 	call	4508 <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
     92c:	01005104 	movi	r4,324
     930:	0003cb00 	call	3cb0 <UsbRead>
     934:	e0bffe8d 	sth	r2,-6(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
     938:	01005104 	movi	r4,324
     93c:	000b883a 	mov	r5,zero
     940:	0003c6c0 	call	3c6c <UsbWrite>
    }
    
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
     944:	e0bffe8b 	ldhu	r2,-6(fp)
     948:	10840018 	cmpnei	r2,r2,4096
     94c:	103ff01e 	bne	r2,zero,910 <main+0x634>
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
       //goto USB_HOT_PLUG;
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
     950:	00c24834 	movhi	r3,2336
     954:	18c01e04 	addi	r3,r3,120
     958:	00814184 	movi	r2,1286
     95c:	18800035 	stwio	r2,0(r3)
    printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
     960:	00824834 	movhi	r2,2336
     964:	10801c04 	addi	r2,r2,112
     968:	11400037 	ldwio	r5,0(r2)
     96c:	01000074 	movhi	r4,1
     970:	2105e804 	addi	r4,r4,6048
     974:	00045080 	call	4508 <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
     978:	00c24834 	movhi	r3,2336
     97c:	18c01e04 	addi	r3,r3,120
     980:	00814204 	movi	r2,1288
     984:	18800035 	stwio	r2,0(r3)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
     988:	00824834 	movhi	r2,2336
     98c:	10801c04 	addi	r2,r2,112
     990:	10800037 	ldwio	r2,0(r2)
     994:	e0bffe8d 	sth	r2,-6(fp)
    printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
     998:	e17ffe8b 	ldhu	r5,-6(fp)
     99c:	01000074 	movhi	r4,1
     9a0:	2105f304 	addi	r4,r4,6092
     9a4:	00045080 	call	4508 <printf>
    while (usb_ctl_val != 0x03) 
     9a8:	e0bffe8b 	ldhu	r2,-6(fp)
     9ac:	108000e0 	cmpeqi	r2,r2,3
     9b0:	10001a1e 	bne	r2,zero,a1c <main+0x740>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
     9b4:	00824834 	movhi	r2,2336
     9b8:	10801f04 	addi	r2,r2,124
     9bc:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
     9c0:	01005104 	movi	r4,324
     9c4:	0003cb00 	call	3cb0 <UsbRead>
     9c8:	10bfffcc 	andi	r2,r2,65535
     9cc:	10840018 	cmpnei	r2,r2,4096
     9d0:	1000091e 	bne	r2,zero,9f8 <main+0x71c>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
     9d4:	01005104 	movi	r4,324
     9d8:	000b883a 	mov	r5,zero
     9dc:	0003c6c0 	call	3c6c <UsbWrite>
           
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     9e0:	00824834 	movhi	r2,2336
     9e4:	10801f04 	addi	r2,r2,124
     9e8:	10800037 	ldwio	r2,0(r2)
     9ec:	1080040c 	andi	r2,r2,16
     9f0:	1005003a 	cmpeq	r2,r2,zero
     9f4:	103ffa1e 	bne	r2,zero,9e0 <main+0x704>
           {
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
     9f8:	00c24834 	movhi	r3,2336
     9fc:	18c01e04 	addi	r3,r3,120
     a00:	00814204 	movi	r2,1288
     a04:	18800035 	stwio	r2,0(r3)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
     a08:	00824834 	movhi	r2,2336
     a0c:	10801c04 	addi	r2,r2,112
     a10:	10800037 	ldwio	r2,0(r2)
     a14:	e0bffe8d 	sth	r2,-6(fp)
           
           goto USB_HOT_PLUG;
     a18:	003e5e06 	br	394 <main+0xb8>
    }    
       
    printf("------------[ENUM PROCESS]:set address pass!---------------\n");
     a1c:	01000074 	movhi	r4,1
     a20:	2105ff04 	addi	r4,r4,6140
     a24:	00046200 	call	4620 <puts>
    
    
    //-------------------------------get device descriptor-1 -----------------------------------//
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
     a28:	00c24834 	movhi	r3,2336
     a2c:	18c01e04 	addi	r3,r3,120
     a30:	00814004 	movi	r2,1280
     a34:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
     a38:	00c24834 	movhi	r3,2336
     a3c:	18c01c04 	addi	r3,r3,112
     a40:	00814304 	movi	r2,1292
     a44:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
     a48:	00c24834 	movhi	r3,2336
     a4c:	18c01c04 	addi	r3,r3,112
     a50:	00800204 	movi	r2,8
     a54:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
     a58:	00c24834 	movhi	r3,2336
     a5c:	18c01c04 	addi	r3,r3,112
     a60:	0080b404 	movi	r2,720
     a64:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
     a68:	00c24834 	movhi	r3,2336
     a6c:	18c01c04 	addi	r3,r3,112
     a70:	00800044 	movi	r2,1
     a74:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     a78:	00c24834 	movhi	r3,2336
     a7c:	18c01c04 	addi	r3,r3,112
     a80:	008004c4 	movi	r2,19
     a84:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
     a88:	00c24834 	movhi	r3,2336
     a8c:	18c01c04 	addi	r3,r3,112
     a90:	00814504 	movi	r2,1300
     a94:	18800035 	stwio	r2,0(r3)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
     a98:	00c24834 	movhi	r3,2336
     a9c:	18c01c04 	addi	r3,r3,112
     aa0:	0081a004 	movi	r2,1664
     aa4:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0100);
     aa8:	00c24834 	movhi	r3,2336
     aac:	18c01c04 	addi	r3,r3,112
     ab0:	00804004 	movi	r2,256
     ab4:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     ab8:	00824834 	movhi	r2,2336
     abc:	10801c04 	addi	r2,r2,112
     ac0:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);
     ac4:	00c24834 	movhi	r3,2336
     ac8:	18c01c04 	addi	r3,r3,112
     acc:	00800204 	movi	r2,8
     ad0:	18800035 	stwio	r2,0(r3)
    
    //data phase IN
    IOWR(CY7C67200_BASE,HPI_DATA,0x052C); //
     ad4:	00c24834 	movhi	r3,2336
     ad8:	18c01c04 	addi	r3,r3,112
     adc:	00814b04 	movi	r2,1324
     ae0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//
     ae4:	00c24834 	movhi	r3,2336
     ae8:	18c01c04 	addi	r3,r3,112
     aec:	00800204 	movi	r2,8
     af0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//
     af4:	00c24834 	movhi	r3,2336
     af8:	18c01c04 	addi	r3,r3,112
     afc:	0080a404 	movi	r2,656
     b00:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
     b04:	00c24834 	movhi	r3,2336
     b08:	18c01c04 	addi	r3,r3,112
     b0c:	00801044 	movi	r2,65
     b10:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     b14:	00c24834 	movhi	r3,2336
     b18:	18c01c04 	addi	r3,r3,112
     b1c:	008004c4 	movi	r2,19
     b20:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);
     b24:	00c24834 	movhi	r3,2336
     b28:	18c01c04 	addi	r3,r3,112
     b2c:	00814804 	movi	r2,1312
     b30:	18800035 	stwio	r2,0(r3)
    
//    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
     b34:	00824834 	movhi	r2,2336
     b38:	10801c04 	addi	r2,r2,112
     b3c:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
     b40:	00824834 	movhi	r2,2336
     b44:	10801c04 	addi	r2,r2,112
     b48:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//device address
     b4c:	00c24834 	movhi	r3,2336
     b50:	18c01c04 	addi	r3,r3,112
     b54:	00808404 	movi	r2,528
     b58:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
     b5c:	00c24834 	movhi	r3,2336
     b60:	18c01c04 	addi	r3,r3,112
     b64:	00801044 	movi	r2,65
     b68:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     b6c:	00c24834 	movhi	r3,2336
     b70:	18c01c04 	addi	r3,r3,112
     b74:	008004c4 	movi	r2,19
     b78:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     b7c:	00824834 	movhi	r2,2336
     b80:	10801c04 	addi	r2,r2,112
     b84:	10000035 	stwio	zero,0(r2)
    
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     b88:	01006c04 	movi	r4,432
     b8c:	01414004 	movi	r5,1280
     b90:	0003c6c0 	call	3c6c <UsbWrite>
    
   //usleep(10*1000);
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     b94:	00005d06 	br	d0c <main+0xa30>
    {
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
     b98:	00c24834 	movhi	r3,2336
     b9c:	18c01e04 	addi	r3,r3,120
     ba0:	00814004 	movi	r2,1280
     ba4:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
     ba8:	00c24834 	movhi	r3,2336
     bac:	18c01c04 	addi	r3,r3,112
     bb0:	00814304 	movi	r2,1292
     bb4:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
     bb8:	00c24834 	movhi	r3,2336
     bbc:	18c01c04 	addi	r3,r3,112
     bc0:	00800204 	movi	r2,8
     bc4:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
     bc8:	00c24834 	movhi	r3,2336
     bcc:	18c01c04 	addi	r3,r3,112
     bd0:	0080b404 	movi	r2,720
     bd4:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
     bd8:	00c24834 	movhi	r3,2336
     bdc:	18c01c04 	addi	r3,r3,112
     be0:	00800044 	movi	r2,1
     be4:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     be8:	00c24834 	movhi	r3,2336
     bec:	18c01c04 	addi	r3,r3,112
     bf0:	008004c4 	movi	r2,19
     bf4:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
     bf8:	00c24834 	movhi	r3,2336
     bfc:	18c01c04 	addi	r3,r3,112
     c00:	00814504 	movi	r2,1300
     c04:	18800035 	stwio	r2,0(r3)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0680);
     c08:	00c24834 	movhi	r3,2336
     c0c:	18c01c04 	addi	r3,r3,112
     c10:	0081a004 	movi	r2,1664
     c14:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0100);
     c18:	00c24834 	movhi	r3,2336
     c1c:	18c01c04 	addi	r3,r3,112
     c20:	00804004 	movi	r2,256
     c24:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     c28:	00824834 	movhi	r2,2336
     c2c:	10801c04 	addi	r2,r2,112
     c30:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);
     c34:	00c24834 	movhi	r3,2336
     c38:	18c01c04 	addi	r3,r3,112
     c3c:	00800204 	movi	r2,8
     c40:	18800035 	stwio	r2,0(r3)
    
    //data phase IN
    IOWR(CY7C67200_BASE,HPI_DATA,0x052C); //
     c44:	00c24834 	movhi	r3,2336
     c48:	18c01c04 	addi	r3,r3,112
     c4c:	00814b04 	movi	r2,1324
     c50:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//
     c54:	00c24834 	movhi	r3,2336
     c58:	18c01c04 	addi	r3,r3,112
     c5c:	00800204 	movi	r2,8
     c60:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//
     c64:	00c24834 	movhi	r3,2336
     c68:	18c01c04 	addi	r3,r3,112
     c6c:	0080a404 	movi	r2,656
     c70:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
     c74:	00c24834 	movhi	r3,2336
     c78:	18c01c04 	addi	r3,r3,112
     c7c:	00801044 	movi	r2,65
     c80:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     c84:	00c24834 	movhi	r3,2336
     c88:	18c01c04 	addi	r3,r3,112
     c8c:	008004c4 	movi	r2,19
     c90:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);
     c94:	00c24834 	movhi	r3,2336
     c98:	18c01c04 	addi	r3,r3,112
     c9c:	00814804 	movi	r2,1312
     ca0:	18800035 	stwio	r2,0(r3)
    
//    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
     ca4:	00824834 	movhi	r2,2336
     ca8:	10801c04 	addi	r2,r2,112
     cac:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
     cb0:	00824834 	movhi	r2,2336
     cb4:	10801c04 	addi	r2,r2,112
     cb8:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//device address
     cbc:	00c24834 	movhi	r3,2336
     cc0:	18c01c04 	addi	r3,r3,112
     cc4:	00808404 	movi	r2,528
     cc8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
     ccc:	00c24834 	movhi	r3,2336
     cd0:	18c01c04 	addi	r3,r3,112
     cd4:	00801044 	movi	r2,65
     cd8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     cdc:	00c24834 	movhi	r3,2336
     ce0:	18c01c04 	addi	r3,r3,112
     ce4:	008004c4 	movi	r2,19
     ce8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     cec:	00824834 	movhi	r2,2336
     cf0:	10801c04 	addi	r2,r2,112
     cf4:	10000035 	stwio	zero,0(r2)
    
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     cf8:	01006c04 	movi	r4,432
     cfc:	01414004 	movi	r5,1280
     d00:	0003c6c0 	call	3c6c <UsbWrite>
    usleep(10*1000);
     d04:	0109c404 	movi	r4,10000
     d08:	000e4600 	call	e460 <usleep>
    
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    
   //usleep(10*1000);
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     d0c:	00824834 	movhi	r2,2336
     d10:	10801f04 	addi	r2,r2,124
     d14:	10800037 	ldwio	r2,0(r2)
     d18:	1080040c 	andi	r2,r2,16
     d1c:	1005003a 	cmpeq	r2,r2,zero
     d20:	103f9d1e 	bne	r2,zero,b98 <main+0x8bc>
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    usleep(10*1000);
    }
    
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
     d24:	01005104 	movi	r4,324
     d28:	0003cb00 	call	3cb0 <UsbRead>
     d2c:	e0bffe8d 	sth	r2,-6(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
     d30:	01005104 	movi	r4,324
     d34:	000b883a 	mov	r5,zero
     d38:	0003c6c0 	call	3c6c <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
     d3c:	00000d06 	br	d74 <main+0xa98>
    {
       if(usb_ctl_val == 0x000)
     d40:	e0bffe8b 	ldhu	r2,-6(fp)
     d44:	1005003a 	cmpeq	r2,r2,zero
     d48:	1000041e 	bne	r2,zero,d5c <main+0xa80>
       {
       }
       else
       {
        printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
     d4c:	e17ffe8b 	ldhu	r5,-6(fp)
     d50:	01000074 	movhi	r4,1
     d54:	2105e004 	addi	r4,r4,6016
     d58:	00045080 	call	4508 <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
     d5c:	01005104 	movi	r4,324
     d60:	0003cb00 	call	3cb0 <UsbRead>
     d64:	e0bffe8d 	sth	r2,-6(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
     d68:	01005104 	movi	r4,324
     d6c:	000b883a 	mov	r5,zero
     d70:	0003c6c0 	call	3c6c <UsbWrite>
    }
    
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
     d74:	e0bffe8b 	ldhu	r2,-6(fp)
     d78:	10840018 	cmpnei	r2,r2,4096
     d7c:	103ff01e 	bne	r2,zero,d40 <main+0xa64>
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
     d80:	00c24834 	movhi	r3,2336
     d84:	18c01e04 	addi	r3,r3,120
     d88:	00814184 	movi	r2,1286
     d8c:	18800035 	stwio	r2,0(r3)
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
     d90:	00824834 	movhi	r2,2336
     d94:	10801c04 	addi	r2,r2,112
     d98:	11400037 	ldwio	r5,0(r2)
     d9c:	01000074 	movhi	r4,1
     da0:	21060e04 	addi	r4,r4,6200
     da4:	00045080 	call	4508 <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
     da8:	00c24834 	movhi	r3,2336
     dac:	18c01e04 	addi	r3,r3,120
     db0:	00814204 	movi	r2,1288
     db4:	18800035 	stwio	r2,0(r3)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
     db8:	00824834 	movhi	r2,2336
     dbc:	10801c04 	addi	r2,r2,112
     dc0:	10800037 	ldwio	r2,0(r2)
     dc4:	e0bffe8d 	sth	r2,-6(fp)
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     dc8:	e17ffe8b 	ldhu	r5,-6(fp)
     dcc:	01000074 	movhi	r4,1
     dd0:	21061904 	addi	r4,r4,6244
     dd4:	00045080 	call	4508 <printf>
    while (usb_ctl_val != 0x03) 
     dd8:	00001906 	br	e40 <main+0xb64>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
     ddc:	00824834 	movhi	r2,2336
     de0:	10801f04 	addi	r2,r2,124
     de4:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
     de8:	01005104 	movi	r4,324
     dec:	0003cb00 	call	3cb0 <UsbRead>
     df0:	10bfffcc 	andi	r2,r2,65535
     df4:	10840018 	cmpnei	r2,r2,4096
     df8:	1000091e 	bne	r2,zero,e20 <main+0xb44>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
     dfc:	01005104 	movi	r4,324
     e00:	000b883a 	mov	r5,zero
     e04:	0003c6c0 	call	3c6c <UsbWrite>
           
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     e08:	00824834 	movhi	r2,2336
     e0c:	10801f04 	addi	r2,r2,124
     e10:	10800037 	ldwio	r2,0(r2)
     e14:	1080040c 	andi	r2,r2,16
     e18:	1005003a 	cmpeq	r2,r2,zero
     e1c:	103ffa1e 	bne	r2,zero,e08 <main+0xb2c>
           {
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
     e20:	00c24834 	movhi	r3,2336
     e24:	18c01e04 	addi	r3,r3,120
     e28:	00814204 	movi	r2,1288
     e2c:	18800035 	stwio	r2,0(r3)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
     e30:	00824834 	movhi	r2,2336
     e34:	10801c04 	addi	r2,r2,112
     e38:	10800037 	ldwio	r2,0(r2)
     e3c:	e0bffe8d 	sth	r2,-6(fp)
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
    while (usb_ctl_val != 0x03) 
     e40:	e0bffe8b 	ldhu	r2,-6(fp)
     e44:	108000d8 	cmpnei	r2,r2,3
     e48:	103fe41e 	bne	r2,zero,ddc <main+0xb00>
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    }    
       
    printf("---------------[ENUM PROCESS]:get device descriptor-1 pass!-----------------\n");
     e4c:	01000074 	movhi	r4,1
     e50:	21062504 	addi	r4,r4,6292
     e54:	00046200 	call	4620 <puts>
    
    
    //--------------------------------get device descriptor-1---------------------------------------------//
    //get device descriptor
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
     e58:	00c24834 	movhi	r3,2336
     e5c:	18c01e04 	addi	r3,r3,120
     e60:	00814004 	movi	r2,1280
     e64:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
     e68:	00c24834 	movhi	r3,2336
     e6c:	18c01c04 	addi	r3,r3,112
     e70:	00814304 	movi	r2,1292
     e74:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
     e78:	00c24834 	movhi	r3,2336
     e7c:	18c01c04 	addi	r3,r3,112
     e80:	00800204 	movi	r2,8
     e84:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
     e88:	00c24834 	movhi	r3,2336
     e8c:	18c01c04 	addi	r3,r3,112
     e90:	0080b404 	movi	r2,720
     e94:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
     e98:	00c24834 	movhi	r3,2336
     e9c:	18c01c04 	addi	r3,r3,112
     ea0:	00800044 	movi	r2,1
     ea4:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     ea8:	00c24834 	movhi	r3,2336
     eac:	18c01c04 	addi	r3,r3,112
     eb0:	008004c4 	movi	r2,19
     eb4:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
     eb8:	00c24834 	movhi	r3,2336
     ebc:	18c01c04 	addi	r3,r3,112
     ec0:	00814504 	movi	r2,1300
     ec4:	18800035 	stwio	r2,0(r3)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
     ec8:	00c24834 	movhi	r3,2336
     ecc:	18c01c04 	addi	r3,r3,112
     ed0:	0081a004 	movi	r2,1664
     ed4:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0100);//e
     ed8:	00c24834 	movhi	r3,2336
     edc:	18c01c04 	addi	r3,r3,112
     ee0:	00804004 	movi	r2,256
     ee4:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
     ee8:	00824834 	movhi	r2,2336
     eec:	10801c04 	addi	r2,r2,112
     ef0:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0012);//2
     ef4:	00c24834 	movhi	r3,2336
     ef8:	18c01c04 	addi	r3,r3,112
     efc:	00800484 	movi	r2,18
     f00:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
     f04:	00c24834 	movhi	r3,2336
     f08:	18c01c04 	addi	r3,r3,112
     f0c:	00815104 	movi	r2,1348
     f10:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
     f14:	00c24834 	movhi	r3,2336
     f18:	18c01c04 	addi	r3,r3,112
     f1c:	00800204 	movi	r2,8
     f20:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
     f24:	00c24834 	movhi	r3,2336
     f28:	18c01c04 	addi	r3,r3,112
     f2c:	0080a404 	movi	r2,656
     f30:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
     f34:	00c24834 	movhi	r3,2336
     f38:	18c01c04 	addi	r3,r3,112
     f3c:	00801044 	movi	r2,65
     f40:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
     f44:	00c24834 	movhi	r3,2336
     f48:	18c01c04 	addi	r3,r3,112
     f4c:	008004c4 	movi	r2,19
     f50:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
     f54:	00c24834 	movhi	r3,2336
     f58:	18c01c04 	addi	r3,r3,112
     f5c:	00814804 	movi	r2,1312
     f60:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-2
    IOWR(CY7C67200_BASE,HPI_DATA,0x054c); //520
     f64:	00c24834 	movhi	r3,2336
     f68:	18c01c04 	addi	r3,r3,112
     f6c:	00815304 	movi	r2,1356
     f70:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
     f74:	00c24834 	movhi	r3,2336
     f78:	18c01c04 	addi	r3,r3,112
     f7c:	00800204 	movi	r2,8
     f80:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
     f84:	00c24834 	movhi	r3,2336
     f88:	18c01c04 	addi	r3,r3,112
     f8c:	0080a404 	movi	r2,656
     f90:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
     f94:	00c24834 	movhi	r3,2336
     f98:	18c01c04 	addi	r3,r3,112
     f9c:	00800044 	movi	r2,1
     fa0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
     fa4:	00c24834 	movhi	r3,2336
     fa8:	18c01c04 	addi	r3,r3,112
     fac:	008004c4 	movi	r2,19
     fb0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
     fb4:	00c24834 	movhi	r3,2336
     fb8:	18c01c04 	addi	r3,r3,112
     fbc:	00814b04 	movi	r2,1324
     fc0:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-3
    IOWR(CY7C67200_BASE,HPI_DATA,0x0554); //c
     fc4:	00c24834 	movhi	r3,2336
     fc8:	18c01c04 	addi	r3,r3,112
     fcc:	00815504 	movi	r2,1364
     fd0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0002);//e
     fd4:	00c24834 	movhi	r3,2336
     fd8:	18c01c04 	addi	r3,r3,112
     fdc:	00800084 	movi	r2,2
     fe0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
     fe4:	00c24834 	movhi	r3,2336
     fe8:	18c01c04 	addi	r3,r3,112
     fec:	0080a404 	movi	r2,656
     ff0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
     ff4:	00c24834 	movhi	r3,2336
     ff8:	18c01c04 	addi	r3,r3,112
     ffc:	00801044 	movi	r2,65
    1000:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    1004:	00c24834 	movhi	r3,2336
    1008:	18c01c04 	addi	r3,r3,112
    100c:	008004c4 	movi	r2,19
    1010:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
    1014:	00c24834 	movhi	r3,2336
    1018:	18c01c04 	addi	r3,r3,112
    101c:	00814e04 	movi	r2,1336
    1020:	18800035 	stwio	r2,0(r3)
    
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //538
    1024:	00824834 	movhi	r2,2336
    1028:	10801c04 	addi	r2,r2,112
    102c:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
    1030:	00824834 	movhi	r2,2336
    1034:	10801c04 	addi	r2,r2,112
    1038:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//c
    103c:	00c24834 	movhi	r3,2336
    1040:	18c01c04 	addi	r3,r3,112
    1044:	00808404 	movi	r2,528
    1048:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//e
    104c:	00c24834 	movhi	r3,2336
    1050:	18c01c04 	addi	r3,r3,112
    1054:	00801044 	movi	r2,65
    1058:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
    105c:	00c24834 	movhi	r3,2336
    1060:	18c01c04 	addi	r3,r3,112
    1064:	008004c4 	movi	r2,19
    1068:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//2
    106c:	00824834 	movhi	r2,2336
    1070:	10801c04 	addi	r2,r2,112
    1074:	10000035 	stwio	zero,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1078:	01006c04 	movi	r4,432
    107c:	01414004 	movi	r5,1280
    1080:	0003c6c0 	call	3c6c <UsbWrite>
    
    //usleep(100*1000);
    //if no message
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1084:	00008d06 	br	12bc <main+0xfe0>
    {
        //resend the get device descriptor
        //get device descriptor

    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    1088:	00c24834 	movhi	r3,2336
    108c:	18c01e04 	addi	r3,r3,120
    1090:	00814004 	movi	r2,1280
    1094:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    1098:	00c24834 	movhi	r3,2336
    109c:	18c01c04 	addi	r3,r3,112
    10a0:	00814304 	movi	r2,1292
    10a4:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    10a8:	00c24834 	movhi	r3,2336
    10ac:	18c01c04 	addi	r3,r3,112
    10b0:	00800204 	movi	r2,8
    10b4:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
    10b8:	00c24834 	movhi	r3,2336
    10bc:	18c01c04 	addi	r3,r3,112
    10c0:	0080b404 	movi	r2,720
    10c4:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    10c8:	00c24834 	movhi	r3,2336
    10cc:	18c01c04 	addi	r3,r3,112
    10d0:	00800044 	movi	r2,1
    10d4:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    10d8:	00c24834 	movhi	r3,2336
    10dc:	18c01c04 	addi	r3,r3,112
    10e0:	008004c4 	movi	r2,19
    10e4:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    10e8:	00c24834 	movhi	r3,2336
    10ec:	18c01c04 	addi	r3,r3,112
    10f0:	00814504 	movi	r2,1300
    10f4:	18800035 	stwio	r2,0(r3)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
    10f8:	00c24834 	movhi	r3,2336
    10fc:	18c01c04 	addi	r3,r3,112
    1100:	0081a004 	movi	r2,1664
    1104:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0100);//e
    1108:	00c24834 	movhi	r3,2336
    110c:	18c01c04 	addi	r3,r3,112
    1110:	00804004 	movi	r2,256
    1114:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    1118:	00824834 	movhi	r2,2336
    111c:	10801c04 	addi	r2,r2,112
    1120:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0012);//2
    1124:	00c24834 	movhi	r3,2336
    1128:	18c01c04 	addi	r3,r3,112
    112c:	00800484 	movi	r2,18
    1130:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
    1134:	00c24834 	movhi	r3,2336
    1138:	18c01c04 	addi	r3,r3,112
    113c:	00815104 	movi	r2,1348
    1140:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    1144:	00c24834 	movhi	r3,2336
    1148:	18c01c04 	addi	r3,r3,112
    114c:	00800204 	movi	r2,8
    1150:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    1154:	00c24834 	movhi	r3,2336
    1158:	18c01c04 	addi	r3,r3,112
    115c:	0080a404 	movi	r2,656
    1160:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    1164:	00c24834 	movhi	r3,2336
    1168:	18c01c04 	addi	r3,r3,112
    116c:	00801044 	movi	r2,65
    1170:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    1174:	00c24834 	movhi	r3,2336
    1178:	18c01c04 	addi	r3,r3,112
    117c:	008004c4 	movi	r2,19
    1180:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    1184:	00c24834 	movhi	r3,2336
    1188:	18c01c04 	addi	r3,r3,112
    118c:	00814804 	movi	r2,1312
    1190:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-2
    IOWR(CY7C67200_BASE,HPI_DATA,0x054c); //520
    1194:	00c24834 	movhi	r3,2336
    1198:	18c01c04 	addi	r3,r3,112
    119c:	00815304 	movi	r2,1356
    11a0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
    11a4:	00c24834 	movhi	r3,2336
    11a8:	18c01c04 	addi	r3,r3,112
    11ac:	00800204 	movi	r2,8
    11b0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    11b4:	00c24834 	movhi	r3,2336
    11b8:	18c01c04 	addi	r3,r3,112
    11bc:	0080a404 	movi	r2,656
    11c0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6
    11c4:	00c24834 	movhi	r3,2336
    11c8:	18c01c04 	addi	r3,r3,112
    11cc:	00800044 	movi	r2,1
    11d0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    11d4:	00c24834 	movhi	r3,2336
    11d8:	18c01c04 	addi	r3,r3,112
    11dc:	008004c4 	movi	r2,19
    11e0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
    11e4:	00c24834 	movhi	r3,2336
    11e8:	18c01c04 	addi	r3,r3,112
    11ec:	00814b04 	movi	r2,1324
    11f0:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-3
    IOWR(CY7C67200_BASE,HPI_DATA,0x0554); //c
    11f4:	00c24834 	movhi	r3,2336
    11f8:	18c01c04 	addi	r3,r3,112
    11fc:	00815504 	movi	r2,1364
    1200:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0002);//e
    1204:	00c24834 	movhi	r3,2336
    1208:	18c01c04 	addi	r3,r3,112
    120c:	00800084 	movi	r2,2
    1210:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
    1214:	00c24834 	movhi	r3,2336
    1218:	18c01c04 	addi	r3,r3,112
    121c:	0080a404 	movi	r2,656
    1220:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    1224:	00c24834 	movhi	r3,2336
    1228:	18c01c04 	addi	r3,r3,112
    122c:	00801044 	movi	r2,65
    1230:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    1234:	00c24834 	movhi	r3,2336
    1238:	18c01c04 	addi	r3,r3,112
    123c:	008004c4 	movi	r2,19
    1240:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
    1244:	00c24834 	movhi	r3,2336
    1248:	18c01c04 	addi	r3,r3,112
    124c:	00814e04 	movi	r2,1336
    1250:	18800035 	stwio	r2,0(r3)
    
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //538
    1254:	00824834 	movhi	r2,2336
    1258:	10801c04 	addi	r2,r2,112
    125c:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
    1260:	00824834 	movhi	r2,2336
    1264:	10801c04 	addi	r2,r2,112
    1268:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//c
    126c:	00c24834 	movhi	r3,2336
    1270:	18c01c04 	addi	r3,r3,112
    1274:	00808404 	movi	r2,528
    1278:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//e
    127c:	00c24834 	movhi	r3,2336
    1280:	18c01c04 	addi	r3,r3,112
    1284:	00801044 	movi	r2,65
    1288:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
    128c:	00c24834 	movhi	r3,2336
    1290:	18c01c04 	addi	r3,r3,112
    1294:	008004c4 	movi	r2,19
    1298:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//2
    129c:	00824834 	movhi	r2,2336
    12a0:	10801c04 	addi	r2,r2,112
    12a4:	10000035 	stwio	zero,0(r2)
    
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    12a8:	01006c04 	movi	r4,432
    12ac:	01414004 	movi	r5,1280
    12b0:	0003c6c0 	call	3c6c <UsbWrite>
    usleep(10*1000);
    12b4:	0109c404 	movi	r4,10000
    12b8:	000e4600 	call	e460 <usleep>
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    
    //usleep(100*1000);
    //if no message
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    12bc:	00824834 	movhi	r2,2336
    12c0:	10801f04 	addi	r2,r2,124
    12c4:	10800037 	ldwio	r2,0(r2)
    12c8:	1080040c 	andi	r2,r2,16
    12cc:	1005003a 	cmpeq	r2,r2,zero
    12d0:	103f6d1e 	bne	r2,zero,1088 <main+0xdac>
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    usleep(10*1000);
    }
    
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    12d4:	01005104 	movi	r4,324
    12d8:	0003cb00 	call	3cb0 <UsbRead>
    12dc:	e0bffe8d 	sth	r2,-6(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    12e0:	01005104 	movi	r4,324
    12e4:	000b883a 	mov	r5,zero
    12e8:	0003c6c0 	call	3c6c <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    12ec:	00000d06 	br	1324 <main+0x1048>
    {
       if(usb_ctl_val == 0x000)
    12f0:	e0bffe8b 	ldhu	r2,-6(fp)
    12f4:	1005003a 	cmpeq	r2,r2,zero
    12f8:	1000041e 	bne	r2,zero,130c <main+0x1030>
       {
       }
       else
       {
        printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    12fc:	e17ffe8b 	ldhu	r5,-6(fp)
    1300:	01000074 	movhi	r4,1
    1304:	2105e004 	addi	r4,r4,6016
    1308:	00045080 	call	4508 <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    130c:	01005104 	movi	r4,324
    1310:	0003cb00 	call	3cb0 <UsbRead>
    1314:	e0bffe8d 	sth	r2,-6(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
    1318:	01005104 	movi	r4,324
    131c:	000b883a 	mov	r5,zero
    1320:	0003c6c0 	call	3c6c <UsbWrite>
    }
    
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    1324:	e0bffe8b 	ldhu	r2,-6(fp)
    1328:	10840018 	cmpnei	r2,r2,4096
    132c:	103ff01e 	bne	r2,zero,12f0 <main+0x1014>
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
    1330:	00c24834 	movhi	r3,2336
    1334:	18c01e04 	addi	r3,r3,120
    1338:	00814184 	movi	r2,1286
    133c:	18800035 	stwio	r2,0(r3)
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    1340:	00824834 	movhi	r2,2336
    1344:	10801c04 	addi	r2,r2,112
    1348:	11400037 	ldwio	r5,0(r2)
    134c:	01000074 	movhi	r4,1
    1350:	21060e04 	addi	r4,r4,6200
    1354:	00045080 	call	4508 <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    1358:	00c24834 	movhi	r3,2336
    135c:	18c01e04 	addi	r3,r3,120
    1360:	00814204 	movi	r2,1288
    1364:	18800035 	stwio	r2,0(r3)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    1368:	00824834 	movhi	r2,2336
    136c:	10801c04 	addi	r2,r2,112
    1370:	10800037 	ldwio	r2,0(r2)
    1374:	e0bffe8d 	sth	r2,-6(fp)
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
    1378:	e17ffe8b 	ldhu	r5,-6(fp)
    137c:	01000074 	movhi	r4,1
    1380:	21061904 	addi	r4,r4,6244
    1384:	00045080 	call	4508 <printf>
    while (usb_ctl_val != 0x03) 
    1388:	00001906 	br	13f0 <main+0x1114>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
    138c:	00824834 	movhi	r2,2336
    1390:	10801f04 	addi	r2,r2,124
    1394:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
    1398:	01005104 	movi	r4,324
    139c:	0003cb00 	call	3cb0 <UsbRead>
    13a0:	10bfffcc 	andi	r2,r2,65535
    13a4:	10840018 	cmpnei	r2,r2,4096
    13a8:	1000091e 	bne	r2,zero,13d0 <main+0x10f4>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
    13ac:	01005104 	movi	r4,324
    13b0:	000b883a 	mov	r5,zero
    13b4:	0003c6c0 	call	3c6c <UsbWrite>
                   
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    13b8:	00824834 	movhi	r2,2336
    13bc:	10801f04 	addi	r2,r2,124
    13c0:	10800037 	ldwio	r2,0(r2)
    13c4:	1080040c 	andi	r2,r2,16
    13c8:	1005003a 	cmpeq	r2,r2,zero
    13cc:	103ffa1e 	bne	r2,zero,13b8 <main+0x10dc>
           {
            
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    13d0:	00c24834 	movhi	r3,2336
    13d4:	18c01e04 	addi	r3,r3,120
    13d8:	00814204 	movi	r2,1288
    13dc:	18800035 	stwio	r2,0(r3)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    13e0:	00824834 	movhi	r2,2336
    13e4:	10801c04 	addi	r2,r2,112
    13e8:	10800037 	ldwio	r2,0(r2)
    13ec:	e0bffe8d 	sth	r2,-6(fp)
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
    while (usb_ctl_val != 0x03) 
    13f0:	e0bffe8b 	ldhu	r2,-6(fp)
    13f4:	108000d8 	cmpnei	r2,r2,3
    13f8:	103fe41e 	bne	r2,zero,138c <main+0x10b0>
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    }    
       
    printf("------------[ENUM PROCESS]:get device descriptor-2 pass!--------------\n");
    13fc:	01000074 	movhi	r4,1
    1400:	21063904 	addi	r4,r4,6372
    1404:	00046200 	call	4620 <puts>
//    printf("\n[ENUM PROCESS]:TD rec data8 is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    //-----------------------------------get configuration descriptor -1 ----------------------------------//
    //usleep(1000);
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    1408:	00c24834 	movhi	r3,2336
    140c:	18c01e04 	addi	r3,r3,120
    1410:	00814004 	movi	r2,1280
    1414:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    1418:	00c24834 	movhi	r3,2336
    141c:	18c01c04 	addi	r3,r3,112
    1420:	00814304 	movi	r2,1292
    1424:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    1428:	00c24834 	movhi	r3,2336
    142c:	18c01c04 	addi	r3,r3,112
    1430:	00800204 	movi	r2,8
    1434:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
    1438:	00c24834 	movhi	r3,2336
    143c:	18c01c04 	addi	r3,r3,112
    1440:	0080b404 	movi	r2,720
    1444:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    1448:	00c24834 	movhi	r3,2336
    144c:	18c01c04 	addi	r3,r3,112
    1450:	00800044 	movi	r2,1
    1454:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    1458:	00c24834 	movhi	r3,2336
    145c:	18c01c04 	addi	r3,r3,112
    1460:	008004c4 	movi	r2,19
    1464:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    1468:	00c24834 	movhi	r3,2336
    146c:	18c01c04 	addi	r3,r3,112
    1470:	00814504 	movi	r2,1300
    1474:	18800035 	stwio	r2,0(r3)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
    1478:	00c24834 	movhi	r3,2336
    147c:	18c01c04 	addi	r3,r3,112
    1480:	0081a004 	movi	r2,1664
    1484:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0200);//e
    1488:	00c24834 	movhi	r3,2336
    148c:	18c01c04 	addi	r3,r3,112
    1490:	00808004 	movi	r2,512
    1494:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    1498:	00824834 	movhi	r2,2336
    149c:	10801c04 	addi	r2,r2,112
    14a0:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0009);//2
    14a4:	00c24834 	movhi	r3,2336
    14a8:	18c01c04 	addi	r3,r3,112
    14ac:	00800244 	movi	r2,9
    14b0:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
    14b4:	00c24834 	movhi	r3,2336
    14b8:	18c01c04 	addi	r3,r3,112
    14bc:	00815104 	movi	r2,1348
    14c0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    14c4:	00c24834 	movhi	r3,2336
    14c8:	18c01c04 	addi	r3,r3,112
    14cc:	00800204 	movi	r2,8
    14d0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    14d4:	00c24834 	movhi	r3,2336
    14d8:	18c01c04 	addi	r3,r3,112
    14dc:	0080a404 	movi	r2,656
    14e0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    14e4:	00c24834 	movhi	r3,2336
    14e8:	18c01c04 	addi	r3,r3,112
    14ec:	00801044 	movi	r2,65
    14f0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    14f4:	00c24834 	movhi	r3,2336
    14f8:	18c01c04 	addi	r3,r3,112
    14fc:	008004c4 	movi	r2,19
    1500:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    1504:	00c24834 	movhi	r3,2336
    1508:	18c01c04 	addi	r3,r3,112
    150c:	00814804 	movi	r2,1312
    1510:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-2
    IOWR(CY7C67200_BASE,HPI_DATA,0x054c); //520
    1514:	00c24834 	movhi	r3,2336
    1518:	18c01c04 	addi	r3,r3,112
    151c:	00815304 	movi	r2,1356
    1520:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//2
    1524:	00c24834 	movhi	r3,2336
    1528:	18c01c04 	addi	r3,r3,112
    152c:	00800044 	movi	r2,1
    1530:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    1534:	00c24834 	movhi	r3,2336
    1538:	18c01c04 	addi	r3,r3,112
    153c:	0080a404 	movi	r2,656
    1540:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
    1544:	00c24834 	movhi	r3,2336
    1548:	18c01c04 	addi	r3,r3,112
    154c:	00800044 	movi	r2,1
    1550:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    1554:	00c24834 	movhi	r3,2336
    1558:	18c01c04 	addi	r3,r3,112
    155c:	008004c4 	movi	r2,19
    1560:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
    1564:	00c24834 	movhi	r3,2336
    1568:	18c01c04 	addi	r3,r3,112
    156c:	00814b04 	movi	r2,1324
    1570:	18800035 	stwio	r2,0(r3)
    
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //52c
    1574:	00824834 	movhi	r2,2336
    1578:	10801c04 	addi	r2,r2,112
    157c:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
    1580:	00824834 	movhi	r2,2336
    1584:	10801c04 	addi	r2,r2,112
    1588:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//530
    158c:	00c24834 	movhi	r3,2336
    1590:	18c01c04 	addi	r3,r3,112
    1594:	00808404 	movi	r2,528
    1598:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    159c:	00c24834 	movhi	r3,2336
    15a0:	18c01c04 	addi	r3,r3,112
    15a4:	00801044 	movi	r2,65
    15a8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    15ac:	00c24834 	movhi	r3,2336
    15b0:	18c01c04 	addi	r3,r3,112
    15b4:	008004c4 	movi	r2,19
    15b8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
    15bc:	00824834 	movhi	r2,2336
    15c0:	10801c04 	addi	r2,r2,112
    15c4:	10000035 	stwio	zero,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    15c8:	01006c04 	movi	r4,432
    15cc:	01414004 	movi	r5,1280
    15d0:	0003c6c0 	call	3c6c <UsbWrite>
    
   //usleep(10*1000);
   //if no message
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    15d4:	00007506 	br	17ac <main+0x14d0>
    {
        //resend the get device descriptor
        //get device descriptor

    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    15d8:	00c24834 	movhi	r3,2336
    15dc:	18c01e04 	addi	r3,r3,120
    15e0:	00814004 	movi	r2,1280
    15e4:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    15e8:	00c24834 	movhi	r3,2336
    15ec:	18c01c04 	addi	r3,r3,112
    15f0:	00814304 	movi	r2,1292
    15f4:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    15f8:	00c24834 	movhi	r3,2336
    15fc:	18c01c04 	addi	r3,r3,112
    1600:	00800204 	movi	r2,8
    1604:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
    1608:	00c24834 	movhi	r3,2336
    160c:	18c01c04 	addi	r3,r3,112
    1610:	0080b404 	movi	r2,720
    1614:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    1618:	00c24834 	movhi	r3,2336
    161c:	18c01c04 	addi	r3,r3,112
    1620:	00800044 	movi	r2,1
    1624:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    1628:	00c24834 	movhi	r3,2336
    162c:	18c01c04 	addi	r3,r3,112
    1630:	008004c4 	movi	r2,19
    1634:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    1638:	00c24834 	movhi	r3,2336
    163c:	18c01c04 	addi	r3,r3,112
    1640:	00814504 	movi	r2,1300
    1644:	18800035 	stwio	r2,0(r3)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
    1648:	00c24834 	movhi	r3,2336
    164c:	18c01c04 	addi	r3,r3,112
    1650:	0081a004 	movi	r2,1664
    1654:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0200);//e
    1658:	00c24834 	movhi	r3,2336
    165c:	18c01c04 	addi	r3,r3,112
    1660:	00808004 	movi	r2,512
    1664:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    1668:	00824834 	movhi	r2,2336
    166c:	10801c04 	addi	r2,r2,112
    1670:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0009);//2
    1674:	00c24834 	movhi	r3,2336
    1678:	18c01c04 	addi	r3,r3,112
    167c:	00800244 	movi	r2,9
    1680:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
    1684:	00c24834 	movhi	r3,2336
    1688:	18c01c04 	addi	r3,r3,112
    168c:	00815104 	movi	r2,1348
    1690:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    1694:	00c24834 	movhi	r3,2336
    1698:	18c01c04 	addi	r3,r3,112
    169c:	00800204 	movi	r2,8
    16a0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    16a4:	00c24834 	movhi	r3,2336
    16a8:	18c01c04 	addi	r3,r3,112
    16ac:	0080a404 	movi	r2,656
    16b0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    16b4:	00c24834 	movhi	r3,2336
    16b8:	18c01c04 	addi	r3,r3,112
    16bc:	00801044 	movi	r2,65
    16c0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    16c4:	00c24834 	movhi	r3,2336
    16c8:	18c01c04 	addi	r3,r3,112
    16cc:	008004c4 	movi	r2,19
    16d0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    16d4:	00c24834 	movhi	r3,2336
    16d8:	18c01c04 	addi	r3,r3,112
    16dc:	00814804 	movi	r2,1312
    16e0:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-2
    IOWR(CY7C67200_BASE,HPI_DATA,0x054c); //520
    16e4:	00c24834 	movhi	r3,2336
    16e8:	18c01c04 	addi	r3,r3,112
    16ec:	00815304 	movi	r2,1356
    16f0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//2
    16f4:	00c24834 	movhi	r3,2336
    16f8:	18c01c04 	addi	r3,r3,112
    16fc:	00800044 	movi	r2,1
    1700:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    1704:	00c24834 	movhi	r3,2336
    1708:	18c01c04 	addi	r3,r3,112
    170c:	0080a404 	movi	r2,656
    1710:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
    1714:	00c24834 	movhi	r3,2336
    1718:	18c01c04 	addi	r3,r3,112
    171c:	00800044 	movi	r2,1
    1720:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    1724:	00c24834 	movhi	r3,2336
    1728:	18c01c04 	addi	r3,r3,112
    172c:	008004c4 	movi	r2,19
    1730:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
    1734:	00c24834 	movhi	r3,2336
    1738:	18c01c04 	addi	r3,r3,112
    173c:	00814b04 	movi	r2,1324
    1740:	18800035 	stwio	r2,0(r3)
    
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //52c
    1744:	00824834 	movhi	r2,2336
    1748:	10801c04 	addi	r2,r2,112
    174c:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
    1750:	00824834 	movhi	r2,2336
    1754:	10801c04 	addi	r2,r2,112
    1758:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//530
    175c:	00c24834 	movhi	r3,2336
    1760:	18c01c04 	addi	r3,r3,112
    1764:	00808404 	movi	r2,528
    1768:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    176c:	00c24834 	movhi	r3,2336
    1770:	18c01c04 	addi	r3,r3,112
    1774:	00801044 	movi	r2,65
    1778:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    177c:	00c24834 	movhi	r3,2336
    1780:	18c01c04 	addi	r3,r3,112
    1784:	008004c4 	movi	r2,19
    1788:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
    178c:	00824834 	movhi	r2,2336
    1790:	10801c04 	addi	r2,r2,112
    1794:	10000035 	stwio	zero,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1798:	01006c04 	movi	r4,432
    179c:	01414004 	movi	r5,1280
    17a0:	0003c6c0 	call	3c6c <UsbWrite>
    usleep(10*1000);
    17a4:	0109c404 	movi	r4,10000
    17a8:	000e4600 	call	e460 <usleep>
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    
   //usleep(10*1000);
   //if no message
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    17ac:	00824834 	movhi	r2,2336
    17b0:	10801f04 	addi	r2,r2,124
    17b4:	10800037 	ldwio	r2,0(r2)
    17b8:	1080040c 	andi	r2,r2,16
    17bc:	1005003a 	cmpeq	r2,r2,zero
    17c0:	103f851e 	bne	r2,zero,15d8 <main+0x12fc>
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    17c4:	01005104 	movi	r4,324
    17c8:	0003cb00 	call	3cb0 <UsbRead>
    17cc:	e0bffe8d 	sth	r2,-6(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    17d0:	01005104 	movi	r4,324
    17d4:	000b883a 	mov	r5,zero
    17d8:	0003c6c0 	call	3c6c <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    17dc:	00000d06 	br	1814 <main+0x1538>
    {
       if(usb_ctl_val == 0x000)
    17e0:	e0bffe8b 	ldhu	r2,-6(fp)
    17e4:	1005003a 	cmpeq	r2,r2,zero
    17e8:	1000041e 	bne	r2,zero,17fc <main+0x1520>
       {
       }
       else
       {
        printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    17ec:	e17ffe8b 	ldhu	r5,-6(fp)
    17f0:	01000074 	movhi	r4,1
    17f4:	2105e004 	addi	r4,r4,6016
    17f8:	00045080 	call	4508 <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    17fc:	01005104 	movi	r4,324
    1800:	0003cb00 	call	3cb0 <UsbRead>
    1804:	e0bffe8d 	sth	r2,-6(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
    1808:	01005104 	movi	r4,324
    180c:	000b883a 	mov	r5,zero
    1810:	0003c6c0 	call	3c6c <UsbWrite>
    usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    1814:	e0bffe8b 	ldhu	r2,-6(fp)
    1818:	10840018 	cmpnei	r2,r2,4096
    181c:	103ff01e 	bne	r2,zero,17e0 <main+0x1504>
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
    1820:	00c24834 	movhi	r3,2336
    1824:	18c01e04 	addi	r3,r3,120
    1828:	00814184 	movi	r2,1286
    182c:	18800035 	stwio	r2,0(r3)
    printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    1830:	00824834 	movhi	r2,2336
    1834:	10801c04 	addi	r2,r2,112
    1838:	11400037 	ldwio	r5,0(r2)
    183c:	01000074 	movhi	r4,1
    1840:	21064b04 	addi	r4,r4,6444
    1844:	00045080 	call	4508 <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    1848:	00c24834 	movhi	r3,2336
    184c:	18c01e04 	addi	r3,r3,120
    1850:	00814204 	movi	r2,1288
    1854:	18800035 	stwio	r2,0(r3)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    1858:	00824834 	movhi	r2,2336
    185c:	10801c04 	addi	r2,r2,112
    1860:	10800037 	ldwio	r2,0(r2)
    1864:	e0bffe8d 	sth	r2,-6(fp)
    printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
    1868:	e17ffe8b 	ldhu	r5,-6(fp)
    186c:	01000074 	movhi	r4,1
    1870:	21065604 	addi	r4,r4,6488
    1874:	00045080 	call	4508 <printf>
    while (usb_ctl_val != 0x03) 
    1878:	00001906 	br	18e0 <main+0x1604>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
    187c:	00824834 	movhi	r2,2336
    1880:	10801f04 	addi	r2,r2,124
    1884:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
    1888:	01005104 	movi	r4,324
    188c:	0003cb00 	call	3cb0 <UsbRead>
    1890:	10bfffcc 	andi	r2,r2,65535
    1894:	10840018 	cmpnei	r2,r2,4096
    1898:	1000091e 	bne	r2,zero,18c0 <main+0x15e4>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
    189c:	01005104 	movi	r4,324
    18a0:	000b883a 	mov	r5,zero
    18a4:	0003c6c0 	call	3c6c <UsbWrite>
                   
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    18a8:	00824834 	movhi	r2,2336
    18ac:	10801f04 	addi	r2,r2,124
    18b0:	10800037 	ldwio	r2,0(r2)
    18b4:	1080040c 	andi	r2,r2,16
    18b8:	1005003a 	cmpeq	r2,r2,zero
    18bc:	103ffa1e 	bne	r2,zero,18a8 <main+0x15cc>
           {
            
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    18c0:	00c24834 	movhi	r3,2336
    18c4:	18c01e04 	addi	r3,r3,120
    18c8:	00814204 	movi	r2,1288
    18cc:	18800035 	stwio	r2,0(r3)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    18d0:	00824834 	movhi	r2,2336
    18d4:	10801c04 	addi	r2,r2,112
    18d8:	10800037 	ldwio	r2,0(r2)
    18dc:	e0bffe8d 	sth	r2,-6(fp)
    printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
    while (usb_ctl_val != 0x03) 
    18e0:	e0bffe8b 	ldhu	r2,-6(fp)
    18e4:	108000d8 	cmpnei	r2,r2,3
    18e8:	103fe41e 	bne	r2,zero,187c <main+0x15a0>
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    }    
    printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
    18ec:	01000074 	movhi	r4,1
    18f0:	21066204 	addi	r4,r4,6536
    18f4:	00046200 	call	4620 <puts>
    
    //-----------------------------------get configuration descriptor-2------------------------------------//
    //get device descriptor
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    18f8:	00c24834 	movhi	r3,2336
    18fc:	18c01e04 	addi	r3,r3,120
    1900:	00814004 	movi	r2,1280
    1904:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    1908:	00c24834 	movhi	r3,2336
    190c:	18c01c04 	addi	r3,r3,112
    1910:	00814304 	movi	r2,1292
    1914:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    1918:	00c24834 	movhi	r3,2336
    191c:	18c01c04 	addi	r3,r3,112
    1920:	00800204 	movi	r2,8
    1924:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
    1928:	00c24834 	movhi	r3,2336
    192c:	18c01c04 	addi	r3,r3,112
    1930:	0080b404 	movi	r2,720
    1934:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    1938:	00c24834 	movhi	r3,2336
    193c:	18c01c04 	addi	r3,r3,112
    1940:	00800044 	movi	r2,1
    1944:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    1948:	00c24834 	movhi	r3,2336
    194c:	18c01c04 	addi	r3,r3,112
    1950:	008004c4 	movi	r2,19
    1954:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    1958:	00c24834 	movhi	r3,2336
    195c:	18c01c04 	addi	r3,r3,112
    1960:	00814504 	movi	r2,1300
    1964:	18800035 	stwio	r2,0(r3)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
    1968:	00c24834 	movhi	r3,2336
    196c:	18c01c04 	addi	r3,r3,112
    1970:	0081a004 	movi	r2,1664
    1974:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0200);//e //config 
    1978:	00c24834 	movhi	r3,2336
    197c:	18c01c04 	addi	r3,r3,112
    1980:	00808004 	movi	r2,512
    1984:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    1988:	00824834 	movhi	r2,2336
    198c:	10801c04 	addi	r2,r2,112
    1990:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x00FF);//2
    1994:	00c24834 	movhi	r3,2336
    1998:	18c01c04 	addi	r3,r3,112
    199c:	00803fc4 	movi	r2,255
    19a0:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x055c); //514
    19a4:	00c24834 	movhi	r3,2336
    19a8:	18c01c04 	addi	r3,r3,112
    19ac:	00815704 	movi	r2,1372
    19b0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    19b4:	00c24834 	movhi	r3,2336
    19b8:	18c01c04 	addi	r3,r3,112
    19bc:	00800204 	movi	r2,8
    19c0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    19c4:	00c24834 	movhi	r3,2336
    19c8:	18c01c04 	addi	r3,r3,112
    19cc:	0080a404 	movi	r2,656
    19d0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    19d4:	00c24834 	movhi	r3,2336
    19d8:	18c01c04 	addi	r3,r3,112
    19dc:	00801044 	movi	r2,65
    19e0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    19e4:	00c24834 	movhi	r3,2336
    19e8:	18c01c04 	addi	r3,r3,112
    19ec:	008004c4 	movi	r2,19
    19f0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    19f4:	00c24834 	movhi	r3,2336
    19f8:	18c01c04 	addi	r3,r3,112
    19fc:	00814804 	movi	r2,1312
    1a00:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-2
    IOWR(CY7C67200_BASE,HPI_DATA,0x0564); //520
    1a04:	00c24834 	movhi	r3,2336
    1a08:	18c01c04 	addi	r3,r3,112
    1a0c:	00815904 	movi	r2,1380
    1a10:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
    1a14:	00c24834 	movhi	r3,2336
    1a18:	18c01c04 	addi	r3,r3,112
    1a1c:	00800204 	movi	r2,8
    1a20:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    1a24:	00c24834 	movhi	r3,2336
    1a28:	18c01c04 	addi	r3,r3,112
    1a2c:	0080a404 	movi	r2,656
    1a30:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
    1a34:	00c24834 	movhi	r3,2336
    1a38:	18c01c04 	addi	r3,r3,112
    1a3c:	00800044 	movi	r2,1
    1a40:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    1a44:	00c24834 	movhi	r3,2336
    1a48:	18c01c04 	addi	r3,r3,112
    1a4c:	008004c4 	movi	r2,19
    1a50:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
    1a54:	00c24834 	movhi	r3,2336
    1a58:	18c01c04 	addi	r3,r3,112
    1a5c:	00814b04 	movi	r2,1324
    1a60:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-3
    IOWR(CY7C67200_BASE,HPI_DATA,0x056c); //52c
    1a64:	00c24834 	movhi	r3,2336
    1a68:	18c01c04 	addi	r3,r3,112
    1a6c:	00815b04 	movi	r2,1388
    1a70:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
    1a74:	00c24834 	movhi	r3,2336
    1a78:	18c01c04 	addi	r3,r3,112
    1a7c:	00800204 	movi	r2,8
    1a80:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
    1a84:	00c24834 	movhi	r3,2336
    1a88:	18c01c04 	addi	r3,r3,112
    1a8c:	0080a404 	movi	r2,656
    1a90:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    1a94:	00c24834 	movhi	r3,2336
    1a98:	18c01c04 	addi	r3,r3,112
    1a9c:	00801044 	movi	r2,65
    1aa0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    1aa4:	00c24834 	movhi	r3,2336
    1aa8:	18c01c04 	addi	r3,r3,112
    1aac:	008004c4 	movi	r2,19
    1ab0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
    1ab4:	00c24834 	movhi	r3,2336
    1ab8:	18c01c04 	addi	r3,r3,112
    1abc:	00814e04 	movi	r2,1336
    1ac0:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-4
    IOWR(CY7C67200_BASE,HPI_DATA,0x0574); //538
    1ac4:	00c24834 	movhi	r3,2336
    1ac8:	18c01c04 	addi	r3,r3,112
    1acc:	00815d04 	movi	r2,1396
    1ad0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//a
    1ad4:	00c24834 	movhi	r3,2336
    1ad8:	18c01c04 	addi	r3,r3,112
    1adc:	00800204 	movi	r2,8
    1ae0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
    1ae4:	00c24834 	movhi	r3,2336
    1ae8:	18c01c04 	addi	r3,r3,112
    1aec:	0080a404 	movi	r2,656
    1af0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data0
    1af4:	00c24834 	movhi	r3,2336
    1af8:	18c01c04 	addi	r3,r3,112
    1afc:	00800044 	movi	r2,1
    1b00:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
    1b04:	00c24834 	movhi	r3,2336
    1b08:	18c01c04 	addi	r3,r3,112
    1b0c:	008004c4 	movi	r2,19
    1b10:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544);//2
    1b14:	00c24834 	movhi	r3,2336
    1b18:	18c01c04 	addi	r3,r3,112
    1b1c:	00815104 	movi	r2,1348
    1b20:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-5
    IOWR(CY7C67200_BASE,HPI_DATA,0x057c); //544
    1b24:	00c24834 	movhi	r3,2336
    1b28:	18c01c04 	addi	r3,r3,112
    1b2c:	00815f04 	movi	r2,1404
    1b30:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0002);//6
    1b34:	00c24834 	movhi	r3,2336
    1b38:	18c01c04 	addi	r3,r3,112
    1b3c:	00800084 	movi	r2,2
    1b40:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    1b44:	00c24834 	movhi	r3,2336
    1b48:	18c01c04 	addi	r3,r3,112
    1b4c:	0080a404 	movi	r2,656
    1b50:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a //data1
    1b54:	00c24834 	movhi	r3,2336
    1b58:	18c01c04 	addi	r3,r3,112
    1b5c:	00801044 	movi	r2,65
    1b60:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    1b64:	00c24834 	movhi	r3,2336
    1b68:	18c01c04 	addi	r3,r3,112
    1b6c:	008004c4 	movi	r2,19
    1b70:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0550);//e
    1b74:	00c24834 	movhi	r3,2336
    1b78:	18c01c04 	addi	r3,r3,112
    1b7c:	00815404 	movi	r2,1360
    1b80:	18800035 	stwio	r2,0(r3)
    
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //550
    1b84:	00824834 	movhi	r2,2336
    1b88:	10801c04 	addi	r2,r2,112
    1b8c:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//2
    1b90:	00824834 	movhi	r2,2336
    1b94:	10801c04 	addi	r2,r2,112
    1b98:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//4
    1b9c:	00c24834 	movhi	r3,2336
    1ba0:	18c01c04 	addi	r3,r3,112
    1ba4:	00808404 	movi	r2,528
    1ba8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6
    1bac:	00c24834 	movhi	r3,2336
    1bb0:	18c01c04 	addi	r3,r3,112
    1bb4:	00801044 	movi	r2,65
    1bb8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    1bbc:	00c24834 	movhi	r3,2336
    1bc0:	18c01c04 	addi	r3,r3,112
    1bc4:	008004c4 	movi	r2,19
    1bc8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
    1bcc:	00824834 	movhi	r2,2336
    1bd0:	10801c04 	addi	r2,r2,112
    1bd4:	10000035 	stwio	zero,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1bd8:	01006c04 	movi	r4,432
    1bdc:	01414004 	movi	r5,1280
    1be0:	0003c6c0 	call	3c6c <UsbWrite>
    
   usleep(100*1000);
    1be4:	010000b4 	movhi	r4,2
    1be8:	2121a804 	addi	r4,r4,-31072
    1bec:	000e4600 	call	e460 <usleep>
   //if no message
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1bf0:	0000bd06 	br	1ee8 <main+0x1c0c>
    {
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    1bf4:	00c24834 	movhi	r3,2336
    1bf8:	18c01e04 	addi	r3,r3,120
    1bfc:	00814004 	movi	r2,1280
    1c00:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    1c04:	00c24834 	movhi	r3,2336
    1c08:	18c01c04 	addi	r3,r3,112
    1c0c:	00814304 	movi	r2,1292
    1c10:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    1c14:	00c24834 	movhi	r3,2336
    1c18:	18c01c04 	addi	r3,r3,112
    1c1c:	00800204 	movi	r2,8
    1c20:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
    1c24:	00c24834 	movhi	r3,2336
    1c28:	18c01c04 	addi	r3,r3,112
    1c2c:	0080b404 	movi	r2,720
    1c30:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    1c34:	00c24834 	movhi	r3,2336
    1c38:	18c01c04 	addi	r3,r3,112
    1c3c:	00800044 	movi	r2,1
    1c40:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    1c44:	00c24834 	movhi	r3,2336
    1c48:	18c01c04 	addi	r3,r3,112
    1c4c:	008004c4 	movi	r2,19
    1c50:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    1c54:	00c24834 	movhi	r3,2336
    1c58:	18c01c04 	addi	r3,r3,112
    1c5c:	00814504 	movi	r2,1300
    1c60:	18800035 	stwio	r2,0(r3)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
    1c64:	00c24834 	movhi	r3,2336
    1c68:	18c01c04 	addi	r3,r3,112
    1c6c:	0081a004 	movi	r2,1664
    1c70:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0200);//e //config 
    1c74:	00c24834 	movhi	r3,2336
    1c78:	18c01c04 	addi	r3,r3,112
    1c7c:	00808004 	movi	r2,512
    1c80:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    1c84:	00824834 	movhi	r2,2336
    1c88:	10801c04 	addi	r2,r2,112
    1c8c:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x00FF);//2
    1c90:	00c24834 	movhi	r3,2336
    1c94:	18c01c04 	addi	r3,r3,112
    1c98:	00803fc4 	movi	r2,255
    1c9c:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x055c); //514
    1ca0:	00c24834 	movhi	r3,2336
    1ca4:	18c01c04 	addi	r3,r3,112
    1ca8:	00815704 	movi	r2,1372
    1cac:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    1cb0:	00c24834 	movhi	r3,2336
    1cb4:	18c01c04 	addi	r3,r3,112
    1cb8:	00800204 	movi	r2,8
    1cbc:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    1cc0:	00c24834 	movhi	r3,2336
    1cc4:	18c01c04 	addi	r3,r3,112
    1cc8:	0080a404 	movi	r2,656
    1ccc:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    1cd0:	00c24834 	movhi	r3,2336
    1cd4:	18c01c04 	addi	r3,r3,112
    1cd8:	00801044 	movi	r2,65
    1cdc:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    1ce0:	00c24834 	movhi	r3,2336
    1ce4:	18c01c04 	addi	r3,r3,112
    1ce8:	008004c4 	movi	r2,19
    1cec:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    1cf0:	00c24834 	movhi	r3,2336
    1cf4:	18c01c04 	addi	r3,r3,112
    1cf8:	00814804 	movi	r2,1312
    1cfc:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-2
    IOWR(CY7C67200_BASE,HPI_DATA,0x0564); //520
    1d00:	00c24834 	movhi	r3,2336
    1d04:	18c01c04 	addi	r3,r3,112
    1d08:	00815904 	movi	r2,1380
    1d0c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
    1d10:	00c24834 	movhi	r3,2336
    1d14:	18c01c04 	addi	r3,r3,112
    1d18:	00800204 	movi	r2,8
    1d1c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    1d20:	00c24834 	movhi	r3,2336
    1d24:	18c01c04 	addi	r3,r3,112
    1d28:	0080a404 	movi	r2,656
    1d2c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
    1d30:	00c24834 	movhi	r3,2336
    1d34:	18c01c04 	addi	r3,r3,112
    1d38:	00800044 	movi	r2,1
    1d3c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    1d40:	00c24834 	movhi	r3,2336
    1d44:	18c01c04 	addi	r3,r3,112
    1d48:	008004c4 	movi	r2,19
    1d4c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
    1d50:	00c24834 	movhi	r3,2336
    1d54:	18c01c04 	addi	r3,r3,112
    1d58:	00814b04 	movi	r2,1324
    1d5c:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-3
    IOWR(CY7C67200_BASE,HPI_DATA,0x056c); //52c
    1d60:	00c24834 	movhi	r3,2336
    1d64:	18c01c04 	addi	r3,r3,112
    1d68:	00815b04 	movi	r2,1388
    1d6c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
    1d70:	00c24834 	movhi	r3,2336
    1d74:	18c01c04 	addi	r3,r3,112
    1d78:	00800204 	movi	r2,8
    1d7c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
    1d80:	00c24834 	movhi	r3,2336
    1d84:	18c01c04 	addi	r3,r3,112
    1d88:	0080a404 	movi	r2,656
    1d8c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    1d90:	00c24834 	movhi	r3,2336
    1d94:	18c01c04 	addi	r3,r3,112
    1d98:	00801044 	movi	r2,65
    1d9c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    1da0:	00c24834 	movhi	r3,2336
    1da4:	18c01c04 	addi	r3,r3,112
    1da8:	008004c4 	movi	r2,19
    1dac:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
    1db0:	00c24834 	movhi	r3,2336
    1db4:	18c01c04 	addi	r3,r3,112
    1db8:	00814e04 	movi	r2,1336
    1dbc:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-4
    IOWR(CY7C67200_BASE,HPI_DATA,0x0574); //538
    1dc0:	00c24834 	movhi	r3,2336
    1dc4:	18c01c04 	addi	r3,r3,112
    1dc8:	00815d04 	movi	r2,1396
    1dcc:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//a
    1dd0:	00c24834 	movhi	r3,2336
    1dd4:	18c01c04 	addi	r3,r3,112
    1dd8:	00800204 	movi	r2,8
    1ddc:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
    1de0:	00c24834 	movhi	r3,2336
    1de4:	18c01c04 	addi	r3,r3,112
    1de8:	0080a404 	movi	r2,656
    1dec:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data0
    1df0:	00c24834 	movhi	r3,2336
    1df4:	18c01c04 	addi	r3,r3,112
    1df8:	00800044 	movi	r2,1
    1dfc:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
    1e00:	00c24834 	movhi	r3,2336
    1e04:	18c01c04 	addi	r3,r3,112
    1e08:	008004c4 	movi	r2,19
    1e0c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544);//2
    1e10:	00c24834 	movhi	r3,2336
    1e14:	18c01c04 	addi	r3,r3,112
    1e18:	00815104 	movi	r2,1348
    1e1c:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-5
    IOWR(CY7C67200_BASE,HPI_DATA,0x057c); //544
    1e20:	00c24834 	movhi	r3,2336
    1e24:	18c01c04 	addi	r3,r3,112
    1e28:	00815f04 	movi	r2,1404
    1e2c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0002);//6
    1e30:	00c24834 	movhi	r3,2336
    1e34:	18c01c04 	addi	r3,r3,112
    1e38:	00800084 	movi	r2,2
    1e3c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    1e40:	00c24834 	movhi	r3,2336
    1e44:	18c01c04 	addi	r3,r3,112
    1e48:	0080a404 	movi	r2,656
    1e4c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a //data1
    1e50:	00c24834 	movhi	r3,2336
    1e54:	18c01c04 	addi	r3,r3,112
    1e58:	00801044 	movi	r2,65
    1e5c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    1e60:	00c24834 	movhi	r3,2336
    1e64:	18c01c04 	addi	r3,r3,112
    1e68:	008004c4 	movi	r2,19
    1e6c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0550);//e
    1e70:	00c24834 	movhi	r3,2336
    1e74:	18c01c04 	addi	r3,r3,112
    1e78:	00815404 	movi	r2,1360
    1e7c:	18800035 	stwio	r2,0(r3)
    
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //550
    1e80:	00824834 	movhi	r2,2336
    1e84:	10801c04 	addi	r2,r2,112
    1e88:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//2
    1e8c:	00824834 	movhi	r2,2336
    1e90:	10801c04 	addi	r2,r2,112
    1e94:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//4
    1e98:	00c24834 	movhi	r3,2336
    1e9c:	18c01c04 	addi	r3,r3,112
    1ea0:	00808404 	movi	r2,528
    1ea4:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6
    1ea8:	00c24834 	movhi	r3,2336
    1eac:	18c01c04 	addi	r3,r3,112
    1eb0:	00801044 	movi	r2,65
    1eb4:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    1eb8:	00c24834 	movhi	r3,2336
    1ebc:	18c01c04 	addi	r3,r3,112
    1ec0:	008004c4 	movi	r2,19
    1ec4:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
    1ec8:	00824834 	movhi	r2,2336
    1ecc:	10801c04 	addi	r2,r2,112
    1ed0:	10000035 	stwio	zero,0(r2)
          
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1ed4:	01006c04 	movi	r4,432
    1ed8:	01414004 	movi	r5,1280
    1edc:	0003c6c0 	call	3c6c <UsbWrite>
    usleep(10*1000);
    1ee0:	0109c404 	movi	r4,10000
    1ee4:	000e4600 	call	e460 <usleep>
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    
   usleep(100*1000);
   //if no message
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1ee8:	00824834 	movhi	r2,2336
    1eec:	10801f04 	addi	r2,r2,124
    1ef0:	10800037 	ldwio	r2,0(r2)
    1ef4:	1080040c 	andi	r2,r2,16
    1ef8:	1005003a 	cmpeq	r2,r2,zero
    1efc:	103f3d1e 	bne	r2,zero,1bf4 <main+0x1918>
          
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    usleep(10*1000);
    }
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    1f00:	01005104 	movi	r4,324
    1f04:	0003cb00 	call	3cb0 <UsbRead>
    1f08:	e0bffe8d 	sth	r2,-6(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    1f0c:	01005104 	movi	r4,324
    1f10:	000b883a 	mov	r5,zero
    1f14:	0003c6c0 	call	3c6c <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    1f18:	00000d06 	br	1f50 <main+0x1c74>
    {
       if(usb_ctl_val == 0x000)
    1f1c:	e0bffe8b 	ldhu	r2,-6(fp)
    1f20:	1005003a 	cmpeq	r2,r2,zero
    1f24:	1000041e 	bne	r2,zero,1f38 <main+0x1c5c>
       {
       }
       else
       {
        printf("[SIE MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    1f28:	e17ffe8b 	ldhu	r5,-6(fp)
    1f2c:	01000074 	movhi	r4,1
    1f30:	21067504 	addi	r4,r4,6612
    1f34:	00045080 	call	4508 <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    1f38:	01005104 	movi	r4,324
    1f3c:	0003cb00 	call	3cb0 <UsbRead>
    1f40:	e0bffe8d 	sth	r2,-6(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
    1f44:	01005104 	movi	r4,324
    1f48:	000b883a 	mov	r5,zero
    1f4c:	0003c6c0 	call	3c6c <UsbWrite>
    usleep(10*1000);
    }
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    1f50:	e0bffe8b 	ldhu	r2,-6(fp)
    1f54:	10840018 	cmpnei	r2,r2,4096
    1f58:	103ff01e 	bne	r2,zero,1f1c <main+0x1c40>
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
    1f5c:	00c24834 	movhi	r3,2336
    1f60:	18c01e04 	addi	r3,r3,120
    1f64:	00814184 	movi	r2,1286
    1f68:	18800035 	stwio	r2,0(r3)
    printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    1f6c:	00824834 	movhi	r2,2336
    1f70:	10801c04 	addi	r2,r2,112
    1f74:	11400037 	ldwio	r5,0(r2)
    1f78:	01000074 	movhi	r4,1
    1f7c:	21067d04 	addi	r4,r4,6644
    1f80:	00045080 	call	4508 <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    1f84:	00c24834 	movhi	r3,2336
    1f88:	18c01e04 	addi	r3,r3,120
    1f8c:	00814204 	movi	r2,1288
    1f90:	18800035 	stwio	r2,0(r3)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    1f94:	00824834 	movhi	r2,2336
    1f98:	10801c04 	addi	r2,r2,112
    1f9c:	10800037 	ldwio	r2,0(r2)
    1fa0:	e0bffe8d 	sth	r2,-6(fp)
    printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
    1fa4:	e17ffe8b 	ldhu	r5,-6(fp)
    1fa8:	01000074 	movhi	r4,1
    1fac:	21068804 	addi	r4,r4,6688
    1fb0:	00045080 	call	4508 <printf>
    while (usb_ctl_val != 0x03) 
    1fb4:	00001906 	br	201c <main+0x1d40>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
    1fb8:	00824834 	movhi	r2,2336
    1fbc:	10801f04 	addi	r2,r2,124
    1fc0:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
    1fc4:	01005104 	movi	r4,324
    1fc8:	0003cb00 	call	3cb0 <UsbRead>
    1fcc:	10bfffcc 	andi	r2,r2,65535
    1fd0:	10840018 	cmpnei	r2,r2,4096
    1fd4:	1000091e 	bne	r2,zero,1ffc <main+0x1d20>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
    1fd8:	01005104 	movi	r4,324
    1fdc:	000b883a 	mov	r5,zero
    1fe0:	0003c6c0 	call	3c6c <UsbWrite>
                   
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1fe4:	00824834 	movhi	r2,2336
    1fe8:	10801f04 	addi	r2,r2,124
    1fec:	10800037 	ldwio	r2,0(r2)
    1ff0:	1080040c 	andi	r2,r2,16
    1ff4:	1005003a 	cmpeq	r2,r2,zero
    1ff8:	103ffa1e 	bne	r2,zero,1fe4 <main+0x1d08>
           {
            
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    1ffc:	00c24834 	movhi	r3,2336
    2000:	18c01e04 	addi	r3,r3,120
    2004:	00814204 	movi	r2,1288
    2008:	18800035 	stwio	r2,0(r3)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    200c:	00824834 	movhi	r2,2336
    2010:	10801c04 	addi	r2,r2,112
    2014:	10800037 	ldwio	r2,0(r2)
    2018:	e0bffe8d 	sth	r2,-6(fp)
    printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
    while (usb_ctl_val != 0x03) 
    201c:	e0bffe8b 	ldhu	r2,-6(fp)
    2020:	108000d8 	cmpnei	r2,r2,3
    2024:	103fe41e 	bne	r2,zero,1fb8 <main+0x1cdc>
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    }    
       
       
    printf("-----------[ENUM PROCESS]:get configuration descriptor-2 pass!------------\n");
    2028:	01000074 	movhi	r4,1
    202c:	21069404 	addi	r4,r4,6736
    2030:	00046200 	call	4620 <puts>
    

    IOWR(CY7C67200_BASE,HPI_ADDR,0x056c); //the start address
    2034:	00c24834 	movhi	r3,2336
    2038:	18c01e04 	addi	r3,r3,120
    203c:	00815b04 	movi	r2,1388
    2040:	18800035 	stwio	r2,0(r3)

    if(  ( IORD(CY7C67200_BASE,HPI_DATA) & 0x0ff)  ==0x02)
    2044:	00824834 	movhi	r2,2336
    2048:	10801c04 	addi	r2,r2,112
    204c:	10800037 	ldwio	r2,0(r2)
    2050:	10803fcc 	andi	r2,r2,255
    2054:	10800098 	cmpnei	r2,r2,2
    2058:	1000041e 	bne	r2,zero,206c <main+0x1d90>
    {
         printf("\n[INFO]:check TD rec data7 \n[INFO]:Mouse Detected!!!\n\n");
    205c:	01000074 	movhi	r4,1
    2060:	2106a704 	addi	r4,r4,6812
    2064:	00046200 	call	4620 <puts>
    2068:	00000306 	br	2078 <main+0x1d9c>
    }
    else
    {
        printf("\n[INFO]:Mouse Not Detected!!! \n\n");
    206c:	01000074 	movhi	r4,1
    2070:	2106b504 	addi	r4,r4,6868
    2074:	00046200 	call	4620 <puts>
    }
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x057a); //the start address   
    2078:	00c24834 	movhi	r3,2336
    207c:	18c01e04 	addi	r3,r3,120
    2080:	00815e84 	movi	r2,1402
    2084:	18800035 	stwio	r2,0(r3)
      
    data_size = (IORD(CY7C67200_BASE,HPI_DATA)>>8)&0x0ff; 
    2088:	00824834 	movhi	r2,2336
    208c:	10801c04 	addi	r2,r2,112
    2090:	10800037 	ldwio	r2,0(r2)
    2094:	1005d23a 	srai	r2,r2,8
    2098:	1007883a 	mov	r3,r2
    209c:	00bfffc4 	movi	r2,-1
    20a0:	1884703a 	and	r2,r3,r2
    20a4:	e0bffa05 	stb	r2,-24(fp)
    printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
    20a8:	e17ffa03 	ldbu	r5,-24(fp)
    20ac:	01000074 	movhi	r4,1
    20b0:	2106bd04 	addi	r4,r4,6900
    20b4:	00045080 	call	4508 <printf>
    
    //------------------------------------set configuration -----------------------------------------//
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    20b8:	00c24834 	movhi	r3,2336
    20bc:	18c01e04 	addi	r3,r3,120
    20c0:	00814004 	movi	r2,1280
    20c4:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    20c8:	00c24834 	movhi	r3,2336
    20cc:	18c01c04 	addi	r3,r3,112
    20d0:	00814304 	movi	r2,1292
    20d4:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    20d8:	00c24834 	movhi	r3,2336
    20dc:	18c01c04 	addi	r3,r3,112
    20e0:	00800204 	movi	r2,8
    20e4:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //port address
    20e8:	00c24834 	movhi	r3,2336
    20ec:	18c01c04 	addi	r3,r3,112
    20f0:	0080b404 	movi	r2,720
    20f4:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    20f8:	00c24834 	movhi	r3,2336
    20fc:	18c01c04 	addi	r3,r3,112
    2100:	00800044 	movi	r2,1
    2104:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    2108:	00c24834 	movhi	r3,2336
    210c:	18c01c04 	addi	r3,r3,112
    2110:	008004c4 	movi	r2,19
    2114:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    2118:	00c24834 	movhi	r3,2336
    211c:	18c01c04 	addi	r3,r3,112
    2120:	00814504 	movi	r2,1300
    2124:	18800035 	stwio	r2,0(r3)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0900);
    2128:	00c24834 	movhi	r3,2336
    212c:	18c01c04 	addi	r3,r3,112
    2130:	00824004 	movi	r2,2304
    2134:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//device address   
    2138:	00c24834 	movhi	r3,2336
    213c:	18c01c04 	addi	r3,r3,112
    2140:	00800044 	movi	r2,1
    2144:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    2148:	00824834 	movhi	r2,2336
    214c:	10801c04 	addi	r2,r2,112
    2150:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    2154:	00824834 	movhi	r2,2336
    2158:	10801c04 	addi	r2,r2,112
    215c:	10000035 	stwio	zero,0(r2)
    //in packet
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
    2160:	00824834 	movhi	r2,2336
    2164:	10801c04 	addi	r2,r2,112
    2168:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
    216c:	00824834 	movhi	r2,2336
    2170:	10801c04 	addi	r2,r2,112
    2174:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//device address
    2178:	00c24834 	movhi	r3,2336
    217c:	18c01c04 	addi	r3,r3,112
    2180:	0080a404 	movi	r2,656
    2184:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041); //data 1
    2188:	00c24834 	movhi	r3,2336
    218c:	18c01c04 	addi	r3,r3,112
    2190:	00801044 	movi	r2,65
    2194:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    2198:	00c24834 	movhi	r3,2336
    219c:	18c01c04 	addi	r3,r3,112
    21a0:	008004c4 	movi	r2,19
    21a4:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    21a8:	00824834 	movhi	r2,2336
    21ac:	10801c04 	addi	r2,r2,112
    21b0:	10000035 	stwio	zero,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    21b4:	01006c04 	movi	r4,432
    21b8:	01414004 	movi	r5,1280
    21bc:	0003c6c0 	call	3c6c <UsbWrite>
    //usleep(10*1000);
   
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    21c0:	00004406 	br	22d4 <main+0x1ff8>
    {
        IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    21c4:	00c24834 	movhi	r3,2336
    21c8:	18c01e04 	addi	r3,r3,120
    21cc:	00814004 	movi	r2,1280
    21d0:	18800035 	stwio	r2,0(r3)
        IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    21d4:	00c24834 	movhi	r3,2336
    21d8:	18c01c04 	addi	r3,r3,112
    21dc:	00814304 	movi	r2,1292
    21e0:	18800035 	stwio	r2,0(r3)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    21e4:	00c24834 	movhi	r3,2336
    21e8:	18c01c04 	addi	r3,r3,112
    21ec:	00800204 	movi	r2,8
    21f0:	18800035 	stwio	r2,0(r3)
        IOWR(CY7C67200_BASE,HPI_DATA,0x02D0);
    21f4:	00c24834 	movhi	r3,2336
    21f8:	18c01c04 	addi	r3,r3,112
    21fc:	0080b404 	movi	r2,720
    2200:	18800035 	stwio	r2,0(r3)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    2204:	00c24834 	movhi	r3,2336
    2208:	18c01c04 	addi	r3,r3,112
    220c:	00800044 	movi	r2,1
    2210:	18800035 	stwio	r2,0(r3)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    2214:	00c24834 	movhi	r3,2336
    2218:	18c01c04 	addi	r3,r3,112
    221c:	008004c4 	movi	r2,19
    2220:	18800035 	stwio	r2,0(r3)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    2224:	00c24834 	movhi	r3,2336
    2228:	18c01c04 	addi	r3,r3,112
    222c:	00814504 	movi	r2,1300
    2230:	18800035 	stwio	r2,0(r3)
    
        //td content 4 bytes
        IOWR(CY7C67200_BASE,HPI_DATA,0x0900);
    2234:	00c24834 	movhi	r3,2336
    2238:	18c01c04 	addi	r3,r3,112
    223c:	00824004 	movi	r2,2304
    2240:	18800035 	stwio	r2,0(r3)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//device address   
    2244:	00c24834 	movhi	r3,2336
    2248:	18c01c04 	addi	r3,r3,112
    224c:	00800044 	movi	r2,1
    2250:	18800035 	stwio	r2,0(r3)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    2254:	00824834 	movhi	r2,2336
    2258:	10801c04 	addi	r2,r2,112
    225c:	10000035 	stwio	zero,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    2260:	00824834 	movhi	r2,2336
    2264:	10801c04 	addi	r2,r2,112
    2268:	10000035 	stwio	zero,0(r2)
        //in packet
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
    226c:	00824834 	movhi	r2,2336
    2270:	10801c04 	addi	r2,r2,112
    2274:	10000035 	stwio	zero,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
    2278:	00824834 	movhi	r2,2336
    227c:	10801c04 	addi	r2,r2,112
    2280:	10000035 	stwio	zero,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//device address
    2284:	00c24834 	movhi	r3,2336
    2288:	18c01c04 	addi	r3,r3,112
    228c:	0080a404 	movi	r2,656
    2290:	18800035 	stwio	r2,0(r3)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0041); //data 1
    2294:	00c24834 	movhi	r3,2336
    2298:	18c01c04 	addi	r3,r3,112
    229c:	00801044 	movi	r2,65
    22a0:	18800035 	stwio	r2,0(r3)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    22a4:	00c24834 	movhi	r3,2336
    22a8:	18c01c04 	addi	r3,r3,112
    22ac:	008004c4 	movi	r2,19
    22b0:	18800035 	stwio	r2,0(r3)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    22b4:	00824834 	movhi	r2,2336
    22b8:	10801c04 	addi	r2,r2,112
    22bc:	10000035 	stwio	zero,0(r2)
        
        UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    22c0:	01006c04 	movi	r4,432
    22c4:	01414004 	movi	r5,1280
    22c8:	0003c6c0 	call	3c6c <UsbWrite>
        usleep(10*1000);
    22cc:	0109c404 	movi	r4,10000
    22d0:	000e4600 	call	e460 <usleep>
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    //usleep(10*1000);
   
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    22d4:	00824834 	movhi	r2,2336
    22d8:	10801f04 	addi	r2,r2,124
    22dc:	10800037 	ldwio	r2,0(r2)
    22e0:	1080040c 	andi	r2,r2,16
    22e4:	1005003a 	cmpeq	r2,r2,zero
    22e8:	103fb61e 	bne	r2,zero,21c4 <main+0x1ee8>
        
        UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
        usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    22ec:	01005104 	movi	r4,324
    22f0:	0003cb00 	call	3cb0 <UsbRead>
    22f4:	e0bffe8d 	sth	r2,-6(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    22f8:	01005104 	movi	r4,324
    22fc:	000b883a 	mov	r5,zero
    2300:	0003c6c0 	call	3c6c <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    2304:	00000d06 	br	233c <main+0x2060>
    {
       if(usb_ctl_val == 0x000)
    2308:	e0bffe8b 	ldhu	r2,-6(fp)
    230c:	1005003a 	cmpeq	r2,r2,zero
    2310:	1000041e 	bne	r2,zero,2324 <main+0x2048>
       {
       }
       else
       {
        printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    2314:	e17ffe8b 	ldhu	r5,-6(fp)
    2318:	01000074 	movhi	r4,1
    231c:	2105e004 	addi	r4,r4,6016
    2320:	00045080 	call	4508 <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    2324:	01005104 	movi	r4,324
    2328:	0003cb00 	call	3cb0 <UsbRead>
    232c:	e0bffe8d 	sth	r2,-6(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2330:	01005104 	movi	r4,324
    2334:	000b883a 	mov	r5,zero
    2338:	0003c6c0 	call	3c6c <UsbWrite>
        usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    233c:	e0bffe8b 	ldhu	r2,-6(fp)
    2340:	10840018 	cmpnei	r2,r2,4096
    2344:	103ff01e 	bne	r2,zero,2308 <main+0x202c>
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
    2348:	00c24834 	movhi	r3,2336
    234c:	18c01e04 	addi	r3,r3,120
    2350:	00814184 	movi	r2,1286
    2354:	18800035 	stwio	r2,0(r3)
    printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    2358:	00824834 	movhi	r2,2336
    235c:	10801c04 	addi	r2,r2,112
    2360:	11400037 	ldwio	r5,0(r2)
    2364:	01000074 	movhi	r4,1
    2368:	2106c704 	addi	r4,r4,6940
    236c:	00045080 	call	4508 <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    2370:	00c24834 	movhi	r3,2336
    2374:	18c01e04 	addi	r3,r3,120
    2378:	00814204 	movi	r2,1288
    237c:	18800035 	stwio	r2,0(r3)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    2380:	00824834 	movhi	r2,2336
    2384:	10801c04 	addi	r2,r2,112
    2388:	10800037 	ldwio	r2,0(r2)
    238c:	e0bffe8d 	sth	r2,-6(fp)
    printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
    2390:	e17ffe8b 	ldhu	r5,-6(fp)
    2394:	01000074 	movhi	r4,1
    2398:	2106d204 	addi	r4,r4,6984
    239c:	00045080 	call	4508 <printf>
    while (usb_ctl_val != 0x03) 
    23a0:	00001906 	br	2408 <main+0x212c>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
    23a4:	00824834 	movhi	r2,2336
    23a8:	10801f04 	addi	r2,r2,124
    23ac:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
    23b0:	01005104 	movi	r4,324
    23b4:	0003cb00 	call	3cb0 <UsbRead>
    23b8:	10bfffcc 	andi	r2,r2,65535
    23bc:	10840018 	cmpnei	r2,r2,4096
    23c0:	1000091e 	bne	r2,zero,23e8 <main+0x210c>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
    23c4:	01005104 	movi	r4,324
    23c8:	000b883a 	mov	r5,zero
    23cc:	0003c6c0 	call	3c6c <UsbWrite>
           
        
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    23d0:	00824834 	movhi	r2,2336
    23d4:	10801f04 	addi	r2,r2,124
    23d8:	10800037 	ldwio	r2,0(r2)
    23dc:	1080040c 	andi	r2,r2,16
    23e0:	1005003a 	cmpeq	r2,r2,zero
    23e4:	103ffa1e 	bne	r2,zero,23d0 <main+0x20f4>
           {
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    23e8:	00c24834 	movhi	r3,2336
    23ec:	18c01e04 	addi	r3,r3,120
    23f0:	00814204 	movi	r2,1288
    23f4:	18800035 	stwio	r2,0(r3)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    23f8:	00824834 	movhi	r2,2336
    23fc:	10801c04 	addi	r2,r2,112
    2400:	10800037 	ldwio	r2,0(r2)
    2404:	e0bffe8d 	sth	r2,-6(fp)
    printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
    while (usb_ctl_val != 0x03) 
    2408:	e0bffe8b 	ldhu	r2,-6(fp)
    240c:	108000d8 	cmpnei	r2,r2,3
    2410:	103fe41e 	bne	r2,zero,23a4 <main+0x20c8>
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    }    
    
    printf("------------[ENUM PROCESS]:set configuration pass!-------------------\n");
    2414:	01000074 	movhi	r4,1
    2418:	2106de04 	addi	r4,r4,7032
    241c:	00046200 	call	4620 <puts>
    
    //----------------------------------------------classe request out ------------------------------------------//
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    2420:	00c24834 	movhi	r3,2336
    2424:	18c01e04 	addi	r3,r3,120
    2428:	00814004 	movi	r2,1280
    242c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    2430:	00c24834 	movhi	r3,2336
    2434:	18c01c04 	addi	r3,r3,112
    2438:	00814304 	movi	r2,1292
    243c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    2440:	00c24834 	movhi	r3,2336
    2444:	18c01c04 	addi	r3,r3,112
    2448:	00800204 	movi	r2,8
    244c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //port address
    2450:	00c24834 	movhi	r3,2336
    2454:	18c01c04 	addi	r3,r3,112
    2458:	0080b404 	movi	r2,720
    245c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    2460:	00c24834 	movhi	r3,2336
    2464:	18c01c04 	addi	r3,r3,112
    2468:	00800044 	movi	r2,1
    246c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    2470:	00c24834 	movhi	r3,2336
    2474:	18c01c04 	addi	r3,r3,112
    2478:	008004c4 	movi	r2,19
    247c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    2480:	00c24834 	movhi	r3,2336
    2484:	18c01c04 	addi	r3,r3,112
    2488:	00814504 	movi	r2,1300
    248c:	18800035 	stwio	r2,0(r3)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0A21);
    2490:	00c24834 	movhi	r3,2336
    2494:	18c01c04 	addi	r3,r3,112
    2498:	00828844 	movi	r2,2593
    249c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//device address   
    24a0:	00824834 	movhi	r2,2336
    24a4:	10801c04 	addi	r2,r2,112
    24a8:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    24ac:	00824834 	movhi	r2,2336
    24b0:	10801c04 	addi	r2,r2,112
    24b4:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    24b8:	00824834 	movhi	r2,2336
    24bc:	10801c04 	addi	r2,r2,112
    24c0:	10000035 	stwio	zero,0(r2)
    //in packet
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
    24c4:	00824834 	movhi	r2,2336
    24c8:	10801c04 	addi	r2,r2,112
    24cc:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number /data length
    24d0:	00824834 	movhi	r2,2336
    24d4:	10801c04 	addi	r2,r2,112
    24d8:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//device address
    24dc:	00c24834 	movhi	r3,2336
    24e0:	18c01c04 	addi	r3,r3,112
    24e4:	0080a404 	movi	r2,656
    24e8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041); //data 1
    24ec:	00c24834 	movhi	r3,2336
    24f0:	18c01c04 	addi	r3,r3,112
    24f4:	00801044 	movi	r2,65
    24f8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    24fc:	00c24834 	movhi	r3,2336
    2500:	18c01c04 	addi	r3,r3,112
    2504:	008004c4 	movi	r2,19
    2508:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    250c:	00824834 	movhi	r2,2336
    2510:	10801c04 	addi	r2,r2,112
    2514:	10000035 	stwio	zero,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2518:	01006c04 	movi	r4,432
    251c:	01414004 	movi	r5,1280
    2520:	0003c6c0 	call	3c6c <UsbWrite>
    //usleep(10*1000);
   
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    2524:	00004306 	br	2634 <main+0x2358>
    {
        IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    2528:	00c24834 	movhi	r3,2336
    252c:	18c01e04 	addi	r3,r3,120
    2530:	00814004 	movi	r2,1280
    2534:	18800035 	stwio	r2,0(r3)
        IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    2538:	00c24834 	movhi	r3,2336
    253c:	18c01c04 	addi	r3,r3,112
    2540:	00814304 	movi	r2,1292
    2544:	18800035 	stwio	r2,0(r3)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    2548:	00c24834 	movhi	r3,2336
    254c:	18c01c04 	addi	r3,r3,112
    2550:	00800204 	movi	r2,8
    2554:	18800035 	stwio	r2,0(r3)
        IOWR(CY7C67200_BASE,HPI_DATA,0x02D0);
    2558:	00c24834 	movhi	r3,2336
    255c:	18c01c04 	addi	r3,r3,112
    2560:	0080b404 	movi	r2,720
    2564:	18800035 	stwio	r2,0(r3)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    2568:	00c24834 	movhi	r3,2336
    256c:	18c01c04 	addi	r3,r3,112
    2570:	00800044 	movi	r2,1
    2574:	18800035 	stwio	r2,0(r3)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    2578:	00c24834 	movhi	r3,2336
    257c:	18c01c04 	addi	r3,r3,112
    2580:	008004c4 	movi	r2,19
    2584:	18800035 	stwio	r2,0(r3)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    2588:	00c24834 	movhi	r3,2336
    258c:	18c01c04 	addi	r3,r3,112
    2590:	00814504 	movi	r2,1300
    2594:	18800035 	stwio	r2,0(r3)
    
        //td content 4 bytes
        IOWR(CY7C67200_BASE,HPI_DATA,0x0A21);
    2598:	00c24834 	movhi	r3,2336
    259c:	18c01c04 	addi	r3,r3,112
    25a0:	00828844 	movi	r2,2593
    25a4:	18800035 	stwio	r2,0(r3)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//device address   
    25a8:	00824834 	movhi	r2,2336
    25ac:	10801c04 	addi	r2,r2,112
    25b0:	10000035 	stwio	zero,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    25b4:	00824834 	movhi	r2,2336
    25b8:	10801c04 	addi	r2,r2,112
    25bc:	10000035 	stwio	zero,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    25c0:	00824834 	movhi	r2,2336
    25c4:	10801c04 	addi	r2,r2,112
    25c8:	10000035 	stwio	zero,0(r2)
        //in packet
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
    25cc:	00824834 	movhi	r2,2336
    25d0:	10801c04 	addi	r2,r2,112
    25d4:	10000035 	stwio	zero,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
    25d8:	00824834 	movhi	r2,2336
    25dc:	10801c04 	addi	r2,r2,112
    25e0:	10000035 	stwio	zero,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//device address
    25e4:	00c24834 	movhi	r3,2336
    25e8:	18c01c04 	addi	r3,r3,112
    25ec:	0080a404 	movi	r2,656
    25f0:	18800035 	stwio	r2,0(r3)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0041); //data 1
    25f4:	00c24834 	movhi	r3,2336
    25f8:	18c01c04 	addi	r3,r3,112
    25fc:	00801044 	movi	r2,65
    2600:	18800035 	stwio	r2,0(r3)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    2604:	00c24834 	movhi	r3,2336
    2608:	18c01c04 	addi	r3,r3,112
    260c:	008004c4 	movi	r2,19
    2610:	18800035 	stwio	r2,0(r3)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    2614:	00824834 	movhi	r2,2336
    2618:	10801c04 	addi	r2,r2,112
    261c:	10000035 	stwio	zero,0(r2)
        
        UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2620:	01006c04 	movi	r4,432
    2624:	01414004 	movi	r5,1280
    2628:	0003c6c0 	call	3c6c <UsbWrite>
        usleep(10*1000);
    262c:	0109c404 	movi	r4,10000
    2630:	000e4600 	call	e460 <usleep>
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    //usleep(10*1000);
   
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    2634:	00824834 	movhi	r2,2336
    2638:	10801f04 	addi	r2,r2,124
    263c:	10800037 	ldwio	r2,0(r2)
    2640:	1080040c 	andi	r2,r2,16
    2644:	1005003a 	cmpeq	r2,r2,zero
    2648:	103fb71e 	bne	r2,zero,2528 <main+0x224c>
        
        UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
        usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    264c:	01005104 	movi	r4,324
    2650:	0003cb00 	call	3cb0 <UsbRead>
    2654:	e0bffe8d 	sth	r2,-6(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2658:	01005104 	movi	r4,324
    265c:	000b883a 	mov	r5,zero
    2660:	0003c6c0 	call	3c6c <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    2664:	00000d06 	br	269c <main+0x23c0>
    {
       if(usb_ctl_val == 0x000)
    2668:	e0bffe8b 	ldhu	r2,-6(fp)
    266c:	1005003a 	cmpeq	r2,r2,zero
    2670:	1000041e 	bne	r2,zero,2684 <main+0x23a8>
       {
       }
       else
       {
        printf("[SIE1 MSG]:SIE 1 msg reg is %x\n",usb_ctl_val);
    2674:	e17ffe8b 	ldhu	r5,-6(fp)
    2678:	01000074 	movhi	r4,1
    267c:	2106f004 	addi	r4,r4,7104
    2680:	00045080 	call	4508 <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    2684:	01005104 	movi	r4,324
    2688:	0003cb00 	call	3cb0 <UsbRead>
    268c:	e0bffe8d 	sth	r2,-6(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2690:	01005104 	movi	r4,324
    2694:	000b883a 	mov	r5,zero
    2698:	0003c6c0 	call	3c6c <UsbWrite>
        usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    269c:	e0bffe8b 	ldhu	r2,-6(fp)
    26a0:	10840018 	cmpnei	r2,r2,4096
    26a4:	103ff01e 	bne	r2,zero,2668 <main+0x238c>
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
    26a8:	00c24834 	movhi	r3,2336
    26ac:	18c01e04 	addi	r3,r3,120
    26b0:	00814184 	movi	r2,1286
    26b4:	18800035 	stwio	r2,0(r3)
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    26b8:	00824834 	movhi	r2,2336
    26bc:	10801c04 	addi	r2,r2,112
    26c0:	11400037 	ldwio	r5,0(r2)
    26c4:	01000074 	movhi	r4,1
    26c8:	2106f804 	addi	r4,r4,7136
    26cc:	00045080 	call	4508 <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    26d0:	00c24834 	movhi	r3,2336
    26d4:	18c01e04 	addi	r3,r3,120
    26d8:	00814204 	movi	r2,1288
    26dc:	18800035 	stwio	r2,0(r3)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    26e0:	00824834 	movhi	r2,2336
    26e4:	10801c04 	addi	r2,r2,112
    26e8:	10800037 	ldwio	r2,0(r2)
    26ec:	e0bffe8d 	sth	r2,-6(fp)
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    26f0:	e17ffe8b 	ldhu	r5,-6(fp)
    26f4:	01000074 	movhi	r4,1
    26f8:	21070304 	addi	r4,r4,7180
    26fc:	00045080 	call	4508 <printf>
    while (usb_ctl_val != 0x03) 
    2700:	00001906 	br	2768 <main+0x248c>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
    2704:	00824834 	movhi	r2,2336
    2708:	10801f04 	addi	r2,r2,124
    270c:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
    2710:	01005104 	movi	r4,324
    2714:	0003cb00 	call	3cb0 <UsbRead>
    2718:	10bfffcc 	andi	r2,r2,65535
    271c:	10840018 	cmpnei	r2,r2,4096
    2720:	1000091e 	bne	r2,zero,2748 <main+0x246c>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2724:	01005104 	movi	r4,324
    2728:	000b883a 	mov	r5,zero
    272c:	0003c6c0 	call	3c6c <UsbWrite>
           
        
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    2730:	00824834 	movhi	r2,2336
    2734:	10801f04 	addi	r2,r2,124
    2738:	10800037 	ldwio	r2,0(r2)
    273c:	1080040c 	andi	r2,r2,16
    2740:	1005003a 	cmpeq	r2,r2,zero
    2744:	103ffa1e 	bne	r2,zero,2730 <main+0x2454>
           {
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    2748:	00c24834 	movhi	r3,2336
    274c:	18c01e04 	addi	r3,r3,120
    2750:	00814204 	movi	r2,1288
    2754:	18800035 	stwio	r2,0(r3)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    2758:	00824834 	movhi	r2,2336
    275c:	10801c04 	addi	r2,r2,112
    2760:	10800037 	ldwio	r2,0(r2)
    2764:	e0bffe8d 	sth	r2,-6(fp)
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    while (usb_ctl_val != 0x03) 
    2768:	e0bffe8b 	ldhu	r2,-6(fp)
    276c:	108000d8 	cmpnei	r2,r2,3
    2770:	103fe41e 	bne	r2,zero,2704 <main+0x2428>
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    }    
    
    
    printf("------------[ENUM PROCESS]:classe request out pass!-------------------\n");
    2774:	01000074 	movhi	r4,1
    2778:	21070f04 	addi	r4,r4,7228
    277c:	00046200 	call	4620 <puts>
    
    //----------------------------------get descriptor(class 0x21) request out --------------------------------//
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    2780:	00c24834 	movhi	r3,2336
    2784:	18c01e04 	addi	r3,r3,120
    2788:	00814004 	movi	r2,1280
    278c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    2790:	00c24834 	movhi	r3,2336
    2794:	18c01c04 	addi	r3,r3,112
    2798:	00814304 	movi	r2,1292
    279c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    27a0:	00c24834 	movhi	r3,2336
    27a4:	18c01c04 	addi	r3,r3,112
    27a8:	00800204 	movi	r2,8
    27ac:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //port address
    27b0:	00c24834 	movhi	r3,2336
    27b4:	18c01c04 	addi	r3,r3,112
    27b8:	0080b404 	movi	r2,720
    27bc:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    27c0:	00c24834 	movhi	r3,2336
    27c4:	18c01c04 	addi	r3,r3,112
    27c8:	00800044 	movi	r2,1
    27cc:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    27d0:	00c24834 	movhi	r3,2336
    27d4:	18c01c04 	addi	r3,r3,112
    27d8:	008004c4 	movi	r2,19
    27dc:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    27e0:	00c24834 	movhi	r3,2336
    27e4:	18c01c04 	addi	r3,r3,112
    27e8:	00814504 	movi	r2,1300
    27ec:	18800035 	stwio	r2,0(r3)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0681);//c
    27f0:	00c24834 	movhi	r3,2336
    27f4:	18c01c04 	addi	r3,r3,112
    27f8:	0081a044 	movi	r2,1665
    27fc:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x2100);//e //config 
    2800:	00c24834 	movhi	r3,2336
    2804:	18c01c04 	addi	r3,r3,112
    2808:	00884004 	movi	r2,8448
    280c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    2810:	00824834 	movhi	r2,2336
    2814:	10801c04 	addi	r2,r2,112
    2818:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x007B);//2
    281c:	00c24834 	movhi	r3,2336
    2820:	18c01c04 	addi	r3,r3,112
    2824:	00801ec4 	movi	r2,123
    2828:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
    282c:	00c24834 	movhi	r3,2336
    2830:	18c01c04 	addi	r3,r3,112
    2834:	00815104 	movi	r2,1348
    2838:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    283c:	00c24834 	movhi	r3,2336
    2840:	18c01c04 	addi	r3,r3,112
    2844:	00800204 	movi	r2,8
    2848:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    284c:	00c24834 	movhi	r3,2336
    2850:	18c01c04 	addi	r3,r3,112
    2854:	0080a404 	movi	r2,656
    2858:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    285c:	00c24834 	movhi	r3,2336
    2860:	18c01c04 	addi	r3,r3,112
    2864:	00801044 	movi	r2,65
    2868:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    286c:	00c24834 	movhi	r3,2336
    2870:	18c01c04 	addi	r3,r3,112
    2874:	008004c4 	movi	r2,19
    2878:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    287c:	00c24834 	movhi	r3,2336
    2880:	18c01c04 	addi	r3,r3,112
    2884:	00814804 	movi	r2,1312
    2888:	18800035 	stwio	r2,0(r3)
        
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //52c
    288c:	00824834 	movhi	r2,2336
    2890:	10801c04 	addi	r2,r2,112
    2894:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
    2898:	00824834 	movhi	r2,2336
    289c:	10801c04 	addi	r2,r2,112
    28a0:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//530
    28a4:	00c24834 	movhi	r3,2336
    28a8:	18c01c04 	addi	r3,r3,112
    28ac:	00808404 	movi	r2,528
    28b0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    28b4:	00c24834 	movhi	r3,2336
    28b8:	18c01c04 	addi	r3,r3,112
    28bc:	00801044 	movi	r2,65
    28c0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    28c4:	00c24834 	movhi	r3,2336
    28c8:	18c01c04 	addi	r3,r3,112
    28cc:	008004c4 	movi	r2,19
    28d0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
    28d4:	00824834 	movhi	r2,2336
    28d8:	10801c04 	addi	r2,r2,112
    28dc:	10000035 	stwio	zero,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    28e0:	01006c04 	movi	r4,432
    28e4:	01414004 	movi	r5,1280
    28e8:	0003c6c0 	call	3c6c <UsbWrite>
    //usleep(10*1000);
   
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    28ec:	00005d06 	br	2a64 <main+0x2788>
    {
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    28f0:	00c24834 	movhi	r3,2336
    28f4:	18c01e04 	addi	r3,r3,120
    28f8:	00814004 	movi	r2,1280
    28fc:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    2900:	00c24834 	movhi	r3,2336
    2904:	18c01c04 	addi	r3,r3,112
    2908:	00814304 	movi	r2,1292
    290c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    2910:	00c24834 	movhi	r3,2336
    2914:	18c01c04 	addi	r3,r3,112
    2918:	00800204 	movi	r2,8
    291c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //port address
    2920:	00c24834 	movhi	r3,2336
    2924:	18c01c04 	addi	r3,r3,112
    2928:	0080b404 	movi	r2,720
    292c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    2930:	00c24834 	movhi	r3,2336
    2934:	18c01c04 	addi	r3,r3,112
    2938:	00800044 	movi	r2,1
    293c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    2940:	00c24834 	movhi	r3,2336
    2944:	18c01c04 	addi	r3,r3,112
    2948:	008004c4 	movi	r2,19
    294c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    2950:	00c24834 	movhi	r3,2336
    2954:	18c01c04 	addi	r3,r3,112
    2958:	00814504 	movi	r2,1300
    295c:	18800035 	stwio	r2,0(r3)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0681);//c
    2960:	00c24834 	movhi	r3,2336
    2964:	18c01c04 	addi	r3,r3,112
    2968:	0081a044 	movi	r2,1665
    296c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x2100);//e //config 
    2970:	00c24834 	movhi	r3,2336
    2974:	18c01c04 	addi	r3,r3,112
    2978:	00884004 	movi	r2,8448
    297c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    2980:	00824834 	movhi	r2,2336
    2984:	10801c04 	addi	r2,r2,112
    2988:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x007B);//2
    298c:	00c24834 	movhi	r3,2336
    2990:	18c01c04 	addi	r3,r3,112
    2994:	00801ec4 	movi	r2,123
    2998:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
    299c:	00c24834 	movhi	r3,2336
    29a0:	18c01c04 	addi	r3,r3,112
    29a4:	00815104 	movi	r2,1348
    29a8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    29ac:	00c24834 	movhi	r3,2336
    29b0:	18c01c04 	addi	r3,r3,112
    29b4:	00800204 	movi	r2,8
    29b8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    29bc:	00c24834 	movhi	r3,2336
    29c0:	18c01c04 	addi	r3,r3,112
    29c4:	0080a404 	movi	r2,656
    29c8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    29cc:	00c24834 	movhi	r3,2336
    29d0:	18c01c04 	addi	r3,r3,112
    29d4:	00801044 	movi	r2,65
    29d8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    29dc:	00c24834 	movhi	r3,2336
    29e0:	18c01c04 	addi	r3,r3,112
    29e4:	008004c4 	movi	r2,19
    29e8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    29ec:	00c24834 	movhi	r3,2336
    29f0:	18c01c04 	addi	r3,r3,112
    29f4:	00814804 	movi	r2,1312
    29f8:	18800035 	stwio	r2,0(r3)
        
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //52c
    29fc:	00824834 	movhi	r2,2336
    2a00:	10801c04 	addi	r2,r2,112
    2a04:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
    2a08:	00824834 	movhi	r2,2336
    2a0c:	10801c04 	addi	r2,r2,112
    2a10:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//530
    2a14:	00c24834 	movhi	r3,2336
    2a18:	18c01c04 	addi	r3,r3,112
    2a1c:	00808404 	movi	r2,528
    2a20:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    2a24:	00c24834 	movhi	r3,2336
    2a28:	18c01c04 	addi	r3,r3,112
    2a2c:	00801044 	movi	r2,65
    2a30:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    2a34:	00c24834 	movhi	r3,2336
    2a38:	18c01c04 	addi	r3,r3,112
    2a3c:	008004c4 	movi	r2,19
    2a40:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
    2a44:	00824834 	movhi	r2,2336
    2a48:	10801c04 	addi	r2,r2,112
    2a4c:	10000035 	stwio	zero,0(r2)
        
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2a50:	01006c04 	movi	r4,432
    2a54:	01414004 	movi	r5,1280
    2a58:	0003c6c0 	call	3c6c <UsbWrite>
    usleep(10*1000);
    2a5c:	0109c404 	movi	r4,10000
    2a60:	000e4600 	call	e460 <usleep>
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    //usleep(10*1000);
   
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    2a64:	00824834 	movhi	r2,2336
    2a68:	10801f04 	addi	r2,r2,124
    2a6c:	10800037 	ldwio	r2,0(r2)
    2a70:	1080040c 	andi	r2,r2,16
    2a74:	1005003a 	cmpeq	r2,r2,zero
    2a78:	103f9d1e 	bne	r2,zero,28f0 <main+0x2614>
        
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    2a7c:	01005104 	movi	r4,324
    2a80:	0003cb00 	call	3cb0 <UsbRead>
    2a84:	e0bffe8d 	sth	r2,-6(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2a88:	01005104 	movi	r4,324
    2a8c:	000b883a 	mov	r5,zero
    2a90:	0003c6c0 	call	3c6c <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    2a94:	00000d06 	br	2acc <main+0x27f0>
    {
       if(usb_ctl_val == 0x000)
    2a98:	e0bffe8b 	ldhu	r2,-6(fp)
    2a9c:	1005003a 	cmpeq	r2,r2,zero
    2aa0:	1000041e 	bne	r2,zero,2ab4 <main+0x27d8>
       {
       }
       else
       {
        printf("[SIE MSG]:SIE 1 msg reg is %x\n",usb_ctl_val);
    2aa4:	e17ffe8b 	ldhu	r5,-6(fp)
    2aa8:	01000074 	movhi	r4,1
    2aac:	21072104 	addi	r4,r4,7300
    2ab0:	00045080 	call	4508 <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    2ab4:	01005104 	movi	r4,324
    2ab8:	0003cb00 	call	3cb0 <UsbRead>
    2abc:	e0bffe8d 	sth	r2,-6(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2ac0:	01005104 	movi	r4,324
    2ac4:	000b883a 	mov	r5,zero
    2ac8:	0003c6c0 	call	3c6c <UsbWrite>
    usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    2acc:	e0bffe8b 	ldhu	r2,-6(fp)
    2ad0:	10840018 	cmpnei	r2,r2,4096
    2ad4:	103ff01e 	bne	r2,zero,2a98 <main+0x27bc>
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
    2ad8:	00c24834 	movhi	r3,2336
    2adc:	18c01e04 	addi	r3,r3,120
    2ae0:	00814184 	movi	r2,1286
    2ae4:	18800035 	stwio	r2,0(r3)
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    2ae8:	00824834 	movhi	r2,2336
    2aec:	10801c04 	addi	r2,r2,112
    2af0:	11400037 	ldwio	r5,0(r2)
    2af4:	01000074 	movhi	r4,1
    2af8:	2106f804 	addi	r4,r4,7136
    2afc:	00045080 	call	4508 <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    2b00:	00c24834 	movhi	r3,2336
    2b04:	18c01e04 	addi	r3,r3,120
    2b08:	00814204 	movi	r2,1288
    2b0c:	18800035 	stwio	r2,0(r3)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    2b10:	00824834 	movhi	r2,2336
    2b14:	10801c04 	addi	r2,r2,112
    2b18:	10800037 	ldwio	r2,0(r2)
    2b1c:	e0bffe8d 	sth	r2,-6(fp)
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    2b20:	e17ffe8b 	ldhu	r5,-6(fp)
    2b24:	01000074 	movhi	r4,1
    2b28:	21070304 	addi	r4,r4,7180
    2b2c:	00045080 	call	4508 <printf>
    while (usb_ctl_val != 0x03) 
    2b30:	00001906 	br	2b98 <main+0x28bc>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
    2b34:	00824834 	movhi	r2,2336
    2b38:	10801f04 	addi	r2,r2,124
    2b3c:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
    2b40:	01005104 	movi	r4,324
    2b44:	0003cb00 	call	3cb0 <UsbRead>
    2b48:	10bfffcc 	andi	r2,r2,65535
    2b4c:	10840018 	cmpnei	r2,r2,4096
    2b50:	1000091e 	bne	r2,zero,2b78 <main+0x289c>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2b54:	01005104 	movi	r4,324
    2b58:	000b883a 	mov	r5,zero
    2b5c:	0003c6c0 	call	3c6c <UsbWrite>
           
        
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    2b60:	00824834 	movhi	r2,2336
    2b64:	10801f04 	addi	r2,r2,124
    2b68:	10800037 	ldwio	r2,0(r2)
    2b6c:	1080040c 	andi	r2,r2,16
    2b70:	1005003a 	cmpeq	r2,r2,zero
    2b74:	103ffa1e 	bne	r2,zero,2b60 <main+0x2884>
           {
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    2b78:	00c24834 	movhi	r3,2336
    2b7c:	18c01e04 	addi	r3,r3,120
    2b80:	00814204 	movi	r2,1288
    2b84:	18800035 	stwio	r2,0(r3)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    2b88:	00824834 	movhi	r2,2336
    2b8c:	10801c04 	addi	r2,r2,112
    2b90:	10800037 	ldwio	r2,0(r2)
    2b94:	e0bffe8d 	sth	r2,-6(fp)
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    while (usb_ctl_val != 0x03) 
    2b98:	e0bffe8b 	ldhu	r2,-6(fp)
    2b9c:	108000d8 	cmpnei	r2,r2,3
    2ba0:	103fe41e 	bne	r2,zero,2b34 <main+0x2858>
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    }    
    
    
    
    printf("------------[ENUM PROCESS]:get descriptor (class 0x21) pass!-------------------\n");
    2ba4:	01000074 	movhi	r4,1
    2ba8:	21072904 	addi	r4,r4,7332
    2bac:	00046200 	call	4620 <puts>
    
    //-------------------------------get descriptor (class 0x22)-------------------------------------------//
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    2bb0:	00c24834 	movhi	r3,2336
    2bb4:	18c01e04 	addi	r3,r3,120
    2bb8:	00814004 	movi	r2,1280
    2bbc:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    2bc0:	00c24834 	movhi	r3,2336
    2bc4:	18c01c04 	addi	r3,r3,112
    2bc8:	00814304 	movi	r2,1292
    2bcc:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    2bd0:	00c24834 	movhi	r3,2336
    2bd4:	18c01c04 	addi	r3,r3,112
    2bd8:	00800204 	movi	r2,8
    2bdc:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
    2be0:	00c24834 	movhi	r3,2336
    2be4:	18c01c04 	addi	r3,r3,112
    2be8:	0080b404 	movi	r2,720
    2bec:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    2bf0:	00c24834 	movhi	r3,2336
    2bf4:	18c01c04 	addi	r3,r3,112
    2bf8:	00800044 	movi	r2,1
    2bfc:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    2c00:	00c24834 	movhi	r3,2336
    2c04:	18c01c04 	addi	r3,r3,112
    2c08:	008004c4 	movi	r2,19
    2c0c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    2c10:	00c24834 	movhi	r3,2336
    2c14:	18c01c04 	addi	r3,r3,112
    2c18:	00814504 	movi	r2,1300
    2c1c:	18800035 	stwio	r2,0(r3)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0681);//c
    2c20:	00c24834 	movhi	r3,2336
    2c24:	18c01c04 	addi	r3,r3,112
    2c28:	0081a044 	movi	r2,1665
    2c2c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x2200);//e //config 
    2c30:	00c24834 	movhi	r3,2336
    2c34:	18c01c04 	addi	r3,r3,112
    2c38:	00888004 	movi	r2,8704
    2c3c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    2c40:	00824834 	movhi	r2,2336
    2c44:	10801c04 	addi	r2,r2,112
    2c48:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x007B);//2
    2c4c:	00c24834 	movhi	r3,2336
    2c50:	18c01c04 	addi	r3,r3,112
    2c54:	00801ec4 	movi	r2,123
    2c58:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x0580); //514
    2c5c:	00c24834 	movhi	r3,2336
    2c60:	18c01c04 	addi	r3,r3,112
    2c64:	00816004 	movi	r2,1408
    2c68:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    2c6c:	00c24834 	movhi	r3,2336
    2c70:	18c01c04 	addi	r3,r3,112
    2c74:	00800204 	movi	r2,8
    2c78:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    2c7c:	00c24834 	movhi	r3,2336
    2c80:	18c01c04 	addi	r3,r3,112
    2c84:	0080a404 	movi	r2,656
    2c88:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    2c8c:	00c24834 	movhi	r3,2336
    2c90:	18c01c04 	addi	r3,r3,112
    2c94:	00801044 	movi	r2,65
    2c98:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    2c9c:	00c24834 	movhi	r3,2336
    2ca0:	18c01c04 	addi	r3,r3,112
    2ca4:	008004c4 	movi	r2,19
    2ca8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    2cac:	00c24834 	movhi	r3,2336
    2cb0:	18c01c04 	addi	r3,r3,112
    2cb4:	00814804 	movi	r2,1312
    2cb8:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-2
    IOWR(CY7C67200_BASE,HPI_DATA,0x0588); //520
    2cbc:	00c24834 	movhi	r3,2336
    2cc0:	18c01c04 	addi	r3,r3,112
    2cc4:	00816204 	movi	r2,1416
    2cc8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
    2ccc:	00c24834 	movhi	r3,2336
    2cd0:	18c01c04 	addi	r3,r3,112
    2cd4:	00800204 	movi	r2,8
    2cd8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    2cdc:	00c24834 	movhi	r3,2336
    2ce0:	18c01c04 	addi	r3,r3,112
    2ce4:	0080a404 	movi	r2,656
    2ce8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
    2cec:	00c24834 	movhi	r3,2336
    2cf0:	18c01c04 	addi	r3,r3,112
    2cf4:	00800044 	movi	r2,1
    2cf8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    2cfc:	00c24834 	movhi	r3,2336
    2d00:	18c01c04 	addi	r3,r3,112
    2d04:	008004c4 	movi	r2,19
    2d08:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
    2d0c:	00c24834 	movhi	r3,2336
    2d10:	18c01c04 	addi	r3,r3,112
    2d14:	00814b04 	movi	r2,1324
    2d18:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-3
    IOWR(CY7C67200_BASE,HPI_DATA,0x0590); //52c
    2d1c:	00c24834 	movhi	r3,2336
    2d20:	18c01c04 	addi	r3,r3,112
    2d24:	00816404 	movi	r2,1424
    2d28:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
    2d2c:	00c24834 	movhi	r3,2336
    2d30:	18c01c04 	addi	r3,r3,112
    2d34:	00800204 	movi	r2,8
    2d38:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
    2d3c:	00c24834 	movhi	r3,2336
    2d40:	18c01c04 	addi	r3,r3,112
    2d44:	0080a404 	movi	r2,656
    2d48:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    2d4c:	00c24834 	movhi	r3,2336
    2d50:	18c01c04 	addi	r3,r3,112
    2d54:	00801044 	movi	r2,65
    2d58:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    2d5c:	00c24834 	movhi	r3,2336
    2d60:	18c01c04 	addi	r3,r3,112
    2d64:	008004c4 	movi	r2,19
    2d68:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
    2d6c:	00c24834 	movhi	r3,2336
    2d70:	18c01c04 	addi	r3,r3,112
    2d74:	00814e04 	movi	r2,1336
    2d78:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-4
    IOWR(CY7C67200_BASE,HPI_DATA,0x0598); //538
    2d7c:	00c24834 	movhi	r3,2336
    2d80:	18c01c04 	addi	r3,r3,112
    2d84:	00816604 	movi	r2,1432
    2d88:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//a
    2d8c:	00c24834 	movhi	r3,2336
    2d90:	18c01c04 	addi	r3,r3,112
    2d94:	00800204 	movi	r2,8
    2d98:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
    2d9c:	00c24834 	movhi	r3,2336
    2da0:	18c01c04 	addi	r3,r3,112
    2da4:	0080a404 	movi	r2,656
    2da8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data0
    2dac:	00c24834 	movhi	r3,2336
    2db0:	18c01c04 	addi	r3,r3,112
    2db4:	00800044 	movi	r2,1
    2db8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
    2dbc:	00c24834 	movhi	r3,2336
    2dc0:	18c01c04 	addi	r3,r3,112
    2dc4:	008004c4 	movi	r2,19
    2dc8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544);//2
    2dcc:	00c24834 	movhi	r3,2336
    2dd0:	18c01c04 	addi	r3,r3,112
    2dd4:	00815104 	movi	r2,1348
    2dd8:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-5
    IOWR(CY7C67200_BASE,HPI_DATA,0x05a0); //544
    2ddc:	00c24834 	movhi	r3,2336
    2de0:	18c01c04 	addi	r3,r3,112
    2de4:	00816804 	movi	r2,1440
    2de8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    2dec:	00c24834 	movhi	r3,2336
    2df0:	18c01c04 	addi	r3,r3,112
    2df4:	00800204 	movi	r2,8
    2df8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    2dfc:	00c24834 	movhi	r3,2336
    2e00:	18c01c04 	addi	r3,r3,112
    2e04:	0080a404 	movi	r2,656
    2e08:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a //data1
    2e0c:	00c24834 	movhi	r3,2336
    2e10:	18c01c04 	addi	r3,r3,112
    2e14:	00801044 	movi	r2,65
    2e18:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    2e1c:	00c24834 	movhi	r3,2336
    2e20:	18c01c04 	addi	r3,r3,112
    2e24:	008004c4 	movi	r2,19
    2e28:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0550);//e
    2e2c:	00c24834 	movhi	r3,2336
    2e30:	18c01c04 	addi	r3,r3,112
    2e34:	00815404 	movi	r2,1360
    2e38:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-6
    IOWR(CY7C67200_BASE,HPI_DATA,0x05a8); //550
    2e3c:	00c24834 	movhi	r3,2336
    2e40:	18c01c04 	addi	r3,r3,112
    2e44:	00816a04 	movi	r2,1448
    2e48:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
    2e4c:	00c24834 	movhi	r3,2336
    2e50:	18c01c04 	addi	r3,r3,112
    2e54:	00800204 	movi	r2,8
    2e58:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    2e5c:	00c24834 	movhi	r3,2336
    2e60:	18c01c04 	addi	r3,r3,112
    2e64:	0080a404 	movi	r2,656
    2e68:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
    2e6c:	00c24834 	movhi	r3,2336
    2e70:	18c01c04 	addi	r3,r3,112
    2e74:	00800044 	movi	r2,1
    2e78:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    2e7c:	00c24834 	movhi	r3,2336
    2e80:	18c01c04 	addi	r3,r3,112
    2e84:	008004c4 	movi	r2,19
    2e88:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x055c);//a
    2e8c:	00c24834 	movhi	r3,2336
    2e90:	18c01c04 	addi	r3,r3,112
    2e94:	00815704 	movi	r2,1372
    2e98:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-7
    IOWR(CY7C67200_BASE,HPI_DATA,0x05b0); //c
    2e9c:	00c24834 	movhi	r3,2336
    2ea0:	18c01c04 	addi	r3,r3,112
    2ea4:	00816c04 	movi	r2,1456
    2ea8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
    2eac:	00c24834 	movhi	r3,2336
    2eb0:	18c01c04 	addi	r3,r3,112
    2eb4:	00800204 	movi	r2,8
    2eb8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//560
    2ebc:	00c24834 	movhi	r3,2336
    2ec0:	18c01c04 	addi	r3,r3,112
    2ec4:	0080a404 	movi	r2,656
    2ec8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2 //data1
    2ecc:	00c24834 	movhi	r3,2336
    2ed0:	18c01c04 	addi	r3,r3,112
    2ed4:	00801044 	movi	r2,65
    2ed8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    2edc:	00c24834 	movhi	r3,2336
    2ee0:	18c01c04 	addi	r3,r3,112
    2ee4:	008004c4 	movi	r2,19
    2ee8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0568);//6
    2eec:	00c24834 	movhi	r3,2336
    2ef0:	18c01c04 	addi	r3,r3,112
    2ef4:	00815a04 	movi	r2,1384
    2ef8:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-8
    IOWR(CY7C67200_BASE,HPI_DATA,0x05b8); //8
    2efc:	00c24834 	movhi	r3,2336
    2f00:	18c01c04 	addi	r3,r3,112
    2f04:	00816e04 	movi	r2,1464
    2f08:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0003);//a
    2f0c:	00c24834 	movhi	r3,2336
    2f10:	18c01c04 	addi	r3,r3,112
    2f14:	008000c4 	movi	r2,3
    2f18:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
    2f1c:	00c24834 	movhi	r3,2336
    2f20:	18c01c04 	addi	r3,r3,112
    2f24:	0080a404 	movi	r2,656
    2f28:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data0
    2f2c:	00c24834 	movhi	r3,2336
    2f30:	18c01c04 	addi	r3,r3,112
    2f34:	00800044 	movi	r2,1
    2f38:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//570
    2f3c:	00c24834 	movhi	r3,2336
    2f40:	18c01c04 	addi	r3,r3,112
    2f44:	008004c4 	movi	r2,19
    2f48:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0574);//2
    2f4c:	00c24834 	movhi	r3,2336
    2f50:	18c01c04 	addi	r3,r3,112
    2f54:	00815d04 	movi	r2,1396
    2f58:	18800035 	stwio	r2,0(r3)
    
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //574
    2f5c:	00824834 	movhi	r2,2336
    2f60:	10801c04 	addi	r2,r2,112
    2f64:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
    2f68:	00824834 	movhi	r2,2336
    2f6c:	10801c04 	addi	r2,r2,112
    2f70:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//8
    2f74:	00c24834 	movhi	r3,2336
    2f78:	18c01c04 	addi	r3,r3,112
    2f7c:	00808404 	movi	r2,528
    2f80:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    2f84:	00c24834 	movhi	r3,2336
    2f88:	18c01c04 	addi	r3,r3,112
    2f8c:	00801044 	movi	r2,65
    2f90:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    2f94:	00c24834 	movhi	r3,2336
    2f98:	18c01c04 	addi	r3,r3,112
    2f9c:	008004c4 	movi	r2,19
    2fa0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
    2fa4:	00824834 	movhi	r2,2336
    2fa8:	10801c04 	addi	r2,r2,112
    2fac:	10000035 	stwio	zero,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2fb0:	01006c04 	movi	r4,432
    2fb4:	01414004 	movi	r5,1280
    2fb8:	0003c6c0 	call	3c6c <UsbWrite>
    
   //usleep(100*1000);
   //if no message
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    2fbc:	00010506 	br	33d4 <main+0x30f8>
    {
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    2fc0:	00c24834 	movhi	r3,2336
    2fc4:	18c01e04 	addi	r3,r3,120
    2fc8:	00814004 	movi	r2,1280
    2fcc:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    2fd0:	00c24834 	movhi	r3,2336
    2fd4:	18c01c04 	addi	r3,r3,112
    2fd8:	00814304 	movi	r2,1292
    2fdc:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    2fe0:	00c24834 	movhi	r3,2336
    2fe4:	18c01c04 	addi	r3,r3,112
    2fe8:	00800204 	movi	r2,8
    2fec:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
    2ff0:	00c24834 	movhi	r3,2336
    2ff4:	18c01c04 	addi	r3,r3,112
    2ff8:	0080b404 	movi	r2,720
    2ffc:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    3000:	00c24834 	movhi	r3,2336
    3004:	18c01c04 	addi	r3,r3,112
    3008:	00800044 	movi	r2,1
    300c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    3010:	00c24834 	movhi	r3,2336
    3014:	18c01c04 	addi	r3,r3,112
    3018:	008004c4 	movi	r2,19
    301c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    3020:	00c24834 	movhi	r3,2336
    3024:	18c01c04 	addi	r3,r3,112
    3028:	00814504 	movi	r2,1300
    302c:	18800035 	stwio	r2,0(r3)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0681);//c
    3030:	00c24834 	movhi	r3,2336
    3034:	18c01c04 	addi	r3,r3,112
    3038:	0081a044 	movi	r2,1665
    303c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x2200);//e //config 
    3040:	00c24834 	movhi	r3,2336
    3044:	18c01c04 	addi	r3,r3,112
    3048:	00888004 	movi	r2,8704
    304c:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    3050:	00824834 	movhi	r2,2336
    3054:	10801c04 	addi	r2,r2,112
    3058:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x007B);//2
    305c:	00c24834 	movhi	r3,2336
    3060:	18c01c04 	addi	r3,r3,112
    3064:	00801ec4 	movi	r2,123
    3068:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x0580); //514
    306c:	00c24834 	movhi	r3,2336
    3070:	18c01c04 	addi	r3,r3,112
    3074:	00816004 	movi	r2,1408
    3078:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    307c:	00c24834 	movhi	r3,2336
    3080:	18c01c04 	addi	r3,r3,112
    3084:	00800204 	movi	r2,8
    3088:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    308c:	00c24834 	movhi	r3,2336
    3090:	18c01c04 	addi	r3,r3,112
    3094:	0080a404 	movi	r2,656
    3098:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    309c:	00c24834 	movhi	r3,2336
    30a0:	18c01c04 	addi	r3,r3,112
    30a4:	00801044 	movi	r2,65
    30a8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    30ac:	00c24834 	movhi	r3,2336
    30b0:	18c01c04 	addi	r3,r3,112
    30b4:	008004c4 	movi	r2,19
    30b8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    30bc:	00c24834 	movhi	r3,2336
    30c0:	18c01c04 	addi	r3,r3,112
    30c4:	00814804 	movi	r2,1312
    30c8:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-2
    IOWR(CY7C67200_BASE,HPI_DATA,0x0588); //520
    30cc:	00c24834 	movhi	r3,2336
    30d0:	18c01c04 	addi	r3,r3,112
    30d4:	00816204 	movi	r2,1416
    30d8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
    30dc:	00c24834 	movhi	r3,2336
    30e0:	18c01c04 	addi	r3,r3,112
    30e4:	00800204 	movi	r2,8
    30e8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    30ec:	00c24834 	movhi	r3,2336
    30f0:	18c01c04 	addi	r3,r3,112
    30f4:	0080a404 	movi	r2,656
    30f8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
    30fc:	00c24834 	movhi	r3,2336
    3100:	18c01c04 	addi	r3,r3,112
    3104:	00800044 	movi	r2,1
    3108:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    310c:	00c24834 	movhi	r3,2336
    3110:	18c01c04 	addi	r3,r3,112
    3114:	008004c4 	movi	r2,19
    3118:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
    311c:	00c24834 	movhi	r3,2336
    3120:	18c01c04 	addi	r3,r3,112
    3124:	00814b04 	movi	r2,1324
    3128:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-3
    IOWR(CY7C67200_BASE,HPI_DATA,0x0590); //52c
    312c:	00c24834 	movhi	r3,2336
    3130:	18c01c04 	addi	r3,r3,112
    3134:	00816404 	movi	r2,1424
    3138:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
    313c:	00c24834 	movhi	r3,2336
    3140:	18c01c04 	addi	r3,r3,112
    3144:	00800204 	movi	r2,8
    3148:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
    314c:	00c24834 	movhi	r3,2336
    3150:	18c01c04 	addi	r3,r3,112
    3154:	0080a404 	movi	r2,656
    3158:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    315c:	00c24834 	movhi	r3,2336
    3160:	18c01c04 	addi	r3,r3,112
    3164:	00801044 	movi	r2,65
    3168:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    316c:	00c24834 	movhi	r3,2336
    3170:	18c01c04 	addi	r3,r3,112
    3174:	008004c4 	movi	r2,19
    3178:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
    317c:	00c24834 	movhi	r3,2336
    3180:	18c01c04 	addi	r3,r3,112
    3184:	00814e04 	movi	r2,1336
    3188:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-4
    IOWR(CY7C67200_BASE,HPI_DATA,0x0598); //538
    318c:	00c24834 	movhi	r3,2336
    3190:	18c01c04 	addi	r3,r3,112
    3194:	00816604 	movi	r2,1432
    3198:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//a
    319c:	00c24834 	movhi	r3,2336
    31a0:	18c01c04 	addi	r3,r3,112
    31a4:	00800204 	movi	r2,8
    31a8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
    31ac:	00c24834 	movhi	r3,2336
    31b0:	18c01c04 	addi	r3,r3,112
    31b4:	0080a404 	movi	r2,656
    31b8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data0
    31bc:	00c24834 	movhi	r3,2336
    31c0:	18c01c04 	addi	r3,r3,112
    31c4:	00800044 	movi	r2,1
    31c8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
    31cc:	00c24834 	movhi	r3,2336
    31d0:	18c01c04 	addi	r3,r3,112
    31d4:	008004c4 	movi	r2,19
    31d8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544);//2
    31dc:	00c24834 	movhi	r3,2336
    31e0:	18c01c04 	addi	r3,r3,112
    31e4:	00815104 	movi	r2,1348
    31e8:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-5
    IOWR(CY7C67200_BASE,HPI_DATA,0x05a0); //544
    31ec:	00c24834 	movhi	r3,2336
    31f0:	18c01c04 	addi	r3,r3,112
    31f4:	00816804 	movi	r2,1440
    31f8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    31fc:	00c24834 	movhi	r3,2336
    3200:	18c01c04 	addi	r3,r3,112
    3204:	00800204 	movi	r2,8
    3208:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    320c:	00c24834 	movhi	r3,2336
    3210:	18c01c04 	addi	r3,r3,112
    3214:	0080a404 	movi	r2,656
    3218:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a //data1
    321c:	00c24834 	movhi	r3,2336
    3220:	18c01c04 	addi	r3,r3,112
    3224:	00801044 	movi	r2,65
    3228:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    322c:	00c24834 	movhi	r3,2336
    3230:	18c01c04 	addi	r3,r3,112
    3234:	008004c4 	movi	r2,19
    3238:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0550);//e
    323c:	00c24834 	movhi	r3,2336
    3240:	18c01c04 	addi	r3,r3,112
    3244:	00815404 	movi	r2,1360
    3248:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-6
    IOWR(CY7C67200_BASE,HPI_DATA,0x05a8); //550
    324c:	00c24834 	movhi	r3,2336
    3250:	18c01c04 	addi	r3,r3,112
    3254:	00816a04 	movi	r2,1448
    3258:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
    325c:	00c24834 	movhi	r3,2336
    3260:	18c01c04 	addi	r3,r3,112
    3264:	00800204 	movi	r2,8
    3268:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    326c:	00c24834 	movhi	r3,2336
    3270:	18c01c04 	addi	r3,r3,112
    3274:	0080a404 	movi	r2,656
    3278:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
    327c:	00c24834 	movhi	r3,2336
    3280:	18c01c04 	addi	r3,r3,112
    3284:	00800044 	movi	r2,1
    3288:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    328c:	00c24834 	movhi	r3,2336
    3290:	18c01c04 	addi	r3,r3,112
    3294:	008004c4 	movi	r2,19
    3298:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x055c);//a
    329c:	00c24834 	movhi	r3,2336
    32a0:	18c01c04 	addi	r3,r3,112
    32a4:	00815704 	movi	r2,1372
    32a8:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-7
    IOWR(CY7C67200_BASE,HPI_DATA,0x05b0); //c
    32ac:	00c24834 	movhi	r3,2336
    32b0:	18c01c04 	addi	r3,r3,112
    32b4:	00816c04 	movi	r2,1456
    32b8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
    32bc:	00c24834 	movhi	r3,2336
    32c0:	18c01c04 	addi	r3,r3,112
    32c4:	00800204 	movi	r2,8
    32c8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//560
    32cc:	00c24834 	movhi	r3,2336
    32d0:	18c01c04 	addi	r3,r3,112
    32d4:	0080a404 	movi	r2,656
    32d8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2 //data1
    32dc:	00c24834 	movhi	r3,2336
    32e0:	18c01c04 	addi	r3,r3,112
    32e4:	00801044 	movi	r2,65
    32e8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    32ec:	00c24834 	movhi	r3,2336
    32f0:	18c01c04 	addi	r3,r3,112
    32f4:	008004c4 	movi	r2,19
    32f8:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0568);//6
    32fc:	00c24834 	movhi	r3,2336
    3300:	18c01c04 	addi	r3,r3,112
    3304:	00815a04 	movi	r2,1384
    3308:	18800035 	stwio	r2,0(r3)
    
    //data phase IN-8
    IOWR(CY7C67200_BASE,HPI_DATA,0x05b8); //8
    330c:	00c24834 	movhi	r3,2336
    3310:	18c01c04 	addi	r3,r3,112
    3314:	00816e04 	movi	r2,1464
    3318:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0003);//a
    331c:	00c24834 	movhi	r3,2336
    3320:	18c01c04 	addi	r3,r3,112
    3324:	008000c4 	movi	r2,3
    3328:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
    332c:	00c24834 	movhi	r3,2336
    3330:	18c01c04 	addi	r3,r3,112
    3334:	0080a404 	movi	r2,656
    3338:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data1
    333c:	00c24834 	movhi	r3,2336
    3340:	18c01c04 	addi	r3,r3,112
    3344:	00800044 	movi	r2,1
    3348:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//570
    334c:	00c24834 	movhi	r3,2336
    3350:	18c01c04 	addi	r3,r3,112
    3354:	008004c4 	movi	r2,19
    3358:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0574);//2
    335c:	00c24834 	movhi	r3,2336
    3360:	18c01c04 	addi	r3,r3,112
    3364:	00815d04 	movi	r2,1396
    3368:	18800035 	stwio	r2,0(r3)
    
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //574
    336c:	00824834 	movhi	r2,2336
    3370:	10801c04 	addi	r2,r2,112
    3374:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
    3378:	00824834 	movhi	r2,2336
    337c:	10801c04 	addi	r2,r2,112
    3380:	10000035 	stwio	zero,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//8
    3384:	00c24834 	movhi	r3,2336
    3388:	18c01c04 	addi	r3,r3,112
    338c:	00808404 	movi	r2,528
    3390:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    3394:	00c24834 	movhi	r3,2336
    3398:	18c01c04 	addi	r3,r3,112
    339c:	00801044 	movi	r2,65
    33a0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    33a4:	00c24834 	movhi	r3,2336
    33a8:	18c01c04 	addi	r3,r3,112
    33ac:	008004c4 	movi	r2,19
    33b0:	18800035 	stwio	r2,0(r3)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
    33b4:	00824834 	movhi	r2,2336
    33b8:	10801c04 	addi	r2,r2,112
    33bc:	10000035 	stwio	zero,0(r2)
          
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    33c0:	01006c04 	movi	r4,432
    33c4:	01414004 	movi	r5,1280
    33c8:	0003c6c0 	call	3c6c <UsbWrite>
    usleep(10*1000);
    33cc:	0109c404 	movi	r4,10000
    33d0:	000e4600 	call	e460 <usleep>
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    
   //usleep(100*1000);
   //if no message
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    33d4:	00824834 	movhi	r2,2336
    33d8:	10801f04 	addi	r2,r2,124
    33dc:	10800037 	ldwio	r2,0(r2)
    33e0:	1080040c 	andi	r2,r2,16
    33e4:	1005003a 	cmpeq	r2,r2,zero
    33e8:	103ef51e 	bne	r2,zero,2fc0 <main+0x2ce4>
          
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    33ec:	01005104 	movi	r4,324
    33f0:	0003cb00 	call	3cb0 <UsbRead>
    33f4:	e0bffe8d 	sth	r2,-6(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    33f8:	01005104 	movi	r4,324
    33fc:	000b883a 	mov	r5,zero
    3400:	0003c6c0 	call	3c6c <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    3404:	00000d06 	br	343c <main+0x3160>
    {
       if(usb_ctl_val == 0x000)
    3408:	e0bffe8b 	ldhu	r2,-6(fp)
    340c:	1005003a 	cmpeq	r2,r2,zero
    3410:	1000041e 	bne	r2,zero,3424 <main+0x3148>
       {
       }
       else
       {
        printf("[SIE1 MSG]: SIE 1 msg reg is %x\n",usb_ctl_val);
    3414:	e17ffe8b 	ldhu	r5,-6(fp)
    3418:	01000074 	movhi	r4,1
    341c:	21073d04 	addi	r4,r4,7412
    3420:	00045080 	call	4508 <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    3424:	01005104 	movi	r4,324
    3428:	0003cb00 	call	3cb0 <UsbRead>
    342c:	e0bffe8d 	sth	r2,-6(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
    3430:	01005104 	movi	r4,324
    3434:	000b883a 	mov	r5,zero
    3438:	0003c6c0 	call	3c6c <UsbWrite>
    usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    343c:	e0bffe8b 	ldhu	r2,-6(fp)
    3440:	10840018 	cmpnei	r2,r2,4096
    3444:	103ff01e 	bne	r2,zero,3408 <main+0x312c>
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
    3448:	00c24834 	movhi	r3,2336
    344c:	18c01e04 	addi	r3,r3,120
    3450:	00814184 	movi	r2,1286
    3454:	18800035 	stwio	r2,0(r3)
    printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    3458:	00824834 	movhi	r2,2336
    345c:	10801c04 	addi	r2,r2,112
    3460:	11400037 	ldwio	r5,0(r2)
    3464:	01000074 	movhi	r4,1
    3468:	21074604 	addi	r4,r4,7448
    346c:	00045080 	call	4508 <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    3470:	00c24834 	movhi	r3,2336
    3474:	18c01e04 	addi	r3,r3,120
    3478:	00814204 	movi	r2,1288
    347c:	18800035 	stwio	r2,0(r3)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    3480:	00824834 	movhi	r2,2336
    3484:	10801c04 	addi	r2,r2,112
    3488:	10800037 	ldwio	r2,0(r2)
    348c:	e0bffe8d 	sth	r2,-6(fp)
    printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
    3490:	e17ffe8b 	ldhu	r5,-6(fp)
    3494:	01000074 	movhi	r4,1
    3498:	21075204 	addi	r4,r4,7496
    349c:	00045080 	call	4508 <printf>
    while (usb_ctl_val != 0x03) 
    34a0:	00001906 	br	3508 <main+0x322c>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
    34a4:	00824834 	movhi	r2,2336
    34a8:	10801f04 	addi	r2,r2,124
    34ac:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
    34b0:	01005104 	movi	r4,324
    34b4:	0003cb00 	call	3cb0 <UsbRead>
    34b8:	10bfffcc 	andi	r2,r2,65535
    34bc:	10840018 	cmpnei	r2,r2,4096
    34c0:	1000091e 	bne	r2,zero,34e8 <main+0x320c>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
    34c4:	01005104 	movi	r4,324
    34c8:	000b883a 	mov	r5,zero
    34cc:	0003c6c0 	call	3c6c <UsbWrite>
                   
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    34d0:	00824834 	movhi	r2,2336
    34d4:	10801f04 	addi	r2,r2,124
    34d8:	10800037 	ldwio	r2,0(r2)
    34dc:	1080040c 	andi	r2,r2,16
    34e0:	1005003a 	cmpeq	r2,r2,zero
    34e4:	103ffa1e 	bne	r2,zero,34d0 <main+0x31f4>
           {
            
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    34e8:	00c24834 	movhi	r3,2336
    34ec:	18c01e04 	addi	r3,r3,120
    34f0:	00814204 	movi	r2,1288
    34f4:	18800035 	stwio	r2,0(r3)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    34f8:	00824834 	movhi	r2,2336
    34fc:	10801c04 	addi	r2,r2,112
    3500:	10800037 	ldwio	r2,0(r2)
    3504:	e0bffe8d 	sth	r2,-6(fp)
    printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
    while (usb_ctl_val != 0x03) 
    3508:	e0bffe8b 	ldhu	r2,-6(fp)
    350c:	108000d8 	cmpnei	r2,r2,3
    3510:	103fe41e 	bne	r2,zero,34a4 <main+0x31c8>
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    }    
       
    printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) pass!----------------\n");
    3514:	01000074 	movhi	r4,1
    3518:	21075e04 	addi	r4,r4,7544
    351c:	00046200 	call	4620 <puts>
    

    
    //-----------------------------------get mouse x y button value------------------------------------------------//
    usleep(10000);
    3520:	0109c404 	movi	r4,10000
    3524:	000e4600 	call	e460 <usleep>
    while(1)
    {
      toggle++;
    3528:	e0bffa43 	ldbu	r2,-23(fp)
    352c:	10800044 	addi	r2,r2,1
    3530:	e0bffa45 	stb	r2,-23(fp)
      IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    3534:	00c24834 	movhi	r3,2336
    3538:	18c01e04 	addi	r3,r3,120
    353c:	00814004 	movi	r2,1280
    3540:	18800035 	stwio	r2,0(r3)
      //data phase IN-1
      IOWR(CY7C67200_BASE,HPI_DATA,0x051c); //500
    3544:	00c24834 	movhi	r3,2336
    3548:	18c01c04 	addi	r3,r3,112
    354c:	00814704 	movi	r2,1308
    3550:	18800035 	stwio	r2,0(r3)
      if(data_size ==8)
    3554:	e0bffa03 	ldbu	r2,-24(fp)
    3558:	10800218 	cmpnei	r2,r2,8
    355c:	1000051e 	bne	r2,zero,3574 <main+0x3298>
      {
          IOWR(CY7C67200_BASE,HPI_DATA,0x0006);//2 data length
    3560:	00c24834 	movhi	r3,2336
    3564:	18c01c04 	addi	r3,r3,112
    3568:	00800184 	movi	r2,6
    356c:	18800035 	stwio	r2,0(r3)
    3570:	00000506 	br	3588 <main+0x32ac>
      }
      else
      {
          IOWR(CY7C67200_BASE,HPI_DATA,0x000f & data_size);//2 data length
    3574:	e0bffa03 	ldbu	r2,-24(fp)
    3578:	10c003cc 	andi	r3,r2,15
    357c:	00824834 	movhi	r2,2336
    3580:	10801c04 	addi	r2,r2,112
    3584:	10c00035 	stwio	r3,0(r2)
      }
      IOWR(CY7C67200_BASE,HPI_DATA,0x0291);//4 //endpoint 1
    3588:	00c24834 	movhi	r3,2336
    358c:	18c01c04 	addi	r3,r3,112
    3590:	0080a444 	movi	r2,657
    3594:	18800035 	stwio	r2,0(r3)
      if(toggle%2)
    3598:	e0bffa43 	ldbu	r2,-23(fp)
    359c:	1080004c 	andi	r2,r2,1
    35a0:	10803fcc 	andi	r2,r2,255
    35a4:	1005003a 	cmpeq	r2,r2,zero
    35a8:	1000051e 	bne	r2,zero,35c0 <main+0x32e4>
      {
          IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data 1
    35ac:	00c24834 	movhi	r3,2336
    35b0:	18c01c04 	addi	r3,r3,112
    35b4:	00800044 	movi	r2,1
    35b8:	18800035 	stwio	r2,0(r3)
    35bc:	00000406 	br	35d0 <main+0x32f4>
      }
      else
      {
          IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6 //data 1
    35c0:	00c24834 	movhi	r3,2336
    35c4:	18c01c04 	addi	r3,r3,112
    35c8:	00801044 	movi	r2,65
    35cc:	18800035 	stwio	r2,0(r3)
      }
      IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    35d0:	00824834 	movhi	r2,2336
    35d4:	10801c04 	addi	r2,r2,112
    35d8:	00c004c4 	movi	r3,19
    35dc:	10c00035 	stwio	r3,0(r2)
      IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
    35e0:	00824834 	movhi	r2,2336
    35e4:	10801c04 	addi	r2,r2,112
    35e8:	10000035 	stwio	zero,0(r2)
      UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    35ec:	01006c04 	movi	r4,432
    35f0:	01414004 	movi	r5,1280
    35f4:	0003c6c0 	call	3c6c <UsbWrite>
      //usleep(10*1000);    
      while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    35f8:	00003306 	br	36c8 <main+0x33ec>
      {
          IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    35fc:	00c24834 	movhi	r3,2336
    3600:	18c01e04 	addi	r3,r3,120
    3604:	00814004 	movi	r2,1280
    3608:	18800035 	stwio	r2,0(r3)
          //data phase IN-1
          IOWR(CY7C67200_BASE,HPI_DATA,0x051c); //500
    360c:	00c24834 	movhi	r3,2336
    3610:	18c01c04 	addi	r3,r3,112
    3614:	00814704 	movi	r2,1308
    3618:	18800035 	stwio	r2,0(r3)
          if(data_size ==8)
    361c:	e0bffa03 	ldbu	r2,-24(fp)
    3620:	10800218 	cmpnei	r2,r2,8
    3624:	1000051e 	bne	r2,zero,363c <main+0x3360>
          {
             IOWR(CY7C67200_BASE,HPI_DATA,0x0006);//2 data length
    3628:	00c24834 	movhi	r3,2336
    362c:	18c01c04 	addi	r3,r3,112
    3630:	00800184 	movi	r2,6
    3634:	18800035 	stwio	r2,0(r3)
    3638:	00000506 	br	3650 <main+0x3374>
          }
          else
          {
             IOWR(CY7C67200_BASE,HPI_DATA,0x000f & data_size);//2 data length
    363c:	e0bffa03 	ldbu	r2,-24(fp)
    3640:	10c003cc 	andi	r3,r2,15
    3644:	00824834 	movhi	r2,2336
    3648:	10801c04 	addi	r2,r2,112
    364c:	10c00035 	stwio	r3,0(r2)
          }
          IOWR(CY7C67200_BASE,HPI_DATA,0x0291);//4 //endpoint 1
    3650:	00c24834 	movhi	r3,2336
    3654:	18c01c04 	addi	r3,r3,112
    3658:	0080a444 	movi	r2,657
    365c:	18800035 	stwio	r2,0(r3)
          if(toggle%2)
    3660:	e0bffa43 	ldbu	r2,-23(fp)
    3664:	1080004c 	andi	r2,r2,1
    3668:	10803fcc 	andi	r2,r2,255
    366c:	1005003a 	cmpeq	r2,r2,zero
    3670:	1000051e 	bne	r2,zero,3688 <main+0x33ac>
          {
            IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data 1
    3674:	00c24834 	movhi	r3,2336
    3678:	18c01c04 	addi	r3,r3,112
    367c:	00800044 	movi	r2,1
    3680:	18800035 	stwio	r2,0(r3)
    3684:	00000406 	br	3698 <main+0x33bc>
          }
          else
          {
            IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6 //data 1
    3688:	00c24834 	movhi	r3,2336
    368c:	18c01c04 	addi	r3,r3,112
    3690:	00801044 	movi	r2,65
    3694:	18800035 	stwio	r2,0(r3)
          }
          IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    3698:	00824834 	movhi	r2,2336
    369c:	10801c04 	addi	r2,r2,112
    36a0:	00c004c4 	movi	r3,19
    36a4:	10c00035 	stwio	r3,0(r2)
          IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
    36a8:	00824834 	movhi	r2,2336
    36ac:	10801c04 	addi	r2,r2,112
    36b0:	10000035 	stwio	zero,0(r2)
          UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    36b4:	01006c04 	movi	r4,432
    36b8:	01414004 	movi	r5,1280
    36bc:	0003c6c0 	call	3c6c <UsbWrite>
          usleep(10*1000);
    36c0:	0109c404 	movi	r4,10000
    36c4:	000e4600 	call	e460 <usleep>
      }
      IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
      IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
      UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
      //usleep(10*1000);    
      while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    36c8:	00824834 	movhi	r2,2336
    36cc:	10801f04 	addi	r2,r2,124
    36d0:	10800037 	ldwio	r2,0(r2)
    36d4:	1080040c 	andi	r2,r2,16
    36d8:	1005003a 	cmpeq	r2,r2,zero
    36dc:	103fc71e 	bne	r2,zero,35fc <main+0x3320>
          IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
          IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
          UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
          usleep(10*1000);
      }//end while
      usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    36e0:	01005104 	movi	r4,324
    36e4:	0003cb00 	call	3cb0 <UsbRead>
    36e8:	e0bffe8d 	sth	r2,-6(fp)
      UsbWrite(HPI_SIE1_MSG_ADR, 0);
    36ec:	01005104 	movi	r4,324
    36f0:	000b883a 	mov	r5,zero
    36f4:	0003c6c0 	call	3c6c <UsbWrite>
      while (usb_ctl_val != 0x1000)  //read sie1 msg register
    36f8:	00000d06 	br	3730 <main+0x3454>
      {
         if(usb_ctl_val == 0x000)
    36fc:	e0bffe8b 	ldhu	r2,-6(fp)
    3700:	1005003a 	cmpeq	r2,r2,zero
    3704:	1000041e 	bne	r2,zero,3718 <main+0x343c>
         {}
         else
         {
            printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    3708:	e17ffe8b 	ldhu	r5,-6(fp)
    370c:	01000074 	movhi	r4,1
    3710:	2105e004 	addi	r4,r4,6016
    3714:	00045080 	call	4508 <printf>
         }
         usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    3718:	01005104 	movi	r4,324
    371c:	0003cb00 	call	3cb0 <UsbRead>
    3720:	e0bffe8d 	sth	r2,-6(fp)
         UsbWrite(HPI_SIE1_MSG_ADR, 0);
    3724:	01005104 	movi	r4,324
    3728:	000b883a 	mov	r5,zero
    372c:	0003c6c0 	call	3c6c <UsbWrite>
          UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
          usleep(10*1000);
      }//end while
      usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
      UsbWrite(HPI_SIE1_MSG_ADR, 0);
      while (usb_ctl_val != 0x1000)  //read sie1 msg register
    3730:	e0bffe8b 	ldhu	r2,-6(fp)
    3734:	10840018 	cmpnei	r2,r2,4096
    3738:	103ff01e 	bne	r2,zero,36fc <main+0x3420>
            printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
         }
         usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
         UsbWrite(HPI_SIE1_MSG_ADR, 0);
      }
      IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    373c:	00c24834 	movhi	r3,2336
    3740:	18c01e04 	addi	r3,r3,120
    3744:	00814204 	movi	r2,1288
    3748:	18800035 	stwio	r2,0(r3)
      usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    374c:	00824834 	movhi	r2,2336
    3750:	10801c04 	addi	r2,r2,112
    3754:	10800037 	ldwio	r2,0(r2)
    3758:	e0bffe8d 	sth	r2,-6(fp)

      if (usb_ctl_val != 0x03) 
    375c:	e0bffe8b 	ldhu	r2,-6(fp)
    3760:	108000e0 	cmpeqi	r2,r2,3
    3764:	1000051e 	bne	r2,zero,377c <main+0x34a0>
      {
         pbutton = 0;
    3768:	e03ffa85 	stb	zero,-22(fp)
         dx = 0;
    376c:	e03ffb05 	stb	zero,-20(fp)
         dy = 0;
    3770:	e03ffac5 	stb	zero,-21(fp)
         button_value = 0;
    3774:	e03ffd15 	stw	zero,-12(fp)
    3778:	00009c06 	br	39ec <main+0x3710>
      }
    
      else
     {
        if(data_size != 8 )  
    377c:	e0bffa03 	ldbu	r2,-24(fp)
    3780:	10800220 	cmpeqi	r2,r2,8
    3784:	10004c1e 	bne	r2,zero,38b8 <main+0x35dc>
        {
          IOWR(CY7C67200_BASE,HPI_ADDR,0x051c); //the start address  
    3788:	00c24834 	movhi	r3,2336
    378c:	18c01e04 	addi	r3,r3,120
    3790:	00814704 	movi	r2,1308
    3794:	18800035 	stwio	r2,0(r3)
          button_value = IORD(CY7C67200_BASE,HPI_DATA);
    3798:	00824834 	movhi	r2,2336
    379c:	10801c04 	addi	r2,r2,112
    37a0:	10800037 	ldwio	r2,0(r2)
    37a4:	e0bffd15 	stw	r2,-12(fp)
          if((button_value & 0x00ff) ==0x0001)
    37a8:	e0bffd17 	ldw	r2,-12(fp)
    37ac:	10803fcc 	andi	r2,r2,255
    37b0:	10800058 	cmpnei	r2,r2,1
    37b4:	1000031e 	bne	r2,zero,37c4 <main+0x34e8>
          {
           //printf("left button\n");
            pbutton = 1;
    37b8:	00800044 	movi	r2,1
    37bc:	e0bffa85 	stb	r2,-22(fp)
    37c0:	00000806 	br	37e4 <main+0x3508>
          }
          else
          if((button_value& 0x00ff) ==0x0002)
    37c4:	e0bffd17 	ldw	r2,-12(fp)
    37c8:	10803fcc 	andi	r2,r2,255
    37cc:	10800098 	cmpnei	r2,r2,2
    37d0:	1000031e 	bne	r2,zero,37e0 <main+0x3504>
          {
           //printf("right button\n");
           pbutton = 2;    
    37d4:	00800084 	movi	r2,2
    37d8:	e0bffa85 	stb	r2,-22(fp)
    37dc:	00000106 	br	37e4 <main+0x3508>
          }
          else
          {
           pbutton = 0;
    37e0:	e03ffa85 	stb	zero,-22(fp)
          }
          if((signed char)((button_value>>8)&0x00ff) != 0)
    37e4:	e0bffd17 	ldw	r2,-12(fp)
    37e8:	1005d23a 	srai	r2,r2,8
    37ec:	1007883a 	mov	r3,r2
    37f0:	00bfffc4 	movi	r2,-1
    37f4:	1884703a 	and	r2,r3,r2
    37f8:	10803fcc 	andi	r2,r2,255
    37fc:	1080201c 	xori	r2,r2,128
    3800:	10bfe004 	addi	r2,r2,-128
    3804:	1005003a 	cmpeq	r2,r2,zero
    3808:	1000121e 	bne	r2,zero,3854 <main+0x3578>
          {
       
             if((signed char)((button_value>>8)&0x00ff )==dx)
    380c:	e0bffd17 	ldw	r2,-12(fp)
    3810:	1005d23a 	srai	r2,r2,8
    3814:	1007883a 	mov	r3,r2
    3818:	00bfffc4 	movi	r2,-1
    381c:	1884703a 	and	r2,r3,r2
    3820:	10c03fcc 	andi	r3,r2,255
    3824:	18c0201c 	xori	r3,r3,128
    3828:	18ffe004 	addi	r3,r3,-128
    382c:	e0bffb07 	ldb	r2,-20(fp)
    3830:	1880021e 	bne	r3,r2,383c <main+0x3560>
             {
                dx = 0;
    3834:	e03ffb05 	stb	zero,-20(fp)
    3838:	00000606 	br	3854 <main+0x3578>
             }
              else
             {
                dx = (signed char)((button_value>>8)&0x00ff);
    383c:	e0bffd17 	ldw	r2,-12(fp)
    3840:	1005d23a 	srai	r2,r2,8
    3844:	1007883a 	mov	r3,r2
    3848:	00bfffc4 	movi	r2,-1
    384c:	1884703a 	and	r2,r3,r2
    3850:	e0bffb05 	stb	r2,-20(fp)
             }
       
          }
       
       button_value = IORD(CY7C67200_BASE,HPI_DATA);
    3854:	00824834 	movhi	r2,2336
    3858:	10801c04 	addi	r2,r2,112
    385c:	10800037 	ldwio	r2,0(r2)
    3860:	e0bffd15 	stw	r2,-12(fp)
    
       if(button_value&0xff)
    3864:	e0bffd17 	ldw	r2,-12(fp)
    3868:	10803fcc 	andi	r2,r2,255
    386c:	1005003a 	cmpeq	r2,r2,zero
    3870:	10005e1e 	bne	r2,zero,39ec <main+0x3710>
       {
          //printf("dy value is %d\n",button_value&0xff);
          if((signed char)(button_value&0x00ff) == dy)
    3874:	e0bffd17 	ldw	r2,-12(fp)
    3878:	1007883a 	mov	r3,r2
    387c:	00bfffc4 	movi	r2,-1
    3880:	1884703a 	and	r2,r3,r2
    3884:	10c03fcc 	andi	r3,r2,255
    3888:	18c0201c 	xori	r3,r3,128
    388c:	18ffe004 	addi	r3,r3,-128
    3890:	e0bffac7 	ldb	r2,-21(fp)
    3894:	1880021e 	bne	r3,r2,38a0 <main+0x35c4>
          {
             dy = 0;
    3898:	e03ffac5 	stb	zero,-21(fp)
    389c:	00005306 	br	39ec <main+0x3710>
          }
          else
          {
             dy = (signed char)(button_value&0xff);
    38a0:	e0bffd17 	ldw	r2,-12(fp)
    38a4:	1007883a 	mov	r3,r2
    38a8:	00bfffc4 	movi	r2,-1
    38ac:	1884703a 	and	r2,r3,r2
    38b0:	e0bffac5 	stb	r2,-21(fp)
    38b4:	00004d06 	br	39ec <main+0x3710>
        
        }
      }
      else //>8
      {
        IOWR(CY7C67200_BASE,HPI_ADDR,0x051c); //the start address  
    38b8:	00c24834 	movhi	r3,2336
    38bc:	18c01e04 	addi	r3,r3,120
    38c0:	00814704 	movi	r2,1308
    38c4:	18800035 	stwio	r2,0(r3)
        button_value = IORD(CY7C67200_BASE,HPI_DATA);
    38c8:	00824834 	movhi	r2,2336
    38cc:	10801c04 	addi	r2,r2,112
    38d0:	10800037 	ldwio	r2,0(r2)
    38d4:	e0bffd15 	stw	r2,-12(fp)
         if(((button_value>>8) & 0x00ff) ==0x0001)
    38d8:	e0bffd17 	ldw	r2,-12(fp)
    38dc:	1005d23a 	srai	r2,r2,8
    38e0:	10803fcc 	andi	r2,r2,255
    38e4:	10800058 	cmpnei	r2,r2,1
    38e8:	1000031e 	bne	r2,zero,38f8 <main+0x361c>
        {
           //printf("left button\n");
           pbutton = 1;
    38ec:	00800044 	movi	r2,1
    38f0:	e0bffa85 	stb	r2,-22(fp)
    38f4:	00000906 	br	391c <main+0x3640>
        }
        else
        if(((button_value>>8) & 0x00ff) ==0x0002)
    38f8:	e0bffd17 	ldw	r2,-12(fp)
    38fc:	1005d23a 	srai	r2,r2,8
    3900:	10803fcc 	andi	r2,r2,255
    3904:	10800098 	cmpnei	r2,r2,2
    3908:	1000031e 	bne	r2,zero,3918 <main+0x363c>
        {
           //printf("right button\n");
           pbutton = 2;    
    390c:	00800084 	movi	r2,2
    3910:	e0bffa85 	stb	r2,-22(fp)
    3914:	00000106 	br	391c <main+0x3640>
        }
        else
        {
           pbutton = 0;
    3918:	e03ffa85 	stb	zero,-22(fp)
        }
        button_value = IORD(CY7C67200_BASE,HPI_DATA);
    391c:	00824834 	movhi	r2,2336
    3920:	10801c04 	addi	r2,r2,112
    3924:	10800037 	ldwio	r2,0(r2)
    3928:	e0bffd15 	stw	r2,-12(fp)
        if((signed char)((button_value>>8)&0x00ff) != 0)
    392c:	e0bffd17 	ldw	r2,-12(fp)
    3930:	1005d23a 	srai	r2,r2,8
    3934:	1007883a 	mov	r3,r2
    3938:	00bfffc4 	movi	r2,-1
    393c:	1884703a 	and	r2,r3,r2
    3940:	10803fcc 	andi	r2,r2,255
    3944:	1080201c 	xori	r2,r2,128
    3948:	10bfe004 	addi	r2,r2,-128
    394c:	1005003a 	cmpeq	r2,r2,zero
    3950:	1000121e 	bne	r2,zero,399c <main+0x36c0>
        {
           if((signed char)((button_value>>8)&0x00ff )==dy)
    3954:	e0bffd17 	ldw	r2,-12(fp)
    3958:	1005d23a 	srai	r2,r2,8
    395c:	1007883a 	mov	r3,r2
    3960:	00bfffc4 	movi	r2,-1
    3964:	1884703a 	and	r2,r3,r2
    3968:	10c03fcc 	andi	r3,r2,255
    396c:	18c0201c 	xori	r3,r3,128
    3970:	18ffe004 	addi	r3,r3,-128
    3974:	e0bffac7 	ldb	r2,-21(fp)
    3978:	1880021e 	bne	r3,r2,3984 <main+0x36a8>
           {
              dy = 0;
    397c:	e03ffac5 	stb	zero,-21(fp)
    3980:	00000606 	br	399c <main+0x36c0>
           }
           else
           {
              dy = (signed char)((button_value>>8)&0x00ff);
    3984:	e0bffd17 	ldw	r2,-12(fp)
    3988:	1005d23a 	srai	r2,r2,8
    398c:	1007883a 	mov	r3,r2
    3990:	00bfffc4 	movi	r2,-1
    3994:	1884703a 	and	r2,r3,r2
    3998:	e0bffac5 	stb	r2,-21(fp)
           }
       
        }
       
       if(button_value&0x0ff)
    399c:	e0bffd17 	ldw	r2,-12(fp)
    39a0:	10803fcc 	andi	r2,r2,255
    39a4:	1005003a 	cmpeq	r2,r2,zero
    39a8:	1000101e 	bne	r2,zero,39ec <main+0x3710>
       {
          //printf("dy value is %d\n",button_value&0xff);
          if((signed char)(button_value&0x00ff) == dx)
    39ac:	e0bffd17 	ldw	r2,-12(fp)
    39b0:	1007883a 	mov	r3,r2
    39b4:	00bfffc4 	movi	r2,-1
    39b8:	1884703a 	and	r2,r3,r2
    39bc:	10c03fcc 	andi	r3,r2,255
    39c0:	18c0201c 	xori	r3,r3,128
    39c4:	18ffe004 	addi	r3,r3,-128
    39c8:	e0bffb07 	ldb	r2,-20(fp)
    39cc:	1880021e 	bne	r3,r2,39d8 <main+0x36fc>
          {
             dx = 0;
    39d0:	e03ffb05 	stb	zero,-20(fp)
    39d4:	00000506 	br	39ec <main+0x3710>
          }
          else
          {
             dx = (signed char)(button_value&0xff);
    39d8:	e0bffd17 	ldw	r2,-12(fp)
    39dc:	1007883a 	mov	r3,r2
    39e0:	00bfffc4 	movi	r2,-1
    39e4:	1884703a 	and	r2,r3,r2
    39e8:	e0bffb05 	stb	r2,-20(fp)
        }
      }
        
    }    
     
    px = px + dx;
    39ec:	e0fffb07 	ldb	r3,-20(fp)
    39f0:	e0bffc0b 	ldhu	r2,-16(fp)
    39f4:	10c5883a 	add	r2,r2,r3
    39f8:	e0bffc0d 	sth	r2,-16(fp)
    py = py + dy;
    39fc:	e0fffac7 	ldb	r3,-21(fp)
    3a00:	e0bffb8b 	ldhu	r2,-18(fp)
    3a04:	10c5883a 	add	r2,r2,r3
    3a08:	e0bffb8d 	sth	r2,-18(fp)
    
    px=maxmin(px,639,0);
    3a0c:	e13ffc0b 	ldhu	r4,-16(fp)
    3a10:	01409fc4 	movi	r5,639
    3a14:	000d883a 	mov	r6,zero
    3a18:	00002000 	call	200 <maxmin>
    3a1c:	e0bffc0d 	sth	r2,-16(fp)
    py=maxmin(py,479,0);
    3a20:	e13ffb8b 	ldhu	r4,-18(fp)
    3a24:	014077c4 	movi	r5,479
    3a28:	000d883a 	mov	r6,zero
    3a2c:	00002000 	call	200 <maxmin>
    3a30:	e0bffb8d 	sth	r2,-18(fp)
    
    SEG7_Hex((px<<16)+py,0);
    3a34:	e0bffc0b 	ldhu	r2,-16(fp)
    3a38:	1006943a 	slli	r3,r2,16
    3a3c:	e0bffb8b 	ldhu	r2,-18(fp)
    3a40:	1885883a 	add	r2,r3,r2
    3a44:	1009883a 	mov	r4,r2
    3a48:	000b883a 	mov	r5,zero
    3a4c:	00040c40 	call	40c4 <SEG7_Hex>
    IOWR(LEDR_BASE,0,px);
    3a50:	e0fffc0b 	ldhu	r3,-16(fp)
    3a54:	00824834 	movhi	r2,2336
    3a58:	10801404 	addi	r2,r2,80
    3a5c:	10c00035 	stwio	r3,0(r2)
    IOWR(LEDG_BASE,0,py);
    3a60:	e0fffb8b 	ldhu	r3,-18(fp)
    3a64:	00824834 	movhi	r2,2336
    3a68:	10801004 	addi	r2,r2,64
    3a6c:	10c00035 	stwio	r3,0(r2)

    Set_Cursor_XY(px,py);
    3a70:	e13ffc0b 	ldhu	r4,-16(fp)
    3a74:	e17ffb8b 	ldhu	r5,-18(fp)
    3a78:	00042700 	call	4270 <Set_Cursor_XY>
    if(pbutton==1)
    3a7c:	e0bffa83 	ldbu	r2,-22(fp)
    3a80:	10800058 	cmpnei	r2,r2,1
    3a84:	10000d1e 	bne	r2,zero,3abc <main+0x37e0>
    Vga_Set_Pixel(VPG_BASE,px,py);
    3a88:	e0bffb8b 	ldhu	r2,-18(fp)
    3a8c:	10c0a024 	muli	r3,r2,640
    3a90:	e0bffc0b 	ldhu	r2,-16(fp)
    3a94:	1885883a 	add	r2,r3,r2
    3a98:	1085883a 	add	r2,r2,r2
    3a9c:	1085883a 	add	r2,r2,r2
    3aa0:	1007883a 	mov	r3,r2
    3aa4:	00824034 	movhi	r2,2304
    3aa8:	1885883a 	add	r2,r3,r2
    3aac:	1007883a 	mov	r3,r2
    3ab0:	00800044 	movi	r2,1
    3ab4:	18800035 	stwio	r2,0(r3)
    3ab8:	00000d06 	br	3af0 <main+0x3814>
    else if(pbutton==2)
    3abc:	e0bffa83 	ldbu	r2,-22(fp)
    3ac0:	10800098 	cmpnei	r2,r2,2
    3ac4:	10000a1e 	bne	r2,zero,3af0 <main+0x3814>
    Vga_Clr_Pixel(VPG_BASE,px,py);
    3ac8:	e0bffb8b 	ldhu	r2,-18(fp)
    3acc:	10c0a024 	muli	r3,r2,640
    3ad0:	e0bffc0b 	ldhu	r2,-16(fp)
    3ad4:	1885883a 	add	r2,r3,r2
    3ad8:	1085883a 	add	r2,r2,r2
    3adc:	1085883a 	add	r2,r2,r2
    3ae0:	1007883a 	mov	r3,r2
    3ae4:	00824034 	movhi	r2,2304
    3ae8:	1885883a 	add	r2,r3,r2
    3aec:	10000035 	stwio	zero,0(r2)
    
    printf("\n[MOUSE XY]:%d, %d", px, py);
    3af0:	e17ffc0b 	ldhu	r5,-16(fp)
    3af4:	e1bffb8b 	ldhu	r6,-18(fp)
    3af8:	01000074 	movhi	r4,1
    3afc:	21077204 	addi	r4,r4,7624
    3b00:	00045080 	call	4508 <printf>
    usleep(5*1000);
    3b04:	0104e204 	movi	r4,5000
    3b08:	000e4600 	call	e460 <usleep>
    //USB hot plug routine
    usb_ctl_val = UsbRead(ctl_reg);
    3b0c:	d0a6f78b 	ldhu	r2,-25634(gp)
    3b10:	113fffcc 	andi	r4,r2,65535
    3b14:	0003cb00 	call	3cb0 <UsbRead>
    3b18:	e0bffe8d 	sth	r2,-6(fp)
    usleep(5*1000);
    3b1c:	0104e204 	movi	r4,5000
    3b20:	000e4600 	call	e460 <usleep>
    usb_ctl_val = UsbRead(ctl_reg);
    3b24:	d0a6f78b 	ldhu	r2,-25634(gp)
    3b28:	113fffcc 	andi	r4,r2,65535
    3b2c:	0003cb00 	call	3cb0 <UsbRead>
    3b30:	e0bffe8d 	sth	r2,-6(fp)
    usleep(5*1000);
    3b34:	0104e204 	movi	r4,5000
    3b38:	000e4600 	call	e460 <usleep>
    usb_ctl_val = UsbRead(ctl_reg);
    3b3c:	d0a6f78b 	ldhu	r2,-25634(gp)
    3b40:	113fffcc 	andi	r4,r2,65535
    3b44:	0003cb00 	call	3cb0 <UsbRead>
    3b48:	e0bffe8d 	sth	r2,-6(fp)
    usleep(5*1000);
    3b4c:	0104e204 	movi	r4,5000
    3b50:	000e4600 	call	e460 <usleep>
    usb_ctl_val = UsbRead(ctl_reg);
    3b54:	d0a6f78b 	ldhu	r2,-25634(gp)
    3b58:	113fffcc 	andi	r4,r2,65535
    3b5c:	0003cb00 	call	3cb0 <UsbRead>
    3b60:	e0bffe8d 	sth	r2,-6(fp)
    usleep(5*1000);
    3b64:	0104e204 	movi	r4,5000
    3b68:	000e4600 	call	e460 <usleep>
    usb_ctl_val = UsbRead(ctl_reg);
    3b6c:	d0a6f78b 	ldhu	r2,-25634(gp)
    3b70:	113fffcc 	andi	r4,r2,65535
    3b74:	0003cb00 	call	3cb0 <UsbRead>
    3b78:	e0bffe8d 	sth	r2,-6(fp)
    usleep(5*1000);
    3b7c:	0104e204 	movi	r4,5000
    3b80:	000e4600 	call	e460 <usleep>
    usb_ctl_val = UsbRead(ctl_reg);
    3b84:	d0a6f78b 	ldhu	r2,-25634(gp)
    3b88:	113fffcc 	andi	r4,r2,65535
    3b8c:	0003cb00 	call	3cb0 <UsbRead>
    3b90:	e0bffe8d 	sth	r2,-6(fp)
    usleep(5*1000);
    3b94:	0104e204 	movi	r4,5000
    3b98:	000e4600 	call	e460 <usleep>

    if(!(usb_ctl_val & no_device))
    3b9c:	d0e6f70b 	ldhu	r3,-25636(gp)
    3ba0:	e0bffe8b 	ldhu	r2,-6(fp)
    3ba4:	1884703a 	and	r2,r3,r2
    3ba8:	10bfffcc 	andi	r2,r2,65535
    3bac:	1004c03a 	cmpne	r2,r2,zero
    3bb0:	1000061e 	bne	r2,zero,3bcc <main+0x38f0>
    {
       printf("\n[INFO]: the mouse has been removed!!! \n");
    3bb4:	01000074 	movhi	r4,1
    3bb8:	21077704 	addi	r4,r4,7644
    3bbc:	00046200 	call	4620 <puts>
       printf("[INFO]: please insert again!!! \n");
    3bc0:	01000074 	movhi	r4,1
    3bc4:	21078104 	addi	r4,r4,7684
    3bc8:	00046200 	call	4620 <puts>
    };
    usleep(5000);
    3bcc:	0104e204 	movi	r4,5000
    3bd0:	000e4600 	call	e460 <usleep>
    usb_ctl_val = UsbRead(ctl_reg);
    3bd4:	d0a6f78b 	ldhu	r2,-25634(gp)
    3bd8:	113fffcc 	andi	r4,r2,65535
    3bdc:	0003cb00 	call	3cb0 <UsbRead>
    3be0:	e0bffe8d 	sth	r2,-6(fp)
    while (!(usb_ctl_val & no_device))
    3be4:	00001a06 	br	3c50 <main+0x3974>
    {
       
       usb_ctl_val = UsbRead(ctl_reg);
    3be8:	d0a6f78b 	ldhu	r2,-25634(gp)
    3bec:	113fffcc 	andi	r4,r2,65535
    3bf0:	0003cb00 	call	3cb0 <UsbRead>
    3bf4:	e0bffe8d 	sth	r2,-6(fp)
       usleep(5*1000);
    3bf8:	0104e204 	movi	r4,5000
    3bfc:	000e4600 	call	e460 <usleep>
       usb_ctl_val = UsbRead(ctl_reg);
    3c00:	d0a6f78b 	ldhu	r2,-25634(gp)
    3c04:	113fffcc 	andi	r4,r2,65535
    3c08:	0003cb00 	call	3cb0 <UsbRead>
    3c0c:	e0bffe8d 	sth	r2,-6(fp)
       usleep(5*1000);
    3c10:	0104e204 	movi	r4,5000
    3c14:	000e4600 	call	e460 <usleep>
       usb_ctl_val = UsbRead(ctl_reg);
    3c18:	d0a6f78b 	ldhu	r2,-25634(gp)
    3c1c:	113fffcc 	andi	r4,r2,65535
    3c20:	0003cb00 	call	3cb0 <UsbRead>
    3c24:	e0bffe8d 	sth	r2,-6(fp)
       usleep(5*1000);
    3c28:	0104e204 	movi	r4,5000
    3c2c:	000e4600 	call	e460 <usleep>

       if(usb_ctl_val & no_device)
    3c30:	d0e6f70b 	ldhu	r3,-25636(gp)
    3c34:	e0bffe8b 	ldhu	r2,-6(fp)
    3c38:	1884703a 	and	r2,r3,r2
    3c3c:	10bfffcc 	andi	r2,r2,65535
    3c40:	1004c03a 	cmpne	r2,r2,zero
    3c44:	1031d31e 	bne	r2,zero,394 <main+0xb8>
         goto USB_HOT_PLUG;
       
       usleep(200);
    3c48:	01003204 	movi	r4,200
    3c4c:	000e4600 	call	e460 <usleep>
       printf("\n[INFO]: the mouse has been removed!!! \n");
       printf("[INFO]: please insert again!!! \n");
    };
    usleep(5000);
    usb_ctl_val = UsbRead(ctl_reg);
    while (!(usb_ctl_val & no_device))
    3c50:	d0e6f70b 	ldhu	r3,-25636(gp)
    3c54:	e0bffe8b 	ldhu	r2,-6(fp)
    3c58:	1884703a 	and	r2,r3,r2
    3c5c:	10bfffcc 	andi	r2,r2,65535
    3c60:	1005003a 	cmpeq	r2,r2,zero
    3c64:	103fe01e 	bne	r2,zero,3be8 <main+0x390c>
       
       usleep(200);

    }
    
    }//end while
    3c68:	003e2f06 	br	3528 <main+0x324c>

00003c6c <UsbWrite>:
*
* @note     None
*
******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
    3c6c:	defffd04 	addi	sp,sp,-12
    3c70:	df000215 	stw	fp,8(sp)
    3c74:	df000204 	addi	fp,sp,8
    3c78:	e13ffe0d 	sth	r4,-8(fp)
    3c7c:	e17fff0d 	sth	r5,-4(fp)
    //XIo_Out16(USB_ADDRESS, Address);
    IOWR(CY7C67200_BASE,HPI_ADDR,Address);
    3c80:	e0fffe0b 	ldhu	r3,-8(fp)
    3c84:	00824834 	movhi	r2,2336
    3c88:	10801e04 	addi	r2,r2,120
    3c8c:	10c00035 	stwio	r3,0(r2)
    //usleep(10);
    
    //XIo_Out16(USB_DATA, Data);
    IOWR(CY7C67200_BASE,HPI_DATA,Data); 
    3c90:	e0ffff0b 	ldhu	r3,-4(fp)
    3c94:	00824834 	movhi	r2,2336
    3c98:	10801c04 	addi	r2,r2,112
    3c9c:	10c00035 	stwio	r3,0(r2)
}
    3ca0:	e037883a 	mov	sp,fp
    3ca4:	df000017 	ldw	fp,0(sp)
    3ca8:	dec00104 	addi	sp,sp,4
    3cac:	f800283a 	ret

00003cb0 <UsbRead>:
*
* @note     None
*
******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
    3cb0:	defffe04 	addi	sp,sp,-8
    3cb4:	df000115 	stw	fp,4(sp)
    3cb8:	df000104 	addi	fp,sp,4
    3cbc:	e13fff0d 	sth	r4,-4(fp)
    //XIo_Out16(HPI_ADDR, Address);
    IOWR(CY7C67200_BASE,HPI_ADDR,Address);
    3cc0:	e0ffff0b 	ldhu	r3,-4(fp)
    3cc4:	00824834 	movhi	r2,2336
    3cc8:	10801e04 	addi	r2,r2,120
    3ccc:	10c00035 	stwio	r3,0(r2)
    //usleep(20);
    return IORD(CY7C67200_BASE,HPI_DATA);
    3cd0:	00824834 	movhi	r2,2336
    3cd4:	10801c04 	addi	r2,r2,112
    3cd8:	10800037 	ldwio	r2,0(r2)
    3cdc:	10bfffcc 	andi	r2,r2,65535
}
    3ce0:	e037883a 	mov	sp,fp
    3ce4:	df000017 	ldw	fp,0(sp)
    3ce8:	dec00104 	addi	sp,sp,4
    3cec:	f800283a 	ret

00003cf0 <UsbSoftReset>:
*
* @note     None
*
******************************************************************************/
void UsbSoftReset()
{
    3cf0:	defffe04 	addi	sp,sp,-8
    3cf4:	dfc00115 	stw	ra,4(sp)
    3cf8:	df000015 	stw	fp,0(sp)
    3cfc:	d839883a 	mov	fp,sp
    //XIo_Out16(USB_MAILBOX, COMM_RESET);
    IOWR(CY7C67200_BASE,HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
    3d00:	00c24834 	movhi	r3,2336
    3d04:	18c01d04 	addi	r3,r3,116
    3d08:	00be9414 	movui	r2,64080
    3d0c:	18800035 	stwio	r2,0(r3)
    usleep(100000);
    3d10:	010000b4 	movhi	r4,2
    3d14:	2121a804 	addi	r4,r4,-31072
    3d18:	000e4600 	call	e460 <usleep>
    printf("[USB INIT]:reset finished!\n");
    3d1c:	01000074 	movhi	r4,1
    3d20:	21078904 	addi	r4,r4,7716
    3d24:	00046200 	call	4620 <puts>

    usleep(500000);
    3d28:	01000234 	movhi	r4,8
    3d2c:	21284804 	addi	r4,r4,-24288
    3d30:	000e4600 	call	e460 <usleep>
    printf("[USB INIT]:Clear up the interrupt\r\n");
    3d34:	01000074 	movhi	r4,1
    3d38:	21079004 	addi	r4,r4,7744
    3d3c:	00046200 	call	4620 <puts>
    IORD(CY7C67200_BASE,HPI_MAILBOX);
    3d40:	00824834 	movhi	r2,2336
    3d44:	10801d04 	addi	r2,r2,116
    3d48:	10800037 	ldwio	r2,0(r2)
    IORD(CY7C67200_BASE,HPI_STATUS);
    3d4c:	00824834 	movhi	r2,2336
    3d50:	10801f04 	addi	r2,r2,124
    3d54:	10800037 	ldwio	r2,0(r2)

    // Had to add the write due to a bug in BIOS where they overwrite
    // the mailbox after initialization with garbage.  The read clears
    // any pending interrupts.
    UsbRead (HPI_SIE1_MSG_ADR);
    3d58:	01005104 	movi	r4,324
    3d5c:	0003cb00 	call	3cb0 <UsbRead>
    UsbWrite (HPI_SIE1_MSG_ADR, 0);
    3d60:	01005104 	movi	r4,324
    3d64:	000b883a 	mov	r5,zero
    3d68:	0003c6c0 	call	3c6c <UsbWrite>
    UsbRead (HPI_SIE2_MSG_ADR);
    3d6c:	01005204 	movi	r4,328
    3d70:	0003cb00 	call	3cb0 <UsbRead>
    UsbWrite (HPI_SIE2_MSG_ADR, 0);
    3d74:	01005204 	movi	r4,328
    3d78:	000b883a 	mov	r5,zero
    3d7c:	0003c6c0 	call	3c6c <UsbWrite>

    UsbWrite (HOST1_STAT_REG, 0xFFFF);
    3d80:	01302414 	movui	r4,49296
    3d84:	017fffd4 	movui	r5,65535
    3d88:	0003c6c0 	call	3c6c <UsbWrite>
    UsbWrite (HOST2_STAT_REG, 0xFFFF);
    3d8c:	01302c14 	movui	r4,49328
    3d90:	017fffd4 	movui	r5,65535
    3d94:	0003c6c0 	call	3c6c <UsbWrite>
}
    3d98:	e037883a 	mov	sp,fp
    3d9c:	dfc00117 	ldw	ra,4(sp)
    3da0:	df000017 	ldw	fp,0(sp)
    3da4:	dec00204 	addi	sp,sp,8
    3da8:	f800283a 	ret

00003dac <LCD_Init>:
#include <io.h>
#include "system.h"
#include "LCD.h"
//-------------------------------------------------------------------------
void LCD_Init()
{
    3dac:	defffe04 	addi	sp,sp,-8
    3db0:	dfc00115 	stw	ra,4(sp)
    3db4:	df000015 	stw	fp,0(sp)
    3db8:	d839883a 	mov	fp,sp
  lcd_write_cmd(LCD_BASE,0x38); 
    3dbc:	00c24834 	movhi	r3,2336
    3dc0:	18c01804 	addi	r3,r3,96
    3dc4:	00800e04 	movi	r2,56
    3dc8:	18800035 	stwio	r2,0(r3)
  usleep(2000);
    3dcc:	0101f404 	movi	r4,2000
    3dd0:	000e4600 	call	e460 <usleep>
  lcd_write_cmd(LCD_BASE,0x0C);
    3dd4:	00c24834 	movhi	r3,2336
    3dd8:	18c01804 	addi	r3,r3,96
    3ddc:	00800304 	movi	r2,12
    3de0:	18800035 	stwio	r2,0(r3)
  usleep(2000);
    3de4:	0101f404 	movi	r4,2000
    3de8:	000e4600 	call	e460 <usleep>
  lcd_write_cmd(LCD_BASE,0x01);
    3dec:	00c24834 	movhi	r3,2336
    3df0:	18c01804 	addi	r3,r3,96
    3df4:	00800044 	movi	r2,1
    3df8:	18800035 	stwio	r2,0(r3)
  usleep(2000);
    3dfc:	0101f404 	movi	r4,2000
    3e00:	000e4600 	call	e460 <usleep>
  lcd_write_cmd(LCD_BASE,0x06);
    3e04:	00c24834 	movhi	r3,2336
    3e08:	18c01804 	addi	r3,r3,96
    3e0c:	00800184 	movi	r2,6
    3e10:	18800035 	stwio	r2,0(r3)
  usleep(2000);
    3e14:	0101f404 	movi	r4,2000
    3e18:	000e4600 	call	e460 <usleep>
  lcd_write_cmd(LCD_BASE,0x80);
    3e1c:	00c24834 	movhi	r3,2336
    3e20:	18c01804 	addi	r3,r3,96
    3e24:	00802004 	movi	r2,128
    3e28:	18800035 	stwio	r2,0(r3)
  usleep(2000);
    3e2c:	0101f404 	movi	r4,2000
    3e30:	000e4600 	call	e460 <usleep>
}
    3e34:	e037883a 	mov	sp,fp
    3e38:	dfc00117 	ldw	ra,4(sp)
    3e3c:	df000017 	ldw	fp,0(sp)
    3e40:	dec00204 	addi	sp,sp,8
    3e44:	f800283a 	ret

00003e48 <LCD_Show_Text>:
//-------------------------------------------------------------------------
void LCD_Show_Text(char* Text)
{
    3e48:	defffb04 	addi	sp,sp,-20
    3e4c:	dfc00415 	stw	ra,16(sp)
    3e50:	df000315 	stw	fp,12(sp)
    3e54:	dc000215 	stw	r16,8(sp)
    3e58:	df000204 	addi	fp,sp,8
    3e5c:	e13fff15 	stw	r4,-4(fp)
  int i;
  for(i=0;i<strlen(Text);i++)
    3e60:	e03ffe15 	stw	zero,-8(fp)
    3e64:	00001006 	br	3ea8 <LCD_Show_Text+0x60>
  {
    lcd_write_data(LCD_BASE,Text[i]);
    3e68:	e0bffe17 	ldw	r2,-8(fp)
    3e6c:	1007883a 	mov	r3,r2
    3e70:	e0bfff17 	ldw	r2,-4(fp)
    3e74:	1885883a 	add	r2,r3,r2
    3e78:	10800003 	ldbu	r2,0(r2)
    3e7c:	10c03fcc 	andi	r3,r2,255
    3e80:	18c0201c 	xori	r3,r3,128
    3e84:	18ffe004 	addi	r3,r3,-128
    3e88:	00824834 	movhi	r2,2336
    3e8c:	10801a04 	addi	r2,r2,104
    3e90:	10c00035 	stwio	r3,0(r2)
    usleep(2000);
    3e94:	0101f404 	movi	r4,2000
    3e98:	000e4600 	call	e460 <usleep>
}
//-------------------------------------------------------------------------
void LCD_Show_Text(char* Text)
{
  int i;
  for(i=0;i<strlen(Text);i++)
    3e9c:	e0bffe17 	ldw	r2,-8(fp)
    3ea0:	10800044 	addi	r2,r2,1
    3ea4:	e0bffe15 	stw	r2,-8(fp)
    3ea8:	e43ffe17 	ldw	r16,-8(fp)
    3eac:	e13fff17 	ldw	r4,-4(fp)
    3eb0:	00046340 	call	4634 <strlen>
    3eb4:	80bfec36 	bltu	r16,r2,3e68 <LCD_Show_Text+0x20>
  {
    lcd_write_data(LCD_BASE,Text[i]);
    usleep(2000);
  }
}
    3eb8:	e037883a 	mov	sp,fp
    3ebc:	dfc00217 	ldw	ra,8(sp)
    3ec0:	df000117 	ldw	fp,4(sp)
    3ec4:	dc000017 	ldw	r16,0(sp)
    3ec8:	dec00304 	addi	sp,sp,12
    3ecc:	f800283a 	ret

00003ed0 <LCD_Line2>:
//-------------------------------------------------------------------------
void LCD_Line2()
{
    3ed0:	defffe04 	addi	sp,sp,-8
    3ed4:	dfc00115 	stw	ra,4(sp)
    3ed8:	df000015 	stw	fp,0(sp)
    3edc:	d839883a 	mov	fp,sp
  lcd_write_cmd(LCD_BASE,0xC0);
    3ee0:	00c24834 	movhi	r3,2336
    3ee4:	18c01804 	addi	r3,r3,96
    3ee8:	00803004 	movi	r2,192
    3eec:	18800035 	stwio	r2,0(r3)
  usleep(2000);
    3ef0:	0101f404 	movi	r4,2000
    3ef4:	000e4600 	call	e460 <usleep>
}
    3ef8:	e037883a 	mov	sp,fp
    3efc:	dfc00117 	ldw	ra,4(sp)
    3f00:	df000017 	ldw	fp,0(sp)
    3f04:	dec00204 	addi	sp,sp,8
    3f08:	f800283a 	ret

00003f0c <LCD_Test>:
//-------------------------------------------------------------------------
void LCD_Test()
{
    3f0c:	defff604 	addi	sp,sp,-40
    3f10:	dfc00915 	stw	ra,36(sp)
    3f14:	df000815 	stw	fp,32(sp)
    3f18:	df000804 	addi	fp,sp,32
  char Text1[16] = "Altera DE2 Board";
    3f1c:	00c00074 	movhi	r3,1
    3f20:	18c79904 	addi	r3,r3,7780
    3f24:	18800017 	ldw	r2,0(r3)
    3f28:	e0bff815 	stw	r2,-32(fp)
    3f2c:	18800117 	ldw	r2,4(r3)
    3f30:	e0bff915 	stw	r2,-28(fp)
    3f34:	18800217 	ldw	r2,8(r3)
    3f38:	e0bffa15 	stw	r2,-24(fp)
    3f3c:	18800317 	ldw	r2,12(r3)
    3f40:	e0bffb15 	stw	r2,-20(fp)
  char Text2[16] = " USB Paintbrush ";
    3f44:	00c00074 	movhi	r3,1
    3f48:	18c79e04 	addi	r3,r3,7800
    3f4c:	18800017 	ldw	r2,0(r3)
    3f50:	e0bffc15 	stw	r2,-16(fp)
    3f54:	18800117 	ldw	r2,4(r3)
    3f58:	e0bffd15 	stw	r2,-12(fp)
    3f5c:	18800217 	ldw	r2,8(r3)
    3f60:	e0bffe15 	stw	r2,-8(fp)
    3f64:	18800317 	ldw	r2,12(r3)
    3f68:	e0bfff15 	stw	r2,-4(fp)
  //  Initial LCD
  LCD_Init();
    3f6c:	0003dac0 	call	3dac <LCD_Init>
  //  Show Text to LCD
  LCD_Show_Text(Text1);
    3f70:	e13ff804 	addi	r4,fp,-32
    3f74:	0003e480 	call	3e48 <LCD_Show_Text>
  //  Change Line2
  LCD_Line2();
    3f78:	0003ed00 	call	3ed0 <LCD_Line2>
  //  Show Text to LCD
  LCD_Show_Text(Text2);
    3f7c:	e13ffc04 	addi	r4,fp,-16
    3f80:	0003e480 	call	3e48 <LCD_Show_Text>
}
    3f84:	e037883a 	mov	sp,fp
    3f88:	dfc00117 	ldw	ra,4(sp)
    3f8c:	df000017 	ldw	fp,0(sp)
    3f90:	dec00204 	addi	sp,sp,8
    3f94:	f800283a 	ret

00003f98 <SEG7_Clear>:
static    unsigned char szMap[] = {
        63, 6, 91, 79, 102, 109, 125, 7, 
        127, 111, 119, 124, 57, 94, 121, 113
    };  // 0,1,2,....9, a, b, c, d, e, f
    
void SEG7_Clear(void){
    3f98:	defffe04 	addi	sp,sp,-8
    3f9c:	df000115 	stw	fp,4(sp)
    3fa0:	df000104 	addi	fp,sp,4
    int i;
    for(i=0;i<SEG7_NUM;i++){
    3fa4:	e03fff15 	stw	zero,-4(fp)
    3fa8:	00000a06 	br	3fd4 <SEG7_Clear+0x3c>
        SEG7_SET(i, 0x00);
    3fac:	e0bfff17 	ldw	r2,-4(fp)
    3fb0:	1085883a 	add	r2,r2,r2
    3fb4:	1085883a 	add	r2,r2,r2
    3fb8:	1007883a 	mov	r3,r2
    3fbc:	00824834 	movhi	r2,2336
    3fc0:	1885883a 	add	r2,r3,r2
    3fc4:	10000035 	stwio	zero,0(r2)
        127, 111, 119, 124, 57, 94, 121, 113
    };  // 0,1,2,....9, a, b, c, d, e, f
    
void SEG7_Clear(void){
    int i;
    for(i=0;i<SEG7_NUM;i++){
    3fc8:	e0bfff17 	ldw	r2,-4(fp)
    3fcc:	10800044 	addi	r2,r2,1
    3fd0:	e0bfff15 	stw	r2,-4(fp)
    3fd4:	e0bfff17 	ldw	r2,-4(fp)
    3fd8:	10800210 	cmplti	r2,r2,8
    3fdc:	103ff31e 	bne	r2,zero,3fac <SEG7_Clear+0x14>
        SEG7_SET(i, 0x00);
    }        
}
    3fe0:	e037883a 	mov	sp,fp
    3fe4:	df000017 	ldw	fp,0(sp)
    3fe8:	dec00104 	addi	sp,sp,4
    3fec:	f800283a 	ret

00003ff0 <SEG7_Full>:
void SEG7_Full(void){
    3ff0:	defffe04 	addi	sp,sp,-8
    3ff4:	df000115 	stw	fp,4(sp)
    3ff8:	df000104 	addi	fp,sp,4
    int i;
    for(i=0;i<SEG7_NUM;i++){
    3ffc:	e03fff15 	stw	zero,-4(fp)
    4000:	00000c06 	br	4034 <SEG7_Full+0x44>
        SEG7_SET(i, 0xFF);
    4004:	e0bfff17 	ldw	r2,-4(fp)
    4008:	1085883a 	add	r2,r2,r2
    400c:	1085883a 	add	r2,r2,r2
    4010:	1007883a 	mov	r3,r2
    4014:	00824834 	movhi	r2,2336
    4018:	1885883a 	add	r2,r3,r2
    401c:	1007883a 	mov	r3,r2
    4020:	00803fc4 	movi	r2,255
    4024:	18800035 	stwio	r2,0(r3)
        SEG7_SET(i, 0x00);
    }        
}
void SEG7_Full(void){
    int i;
    for(i=0;i<SEG7_NUM;i++){
    4028:	e0bfff17 	ldw	r2,-4(fp)
    402c:	10800044 	addi	r2,r2,1
    4030:	e0bfff15 	stw	r2,-4(fp)
    4034:	e0bfff17 	ldw	r2,-4(fp)
    4038:	10800210 	cmplti	r2,r2,8
    403c:	103ff11e 	bne	r2,zero,4004 <SEG7_Full+0x14>
        SEG7_SET(i, 0xFF);
    }        
}
    4040:	e037883a 	mov	sp,fp
    4044:	df000017 	ldw	fp,0(sp)
    4048:	dec00104 	addi	sp,sp,4
    404c:	f800283a 	ret

00004050 <SEG7_Number>:

void SEG7_Number(void){
    4050:	defffe04 	addi	sp,sp,-8
    4054:	df000115 	stw	fp,4(sp)
    4058:	df000104 	addi	fp,sp,4
    int i;
    for(i=0;i<SEG7_NUM;i++){
    405c:	e03fff15 	stw	zero,-4(fp)
    4060:	00001106 	br	40a8 <SEG7_Number+0x58>
        SEG7_SET(i, szMap[i]);
    4064:	e0bfff17 	ldw	r2,-4(fp)
    4068:	1085883a 	add	r2,r2,r2
    406c:	1085883a 	add	r2,r2,r2
    4070:	1007883a 	mov	r3,r2
    4074:	00824834 	movhi	r2,2336
    4078:	1889883a 	add	r4,r3,r2
    407c:	e0ffff17 	ldw	r3,-4(fp)
    4080:	00800074 	movhi	r2,1
    4084:	10891604 	addi	r2,r2,9304
    4088:	10c5883a 	add	r2,r2,r3
    408c:	10800003 	ldbu	r2,0(r2)
    4090:	10c03fcc 	andi	r3,r2,255
    4094:	2005883a 	mov	r2,r4
    4098:	10c00035 	stwio	r3,0(r2)
    }        
}

void SEG7_Number(void){
    int i;
    for(i=0;i<SEG7_NUM;i++){
    409c:	e0bfff17 	ldw	r2,-4(fp)
    40a0:	10800044 	addi	r2,r2,1
    40a4:	e0bfff15 	stw	r2,-4(fp)
    40a8:	e0bfff17 	ldw	r2,-4(fp)
    40ac:	10800210 	cmplti	r2,r2,8
    40b0:	103fec1e 	bne	r2,zero,4064 <SEG7_Number+0x14>
        SEG7_SET(i, szMap[i]);
    }        
}
    40b4:	e037883a 	mov	sp,fp
    40b8:	df000017 	ldw	fp,0(sp)
    40bc:	dec00104 	addi	sp,sp,4
    40c0:	f800283a 	ret

000040c4 <SEG7_Hex>:

void SEG7_Hex(alt_u32 Data, alt_u8 point_mask){
    40c4:	defffb04 	addi	sp,sp,-20
    40c8:	df000415 	stw	fp,16(sp)
    40cc:	df000404 	addi	fp,sp,16
    40d0:	e13ffe15 	stw	r4,-8(fp)
    40d4:	e17fff05 	stb	r5,-4(fp)
    alt_u8 mask = 0x01;
    40d8:	00800044 	movi	r2,1
    40dc:	e0bffd45 	stb	r2,-11(fp)
    alt_u8 seg_mask;
    int i;
    
    //
    seg_mask = 0;
    40e0:	e03ffd05 	stb	zero,-12(fp)
    for(i=0;i<SEG7_NUM;i++){
    40e4:	e03ffc15 	stw	zero,-16(fp)
    40e8:	00002206 	br	4174 <SEG7_Hex+0xb0>
        seg_mask = szMap[Data & 0x0F];
    40ec:	e0bffe17 	ldw	r2,-8(fp)
    40f0:	10c003cc 	andi	r3,r2,15
    40f4:	00800074 	movhi	r2,1
    40f8:	10891604 	addi	r2,r2,9304
    40fc:	10c5883a 	add	r2,r2,r3
    4100:	10800003 	ldbu	r2,0(r2)
    4104:	e0bffd05 	stb	r2,-12(fp)
        Data >>= 4;
    4108:	e0bffe17 	ldw	r2,-8(fp)
    410c:	1004d13a 	srli	r2,r2,4
    4110:	e0bffe15 	stw	r2,-8(fp)
        if (point_mask & mask)
    4114:	e0ffff03 	ldbu	r3,-4(fp)
    4118:	e0bffd43 	ldbu	r2,-11(fp)
    411c:	1884703a 	and	r2,r3,r2
    4120:	10803fcc 	andi	r2,r2,255
    4124:	1005003a 	cmpeq	r2,r2,zero
    4128:	1000041e 	bne	r2,zero,413c <SEG7_Hex+0x78>
            seg_mask |= 0x80;
    412c:	e0bffd03 	ldbu	r2,-12(fp)
    4130:	00ffe004 	movi	r3,-128
    4134:	10c4b03a 	or	r2,r2,r3
    4138:	e0bffd05 	stb	r2,-12(fp)
        mask <<= 1;     
    413c:	e0bffd43 	ldbu	r2,-11(fp)
    4140:	1085883a 	add	r2,r2,r2
    4144:	e0bffd45 	stb	r2,-11(fp)
        SEG7_SET(i, seg_mask);
    4148:	e0bffc17 	ldw	r2,-16(fp)
    414c:	1085883a 	add	r2,r2,r2
    4150:	1085883a 	add	r2,r2,r2
    4154:	1007883a 	mov	r3,r2
    4158:	00824834 	movhi	r2,2336
    415c:	1885883a 	add	r2,r3,r2
    4160:	e0fffd03 	ldbu	r3,-12(fp)
    4164:	10c00035 	stwio	r3,0(r2)
    alt_u8 seg_mask;
    int i;
    
    //
    seg_mask = 0;
    for(i=0;i<SEG7_NUM;i++){
    4168:	e0bffc17 	ldw	r2,-16(fp)
    416c:	10800044 	addi	r2,r2,1
    4170:	e0bffc15 	stw	r2,-16(fp)
    4174:	e0bffc17 	ldw	r2,-16(fp)
    4178:	10800210 	cmplti	r2,r2,8
    417c:	103fdb1e 	bne	r2,zero,40ec <SEG7_Hex+0x28>
        if (point_mask & mask)
            seg_mask |= 0x80;
        mask <<= 1;     
        SEG7_SET(i, seg_mask);
    }        
}
    4180:	e037883a 	mov	sp,fp
    4184:	df000017 	ldw	fp,0(sp)
    4188:	dec00104 	addi	sp,sp,4
    418c:	f800283a 	ret

00004190 <SEG7_Decimal>:

void SEG7_Decimal(alt_u32 Data, alt_u8 point_mask){
    4190:	defffa04 	addi	sp,sp,-24
    4194:	dfc00515 	stw	ra,20(sp)
    4198:	df000415 	stw	fp,16(sp)
    419c:	df000404 	addi	fp,sp,16
    41a0:	e13ffe15 	stw	r4,-8(fp)
    41a4:	e17fff05 	stb	r5,-4(fp)
    alt_u8 mask = 0x01;
    41a8:	00800044 	movi	r2,1
    41ac:	e0bffd45 	stb	r2,-11(fp)
    alt_u8 seg_mask;
    int i;
    
    //
    seg_mask = 0;
    41b0:	e03ffd05 	stb	zero,-12(fp)
    for(i=0;i<SEG7_NUM;i++){
    41b4:	e03ffc15 	stw	zero,-16(fp)
    41b8:	00002506 	br	4250 <SEG7_Decimal+0xc0>
        seg_mask = szMap[Data%10];
    41bc:	e13ffe17 	ldw	r4,-8(fp)
    41c0:	01400284 	movi	r5,10
    41c4:	00045000 	call	4500 <__umodsi3>
    41c8:	1007883a 	mov	r3,r2
    41cc:	00800074 	movhi	r2,1
    41d0:	10891604 	addi	r2,r2,9304
    41d4:	10c5883a 	add	r2,r2,r3
    41d8:	10800003 	ldbu	r2,0(r2)
    41dc:	e0bffd05 	stb	r2,-12(fp)
        Data /= 10;
    41e0:	e13ffe17 	ldw	r4,-8(fp)
    41e4:	01400284 	movi	r5,10
    41e8:	00044f80 	call	44f8 <__udivsi3>
    41ec:	e0bffe15 	stw	r2,-8(fp)
        if (point_mask & mask)
    41f0:	e0ffff03 	ldbu	r3,-4(fp)
    41f4:	e0bffd43 	ldbu	r2,-11(fp)
    41f8:	1884703a 	and	r2,r3,r2
    41fc:	10803fcc 	andi	r2,r2,255
    4200:	1005003a 	cmpeq	r2,r2,zero
    4204:	1000041e 	bne	r2,zero,4218 <SEG7_Decimal+0x88>
            seg_mask |= 0x80;
    4208:	e0bffd03 	ldbu	r2,-12(fp)
    420c:	00ffe004 	movi	r3,-128
    4210:	10c4b03a 	or	r2,r2,r3
    4214:	e0bffd05 	stb	r2,-12(fp)
        mask <<= 1;   
    4218:	e0bffd43 	ldbu	r2,-11(fp)
    421c:	1085883a 	add	r2,r2,r2
    4220:	e0bffd45 	stb	r2,-11(fp)
        SEG7_SET(i, seg_mask);
    4224:	e0bffc17 	ldw	r2,-16(fp)
    4228:	1085883a 	add	r2,r2,r2
    422c:	1085883a 	add	r2,r2,r2
    4230:	1007883a 	mov	r3,r2
    4234:	00824834 	movhi	r2,2336
    4238:	1885883a 	add	r2,r3,r2
    423c:	e0fffd03 	ldbu	r3,-12(fp)
    4240:	10c00035 	stwio	r3,0(r2)
    alt_u8 seg_mask;
    int i;
    
    //
    seg_mask = 0;
    for(i=0;i<SEG7_NUM;i++){
    4244:	e0bffc17 	ldw	r2,-16(fp)
    4248:	10800044 	addi	r2,r2,1
    424c:	e0bffc15 	stw	r2,-16(fp)
    4250:	e0bffc17 	ldw	r2,-16(fp)
    4254:	10800210 	cmplti	r2,r2,8
    4258:	103fd81e 	bne	r2,zero,41bc <SEG7_Decimal+0x2c>
            seg_mask |= 0x80;
        mask <<= 1;   
        SEG7_SET(i, seg_mask);
    }        
  
} 
    425c:	e037883a 	mov	sp,fp
    4260:	dfc00117 	ldw	ra,4(sp)
    4264:	df000017 	ldw	fp,0(sp)
    4268:	dec00204 	addi	sp,sp,8
    426c:	f800283a 	ret

00004270 <Set_Cursor_XY>:



//-------------------------------------------------------------------------
void Set_Cursor_XY(unsigned int X,unsigned int Y)
{
    4270:	defffd04 	addi	sp,sp,-12
    4274:	df000215 	stw	fp,8(sp)
    4278:	df000204 	addi	fp,sp,8
    427c:	e13ffe15 	stw	r4,-8(fp)
    4280:	e17fff15 	stw	r5,-4(fp)
  Vga_Cursor_X(VPG_BASE,X);
    4284:	e0fffe17 	ldw	r3,-8(fp)
    4288:	008244f4 	movhi	r2,2323
    428c:	10b00104 	addi	r2,r2,-16380
    4290:	10c00035 	stwio	r3,0(r2)
  Vga_Cursor_Y(VPG_BASE,Y);
    4294:	e0ffff17 	ldw	r3,-4(fp)
    4298:	008244f4 	movhi	r2,2323
    429c:	10b00204 	addi	r2,r2,-16376
    42a0:	10c00035 	stwio	r3,0(r2)

}
    42a4:	e037883a 	mov	sp,fp
    42a8:	df000017 	ldw	fp,0(sp)
    42ac:	dec00104 	addi	sp,sp,4
    42b0:	f800283a 	ret

000042b4 <Set_Cursor_Color>:
//-------------------------------------------------------------------------
void Set_Cursor_Color(unsigned int R,unsigned int G,unsigned int B)
{
    42b4:	defffc04 	addi	sp,sp,-16
    42b8:	df000315 	stw	fp,12(sp)
    42bc:	df000304 	addi	fp,sp,12
    42c0:	e13ffd15 	stw	r4,-12(fp)
    42c4:	e17ffe15 	stw	r5,-8(fp)
    42c8:	e1bfff15 	stw	r6,-4(fp)
  Vga_Cursor_Color_R(VPG_BASE,R);
    42cc:	e0fffd17 	ldw	r3,-12(fp)
    42d0:	008244f4 	movhi	r2,2323
    42d4:	10b00304 	addi	r2,r2,-16372
    42d8:	10c00035 	stwio	r3,0(r2)
  Vga_Cursor_Color_G(VPG_BASE,G);
    42dc:	e0fffe17 	ldw	r3,-8(fp)
    42e0:	008244f4 	movhi	r2,2323
    42e4:	10b00404 	addi	r2,r2,-16368
    42e8:	10c00035 	stwio	r3,0(r2)
  Vga_Cursor_Color_B(VPG_BASE,B);
    42ec:	e0ffff17 	ldw	r3,-4(fp)
    42f0:	008244f4 	movhi	r2,2323
    42f4:	10b00504 	addi	r2,r2,-16364
    42f8:	10c00035 	stwio	r3,0(r2)

}
    42fc:	e037883a 	mov	sp,fp
    4300:	df000017 	ldw	fp,0(sp)
    4304:	dec00104 	addi	sp,sp,4
    4308:	f800283a 	ret

0000430c <Set_Pixel_On_Color>:
//-------------------------------------------------------------------------
void Set_Pixel_On_Color(unsigned int R,unsigned int G,unsigned int B)
{
    430c:	defffc04 	addi	sp,sp,-16
    4310:	df000315 	stw	fp,12(sp)
    4314:	df000304 	addi	fp,sp,12
    4318:	e13ffd15 	stw	r4,-12(fp)
    431c:	e17ffe15 	stw	r5,-8(fp)
    4320:	e1bfff15 	stw	r6,-4(fp)
  Vga_Pixel_On_Color_R(VPG_BASE,R);
    4324:	e0fffd17 	ldw	r3,-12(fp)
    4328:	008244f4 	movhi	r2,2323
    432c:	10b00604 	addi	r2,r2,-16360
    4330:	10c00035 	stwio	r3,0(r2)
  Vga_Pixel_On_Color_G(VPG_BASE,G);
    4334:	e0fffe17 	ldw	r3,-8(fp)
    4338:	008244f4 	movhi	r2,2323
    433c:	10b00704 	addi	r2,r2,-16356
    4340:	10c00035 	stwio	r3,0(r2)
  Vga_Pixel_On_Color_B(VPG_BASE,B);
    4344:	e0ffff17 	ldw	r3,-4(fp)
    4348:	008244f4 	movhi	r2,2323
    434c:	10b00804 	addi	r2,r2,-16352
    4350:	10c00035 	stwio	r3,0(r2)

}
    4354:	e037883a 	mov	sp,fp
    4358:	df000017 	ldw	fp,0(sp)
    435c:	dec00104 	addi	sp,sp,4
    4360:	f800283a 	ret

00004364 <Set_Pixel_Off_Color>:
//-------------------------------------------------------------------------
void Set_Pixel_Off_Color(unsigned int R,unsigned int G,unsigned int B)
{
    4364:	defffc04 	addi	sp,sp,-16
    4368:	df000315 	stw	fp,12(sp)
    436c:	df000304 	addi	fp,sp,12
    4370:	e13ffd15 	stw	r4,-12(fp)
    4374:	e17ffe15 	stw	r5,-8(fp)
    4378:	e1bfff15 	stw	r6,-4(fp)
  Vga_Pixel_Off_Color_R(VPG_BASE,R);
    437c:	e0fffd17 	ldw	r3,-12(fp)
    4380:	008244f4 	movhi	r2,2323
    4384:	10b00904 	addi	r2,r2,-16348
    4388:	10c00035 	stwio	r3,0(r2)
  Vga_Pixel_Off_Color_G(VPG_BASE,G);
    438c:	e0fffe17 	ldw	r3,-8(fp)
    4390:	008244f4 	movhi	r2,2323
    4394:	10b00a04 	addi	r2,r2,-16344
    4398:	10c00035 	stwio	r3,0(r2)
  Vga_Pixel_Off_Color_B(VPG_BASE,B);
    439c:	e0ffff17 	ldw	r3,-4(fp)
    43a0:	008244f4 	movhi	r2,2323
    43a4:	10b00b04 	addi	r2,r2,-16340
    43a8:	10c00035 	stwio	r3,0(r2)

}
    43ac:	e037883a 	mov	sp,fp
    43b0:	df000017 	ldw	fp,0(sp)
    43b4:	dec00104 	addi	sp,sp,4
    43b8:	f800283a 	ret

000043bc <udivmodsi4>:
    43bc:	29001b2e 	bgeu	r5,r4,442c <udivmodsi4+0x70>
    43c0:	28001a16 	blt	r5,zero,442c <udivmodsi4+0x70>
    43c4:	00800044 	movi	r2,1
    43c8:	0007883a 	mov	r3,zero
    43cc:	01c007c4 	movi	r7,31
    43d0:	00000306 	br	43e0 <udivmodsi4+0x24>
    43d4:	19c01326 	beq	r3,r7,4424 <udivmodsi4+0x68>
    43d8:	18c00044 	addi	r3,r3,1
    43dc:	28000416 	blt	r5,zero,43f0 <udivmodsi4+0x34>
    43e0:	294b883a 	add	r5,r5,r5
    43e4:	1085883a 	add	r2,r2,r2
    43e8:	293ffa36 	bltu	r5,r4,43d4 <udivmodsi4+0x18>
    43ec:	10000d26 	beq	r2,zero,4424 <udivmodsi4+0x68>
    43f0:	0007883a 	mov	r3,zero
    43f4:	21400236 	bltu	r4,r5,4400 <udivmodsi4+0x44>
    43f8:	2149c83a 	sub	r4,r4,r5
    43fc:	1886b03a 	or	r3,r3,r2
    4400:	1004d07a 	srli	r2,r2,1
    4404:	280ad07a 	srli	r5,r5,1
    4408:	103ffa1e 	bne	r2,zero,43f4 <udivmodsi4+0x38>
    440c:	30000226 	beq	r6,zero,4418 <udivmodsi4+0x5c>
    4410:	2005883a 	mov	r2,r4
    4414:	f800283a 	ret
    4418:	1809883a 	mov	r4,r3
    441c:	2005883a 	mov	r2,r4
    4420:	f800283a 	ret
    4424:	0007883a 	mov	r3,zero
    4428:	003ff806 	br	440c <udivmodsi4+0x50>
    442c:	00800044 	movi	r2,1
    4430:	0007883a 	mov	r3,zero
    4434:	003fef06 	br	43f4 <udivmodsi4+0x38>

00004438 <__divsi3>:
    4438:	defffe04 	addi	sp,sp,-8
    443c:	dc000015 	stw	r16,0(sp)
    4440:	dfc00115 	stw	ra,4(sp)
    4444:	0021883a 	mov	r16,zero
    4448:	20000c16 	blt	r4,zero,447c <__divsi3+0x44>
    444c:	000d883a 	mov	r6,zero
    4450:	28000e16 	blt	r5,zero,448c <__divsi3+0x54>
    4454:	00043bc0 	call	43bc <udivmodsi4>
    4458:	1007883a 	mov	r3,r2
    445c:	8005003a 	cmpeq	r2,r16,zero
    4460:	1000011e 	bne	r2,zero,4468 <__divsi3+0x30>
    4464:	00c7c83a 	sub	r3,zero,r3
    4468:	1805883a 	mov	r2,r3
    446c:	dfc00117 	ldw	ra,4(sp)
    4470:	dc000017 	ldw	r16,0(sp)
    4474:	dec00204 	addi	sp,sp,8
    4478:	f800283a 	ret
    447c:	0109c83a 	sub	r4,zero,r4
    4480:	04000044 	movi	r16,1
    4484:	000d883a 	mov	r6,zero
    4488:	283ff20e 	bge	r5,zero,4454 <__divsi3+0x1c>
    448c:	014bc83a 	sub	r5,zero,r5
    4490:	8021003a 	cmpeq	r16,r16,zero
    4494:	003fef06 	br	4454 <__divsi3+0x1c>

00004498 <__modsi3>:
    4498:	deffff04 	addi	sp,sp,-4
    449c:	dfc00015 	stw	ra,0(sp)
    44a0:	01800044 	movi	r6,1
    44a4:	2807883a 	mov	r3,r5
    44a8:	20000416 	blt	r4,zero,44bc <__modsi3+0x24>
    44ac:	28000c16 	blt	r5,zero,44e0 <__modsi3+0x48>
    44b0:	dfc00017 	ldw	ra,0(sp)
    44b4:	dec00104 	addi	sp,sp,4
    44b8:	00043bc1 	jmpi	43bc <udivmodsi4>
    44bc:	0109c83a 	sub	r4,zero,r4
    44c0:	28000b16 	blt	r5,zero,44f0 <__modsi3+0x58>
    44c4:	180b883a 	mov	r5,r3
    44c8:	01800044 	movi	r6,1
    44cc:	00043bc0 	call	43bc <udivmodsi4>
    44d0:	0085c83a 	sub	r2,zero,r2
    44d4:	dfc00017 	ldw	ra,0(sp)
    44d8:	dec00104 	addi	sp,sp,4
    44dc:	f800283a 	ret
    44e0:	014bc83a 	sub	r5,zero,r5
    44e4:	dfc00017 	ldw	ra,0(sp)
    44e8:	dec00104 	addi	sp,sp,4
    44ec:	00043bc1 	jmpi	43bc <udivmodsi4>
    44f0:	0147c83a 	sub	r3,zero,r5
    44f4:	003ff306 	br	44c4 <__modsi3+0x2c>

000044f8 <__udivsi3>:
    44f8:	000d883a 	mov	r6,zero
    44fc:	00043bc1 	jmpi	43bc <udivmodsi4>

00004500 <__umodsi3>:
    4500:	01800044 	movi	r6,1
    4504:	00043bc1 	jmpi	43bc <udivmodsi4>

00004508 <printf>:
    4508:	defffb04 	addi	sp,sp,-20
    450c:	dfc00115 	stw	ra,4(sp)
    4510:	d9400215 	stw	r5,8(sp)
    4514:	d9800315 	stw	r6,12(sp)
    4518:	d9c00415 	stw	r7,16(sp)
    451c:	00800074 	movhi	r2,1
    4520:	108fe904 	addi	r2,r2,16292
    4524:	10c00017 	ldw	r3,0(r2)
    4528:	200b883a 	mov	r5,r4
    452c:	d8800204 	addi	r2,sp,8
    4530:	19000217 	ldw	r4,8(r3)
    4534:	100d883a 	mov	r6,r2
    4538:	d8800015 	stw	r2,0(sp)
    453c:	00065ac0 	call	65ac <__vfprintf_internal>
    4540:	dfc00117 	ldw	ra,4(sp)
    4544:	dec00504 	addi	sp,sp,20
    4548:	f800283a 	ret

0000454c <_printf_r>:
    454c:	defffc04 	addi	sp,sp,-16
    4550:	dfc00115 	stw	ra,4(sp)
    4554:	d9800215 	stw	r6,8(sp)
    4558:	d9c00315 	stw	r7,12(sp)
    455c:	280d883a 	mov	r6,r5
    4560:	21400217 	ldw	r5,8(r4)
    4564:	d8c00204 	addi	r3,sp,8
    4568:	180f883a 	mov	r7,r3
    456c:	d8c00015 	stw	r3,0(sp)
    4570:	00047000 	call	4700 <___vfprintf_internal_r>
    4574:	dfc00117 	ldw	ra,4(sp)
    4578:	dec00404 	addi	sp,sp,16
    457c:	f800283a 	ret

00004580 <_puts_r>:
    4580:	defff604 	addi	sp,sp,-40
    4584:	dc400715 	stw	r17,28(sp)
    4588:	2023883a 	mov	r17,r4
    458c:	2809883a 	mov	r4,r5
    4590:	dfc00915 	stw	ra,36(sp)
    4594:	dcc00815 	stw	r19,32(sp)
    4598:	2827883a 	mov	r19,r5
    459c:	00046340 	call	4634 <strlen>
    45a0:	89400217 	ldw	r5,8(r17)
    45a4:	00c00074 	movhi	r3,1
    45a8:	18c7a304 	addi	r3,r3,7820
    45ac:	01c00044 	movi	r7,1
    45b0:	12000044 	addi	r8,r2,1
    45b4:	d8c00515 	stw	r3,20(sp)
    45b8:	d9c00615 	stw	r7,24(sp)
    45bc:	d8c00304 	addi	r3,sp,12
    45c0:	01c00084 	movi	r7,2
    45c4:	8809883a 	mov	r4,r17
    45c8:	d80d883a 	mov	r6,sp
    45cc:	d8c00015 	stw	r3,0(sp)
    45d0:	dcc00315 	stw	r19,12(sp)
    45d4:	da000215 	stw	r8,8(sp)
    45d8:	d9c00115 	stw	r7,4(sp)
    45dc:	d8800415 	stw	r2,16(sp)
    45e0:	00088080 	call	8808 <__sfvwrite_r>
    45e4:	00ffffc4 	movi	r3,-1
    45e8:	10000626 	beq	r2,zero,4604 <_puts_r+0x84>
    45ec:	1805883a 	mov	r2,r3
    45f0:	dfc00917 	ldw	ra,36(sp)
    45f4:	dcc00817 	ldw	r19,32(sp)
    45f8:	dc400717 	ldw	r17,28(sp)
    45fc:	dec00a04 	addi	sp,sp,40
    4600:	f800283a 	ret
    4604:	00c00284 	movi	r3,10
    4608:	1805883a 	mov	r2,r3
    460c:	dfc00917 	ldw	ra,36(sp)
    4610:	dcc00817 	ldw	r19,32(sp)
    4614:	dc400717 	ldw	r17,28(sp)
    4618:	dec00a04 	addi	sp,sp,40
    461c:	f800283a 	ret

00004620 <puts>:
    4620:	00800074 	movhi	r2,1
    4624:	108fe904 	addi	r2,r2,16292
    4628:	200b883a 	mov	r5,r4
    462c:	11000017 	ldw	r4,0(r2)
    4630:	00045801 	jmpi	4580 <_puts_r>

00004634 <strlen>:
    4634:	208000cc 	andi	r2,r4,3
    4638:	2011883a 	mov	r8,r4
    463c:	1000161e 	bne	r2,zero,4698 <strlen+0x64>
    4640:	20c00017 	ldw	r3,0(r4)
    4644:	017fbff4 	movhi	r5,65279
    4648:	297fbfc4 	addi	r5,r5,-257
    464c:	01e02074 	movhi	r7,32897
    4650:	39e02004 	addi	r7,r7,-32640
    4654:	1945883a 	add	r2,r3,r5
    4658:	11c4703a 	and	r2,r2,r7
    465c:	00c6303a 	nor	r3,zero,r3
    4660:	1886703a 	and	r3,r3,r2
    4664:	18000c1e 	bne	r3,zero,4698 <strlen+0x64>
    4668:	280d883a 	mov	r6,r5
    466c:	380b883a 	mov	r5,r7
    4670:	21000104 	addi	r4,r4,4
    4674:	20800017 	ldw	r2,0(r4)
    4678:	1187883a 	add	r3,r2,r6
    467c:	1946703a 	and	r3,r3,r5
    4680:	0084303a 	nor	r2,zero,r2
    4684:	10c4703a 	and	r2,r2,r3
    4688:	103ff926 	beq	r2,zero,4670 <strlen+0x3c>
    468c:	20800007 	ldb	r2,0(r4)
    4690:	10000326 	beq	r2,zero,46a0 <strlen+0x6c>
    4694:	21000044 	addi	r4,r4,1
    4698:	20800007 	ldb	r2,0(r4)
    469c:	103ffd1e 	bne	r2,zero,4694 <strlen+0x60>
    46a0:	2205c83a 	sub	r2,r4,r8
    46a4:	f800283a 	ret

000046a8 <__sprint_r>:
    46a8:	30800217 	ldw	r2,8(r6)
    46ac:	defffe04 	addi	sp,sp,-8
    46b0:	dc000015 	stw	r16,0(sp)
    46b4:	dfc00115 	stw	ra,4(sp)
    46b8:	3021883a 	mov	r16,r6
    46bc:	0007883a 	mov	r3,zero
    46c0:	1000061e 	bne	r2,zero,46dc <__sprint_r+0x34>
    46c4:	1805883a 	mov	r2,r3
    46c8:	30000115 	stw	zero,4(r6)
    46cc:	dfc00117 	ldw	ra,4(sp)
    46d0:	dc000017 	ldw	r16,0(sp)
    46d4:	dec00204 	addi	sp,sp,8
    46d8:	f800283a 	ret
    46dc:	00088080 	call	8808 <__sfvwrite_r>
    46e0:	1007883a 	mov	r3,r2
    46e4:	1805883a 	mov	r2,r3
    46e8:	80000115 	stw	zero,4(r16)
    46ec:	80000215 	stw	zero,8(r16)
    46f0:	dfc00117 	ldw	ra,4(sp)
    46f4:	dc000017 	ldw	r16,0(sp)
    46f8:	dec00204 	addi	sp,sp,8
    46fc:	f800283a 	ret

00004700 <___vfprintf_internal_r>:
    4700:	defea404 	addi	sp,sp,-1392
    4704:	dd815815 	stw	r22,1376(sp)
    4708:	dc015215 	stw	r16,1352(sp)
    470c:	d9c15115 	stw	r7,1348(sp)
    4710:	dfc15b15 	stw	ra,1388(sp)
    4714:	df015a15 	stw	fp,1384(sp)
    4718:	ddc15915 	stw	r23,1380(sp)
    471c:	dd415715 	stw	r21,1372(sp)
    4720:	dd015615 	stw	r20,1368(sp)
    4724:	dcc15515 	stw	r19,1364(sp)
    4728:	dc815415 	stw	r18,1360(sp)
    472c:	dc415315 	stw	r17,1356(sp)
    4730:	282d883a 	mov	r22,r5
    4734:	3021883a 	mov	r16,r6
    4738:	d9014f15 	stw	r4,1340(sp)
    473c:	0008e2c0 	call	8e2c <_localeconv_r>
    4740:	10800017 	ldw	r2,0(r2)
    4744:	d9c15117 	ldw	r7,1348(sp)
    4748:	d8814915 	stw	r2,1316(sp)
    474c:	d8814f17 	ldw	r2,1340(sp)
    4750:	10000226 	beq	r2,zero,475c <___vfprintf_internal_r+0x5c>
    4754:	10800e17 	ldw	r2,56(r2)
    4758:	10020d26 	beq	r2,zero,4f90 <___vfprintf_internal_r+0x890>
    475c:	b080030b 	ldhu	r2,12(r22)
    4760:	1080020c 	andi	r2,r2,8
    4764:	10020e26 	beq	r2,zero,4fa0 <___vfprintf_internal_r+0x8a0>
    4768:	b0800417 	ldw	r2,16(r22)
    476c:	10020c26 	beq	r2,zero,4fa0 <___vfprintf_internal_r+0x8a0>
    4770:	b200030b 	ldhu	r8,12(r22)
    4774:	00800284 	movi	r2,10
    4778:	40c0068c 	andi	r3,r8,26
    477c:	18802f1e 	bne	r3,r2,483c <___vfprintf_internal_r+0x13c>
    4780:	b080038f 	ldh	r2,14(r22)
    4784:	10002d16 	blt	r2,zero,483c <___vfprintf_internal_r+0x13c>
    4788:	b240038b 	ldhu	r9,14(r22)
    478c:	b2800717 	ldw	r10,28(r22)
    4790:	b2c00917 	ldw	r11,36(r22)
    4794:	d9014f17 	ldw	r4,1340(sp)
    4798:	dc402904 	addi	r17,sp,164
    479c:	d8804004 	addi	r2,sp,256
    47a0:	00c10004 	movi	r3,1024
    47a4:	423fff4c 	andi	r8,r8,65533
    47a8:	800d883a 	mov	r6,r16
    47ac:	880b883a 	mov	r5,r17
    47b0:	da002c0d 	sth	r8,176(sp)
    47b4:	da402c8d 	sth	r9,178(sp)
    47b8:	da803015 	stw	r10,192(sp)
    47bc:	dac03215 	stw	r11,200(sp)
    47c0:	d8802d15 	stw	r2,180(sp)
    47c4:	d8c02e15 	stw	r3,184(sp)
    47c8:	d8802915 	stw	r2,164(sp)
    47cc:	d8c02b15 	stw	r3,172(sp)
    47d0:	d8002f15 	stw	zero,188(sp)
    47d4:	00047000 	call	4700 <___vfprintf_internal_r>
    47d8:	d8814b15 	stw	r2,1324(sp)
    47dc:	10000416 	blt	r2,zero,47f0 <___vfprintf_internal_r+0xf0>
    47e0:	d9014f17 	ldw	r4,1340(sp)
    47e4:	880b883a 	mov	r5,r17
    47e8:	0007ed80 	call	7ed8 <_fflush_r>
    47ec:	1002321e 	bne	r2,zero,50b8 <___vfprintf_internal_r+0x9b8>
    47f0:	d8802c0b 	ldhu	r2,176(sp)
    47f4:	1080100c 	andi	r2,r2,64
    47f8:	10000326 	beq	r2,zero,4808 <___vfprintf_internal_r+0x108>
    47fc:	b080030b 	ldhu	r2,12(r22)
    4800:	10801014 	ori	r2,r2,64
    4804:	b080030d 	sth	r2,12(r22)
    4808:	d8814b17 	ldw	r2,1324(sp)
    480c:	dfc15b17 	ldw	ra,1388(sp)
    4810:	df015a17 	ldw	fp,1384(sp)
    4814:	ddc15917 	ldw	r23,1380(sp)
    4818:	dd815817 	ldw	r22,1376(sp)
    481c:	dd415717 	ldw	r21,1372(sp)
    4820:	dd015617 	ldw	r20,1368(sp)
    4824:	dcc15517 	ldw	r19,1364(sp)
    4828:	dc815417 	ldw	r18,1360(sp)
    482c:	dc415317 	ldw	r17,1356(sp)
    4830:	dc015217 	ldw	r16,1352(sp)
    4834:	dec15c04 	addi	sp,sp,1392
    4838:	f800283a 	ret
    483c:	0005883a 	mov	r2,zero
    4840:	0007883a 	mov	r3,zero
    4844:	dd401904 	addi	r21,sp,100
    4848:	d8814215 	stw	r2,1288(sp)
    484c:	802f883a 	mov	r23,r16
    4850:	d8c14315 	stw	r3,1292(sp)
    4854:	d8014b15 	stw	zero,1324(sp)
    4858:	d8014815 	stw	zero,1312(sp)
    485c:	d8014415 	stw	zero,1296(sp)
    4860:	d8014715 	stw	zero,1308(sp)
    4864:	dd400c15 	stw	r21,48(sp)
    4868:	d8000e15 	stw	zero,56(sp)
    486c:	d8000d15 	stw	zero,52(sp)
    4870:	b8800007 	ldb	r2,0(r23)
    4874:	10001926 	beq	r2,zero,48dc <___vfprintf_internal_r+0x1dc>
    4878:	00c00944 	movi	r3,37
    487c:	10c01726 	beq	r2,r3,48dc <___vfprintf_internal_r+0x1dc>
    4880:	b821883a 	mov	r16,r23
    4884:	00000106 	br	488c <___vfprintf_internal_r+0x18c>
    4888:	10c00326 	beq	r2,r3,4898 <___vfprintf_internal_r+0x198>
    488c:	84000044 	addi	r16,r16,1
    4890:	80800007 	ldb	r2,0(r16)
    4894:	103ffc1e 	bne	r2,zero,4888 <___vfprintf_internal_r+0x188>
    4898:	85e7c83a 	sub	r19,r16,r23
    489c:	98000e26 	beq	r19,zero,48d8 <___vfprintf_internal_r+0x1d8>
    48a0:	dc800e17 	ldw	r18,56(sp)
    48a4:	dc400d17 	ldw	r17,52(sp)
    48a8:	008001c4 	movi	r2,7
    48ac:	94e5883a 	add	r18,r18,r19
    48b0:	8c400044 	addi	r17,r17,1
    48b4:	adc00015 	stw	r23,0(r21)
    48b8:	dc800e15 	stw	r18,56(sp)
    48bc:	acc00115 	stw	r19,4(r21)
    48c0:	dc400d15 	stw	r17,52(sp)
    48c4:	14428b16 	blt	r2,r17,52f4 <___vfprintf_internal_r+0xbf4>
    48c8:	ad400204 	addi	r21,r21,8
    48cc:	d9014b17 	ldw	r4,1324(sp)
    48d0:	24c9883a 	add	r4,r4,r19
    48d4:	d9014b15 	stw	r4,1324(sp)
    48d8:	802f883a 	mov	r23,r16
    48dc:	b8800007 	ldb	r2,0(r23)
    48e0:	10013c26 	beq	r2,zero,4dd4 <___vfprintf_internal_r+0x6d4>
    48e4:	bdc00044 	addi	r23,r23,1
    48e8:	d8000405 	stb	zero,16(sp)
    48ec:	b8c00007 	ldb	r3,0(r23)
    48f0:	04ffffc4 	movi	r19,-1
    48f4:	d8014c15 	stw	zero,1328(sp)
    48f8:	d8014a15 	stw	zero,1320(sp)
    48fc:	d8c14d15 	stw	r3,1332(sp)
    4900:	bdc00044 	addi	r23,r23,1
    4904:	d9414d17 	ldw	r5,1332(sp)
    4908:	00801604 	movi	r2,88
    490c:	28fff804 	addi	r3,r5,-32
    4910:	10c06036 	bltu	r2,r3,4a94 <___vfprintf_internal_r+0x394>
    4914:	18c5883a 	add	r2,r3,r3
    4918:	1085883a 	add	r2,r2,r2
    491c:	00c00034 	movhi	r3,0
    4920:	18d24c04 	addi	r3,r3,18736
    4924:	10c5883a 	add	r2,r2,r3
    4928:	11000017 	ldw	r4,0(r2)
    492c:	2000683a 	jmp	r4
    4930:	000058a4 	muli	zero,zero,354
    4934:	00004a94 	movui	zero,298
    4938:	00004a94 	movui	zero,298
    493c:	00005890 	cmplti	zero,zero,354
    4940:	00004a94 	movui	zero,298
    4944:	00004a94 	movui	zero,298
    4948:	00004a94 	movui	zero,298
    494c:	00004a94 	movui	zero,298
    4950:	00004a94 	movui	zero,298
    4954:	00004a94 	movui	zero,298
    4958:	00005670 	cmpltui	zero,zero,345
    495c:	00005880 	call	588 <main+0x2ac>
    4960:	00004a94 	movui	zero,298
    4964:	00005688 	cmpgei	zero,zero,346
    4968:	0000591c 	xori	zero,zero,356
    496c:	00004a94 	movui	zero,298
    4970:	00005908 	cmpgei	zero,zero,356
    4974:	000058d0 	cmplti	zero,zero,355
    4978:	000058d0 	cmplti	zero,zero,355
    497c:	000058d0 	cmplti	zero,zero,355
    4980:	000058d0 	cmplti	zero,zero,355
    4984:	000058d0 	cmplti	zero,zero,355
    4988:	000058d0 	cmplti	zero,zero,355
    498c:	000058d0 	cmplti	zero,zero,355
    4990:	000058d0 	cmplti	zero,zero,355
    4994:	000058d0 	cmplti	zero,zero,355
    4998:	00004a94 	movui	zero,298
    499c:	00004a94 	movui	zero,298
    49a0:	00004a94 	movui	zero,298
    49a4:	00004a94 	movui	zero,298
    49a8:	00004a94 	movui	zero,298
    49ac:	00004a94 	movui	zero,298
    49b0:	00004a94 	movui	zero,298
    49b4:	00004a94 	movui	zero,298
    49b8:	00004a94 	movui	zero,298
    49bc:	00004a94 	movui	zero,298
    49c0:	000050ec 	andhi	zero,zero,323
    49c4:	00005758 	cmpnei	zero,zero,349
    49c8:	00004a94 	movui	zero,298
    49cc:	00005758 	cmpnei	zero,zero,349
    49d0:	00004a94 	movui	zero,298
    49d4:	00004a94 	movui	zero,298
    49d8:	00004a94 	movui	zero,298
    49dc:	00004a94 	movui	zero,298
    49e0:	000058bc 	xorhi	zero,zero,354
    49e4:	00004a94 	movui	zero,298
    49e8:	00004a94 	movui	zero,298
    49ec:	000051a0 	cmpeqi	zero,zero,326
    49f0:	00004a94 	movui	zero,298
    49f4:	00004a94 	movui	zero,298
    49f8:	00004a94 	movui	zero,298
    49fc:	00004a94 	movui	zero,298
    4a00:	00004a94 	movui	zero,298
    4a04:	000051ec 	andhi	zero,zero,327
    4a08:	00004a94 	movui	zero,298
    4a0c:	00004a94 	movui	zero,298
    4a10:	0000580c 	andi	zero,zero,352
    4a14:	00004a94 	movui	zero,298
    4a18:	00004a94 	movui	zero,298
    4a1c:	00004a94 	movui	zero,298
    4a20:	00004a94 	movui	zero,298
    4a24:	00004a94 	movui	zero,298
    4a28:	00004a94 	movui	zero,298
    4a2c:	00004a94 	movui	zero,298
    4a30:	00004a94 	movui	zero,298
    4a34:	00004a94 	movui	zero,298
    4a38:	00004a94 	movui	zero,298
    4a3c:	000057e0 	cmpeqi	zero,zero,351
    4a40:	000050f8 	rdprs	zero,zero,323
    4a44:	00005758 	cmpnei	zero,zero,349
    4a48:	00005758 	cmpnei	zero,zero,349
    4a4c:	00005758 	cmpnei	zero,zero,349
    4a50:	00005744 	movi	zero,349
    4a54:	000050f8 	rdprs	zero,zero,323
    4a58:	00004a94 	movui	zero,298
    4a5c:	00004a94 	movui	zero,298
    4a60:	000056cc 	andi	zero,zero,347
    4a64:	00004a94 	movui	zero,298
    4a68:	0000569c 	xori	zero,zero,346
    4a6c:	000051ac 	andhi	zero,zero,326
    4a70:	000056fc 	xorhi	zero,zero,347
    4a74:	000056e8 	cmpgeui	zero,zero,347
    4a78:	00004a94 	movui	zero,298
    4a7c:	00005978 	rdprs	zero,zero,357
    4a80:	00004a94 	movui	zero,298
    4a84:	000051f8 	rdprs	zero,zero,327
    4a88:	00004a94 	movui	zero,298
    4a8c:	00004a94 	movui	zero,298
    4a90:	00005870 	cmpltui	zero,zero,353
    4a94:	d9014d17 	ldw	r4,1332(sp)
    4a98:	2000ce26 	beq	r4,zero,4dd4 <___vfprintf_internal_r+0x6d4>
    4a9c:	01400044 	movi	r5,1
    4aa0:	d9800f04 	addi	r6,sp,60
    4aa4:	d9c14015 	stw	r7,1280(sp)
    4aa8:	d9414515 	stw	r5,1300(sp)
    4aac:	d9814115 	stw	r6,1284(sp)
    4ab0:	280f883a 	mov	r7,r5
    4ab4:	d9000f05 	stb	r4,60(sp)
    4ab8:	d8000405 	stb	zero,16(sp)
    4abc:	d8014615 	stw	zero,1304(sp)
    4ac0:	d8c14c17 	ldw	r3,1328(sp)
    4ac4:	1880008c 	andi	r2,r3,2
    4ac8:	1005003a 	cmpeq	r2,r2,zero
    4acc:	d8815015 	stw	r2,1344(sp)
    4ad0:	1000031e 	bne	r2,zero,4ae0 <___vfprintf_internal_r+0x3e0>
    4ad4:	d9014517 	ldw	r4,1300(sp)
    4ad8:	21000084 	addi	r4,r4,2
    4adc:	d9014515 	stw	r4,1300(sp)
    4ae0:	d9414c17 	ldw	r5,1328(sp)
    4ae4:	2940210c 	andi	r5,r5,132
    4ae8:	d9414e15 	stw	r5,1336(sp)
    4aec:	28002d1e 	bne	r5,zero,4ba4 <___vfprintf_internal_r+0x4a4>
    4af0:	d9814a17 	ldw	r6,1320(sp)
    4af4:	d8814517 	ldw	r2,1300(sp)
    4af8:	30a1c83a 	sub	r16,r6,r2
    4afc:	0400290e 	bge	zero,r16,4ba4 <___vfprintf_internal_r+0x4a4>
    4b00:	00800404 	movi	r2,16
    4b04:	1404580e 	bge	r2,r16,5c68 <___vfprintf_internal_r+0x1568>
    4b08:	dc800e17 	ldw	r18,56(sp)
    4b0c:	dc400d17 	ldw	r17,52(sp)
    4b10:	1027883a 	mov	r19,r2
    4b14:	07000074 	movhi	fp,1
    4b18:	e707bf84 	addi	fp,fp,7934
    4b1c:	050001c4 	movi	r20,7
    4b20:	00000306 	br	4b30 <___vfprintf_internal_r+0x430>
    4b24:	843ffc04 	addi	r16,r16,-16
    4b28:	ad400204 	addi	r21,r21,8
    4b2c:	9c00130e 	bge	r19,r16,4b7c <___vfprintf_internal_r+0x47c>
    4b30:	94800404 	addi	r18,r18,16
    4b34:	8c400044 	addi	r17,r17,1
    4b38:	af000015 	stw	fp,0(r21)
    4b3c:	acc00115 	stw	r19,4(r21)
    4b40:	dc800e15 	stw	r18,56(sp)
    4b44:	dc400d15 	stw	r17,52(sp)
    4b48:	a47ff60e 	bge	r20,r17,4b24 <___vfprintf_internal_r+0x424>
    4b4c:	d9014f17 	ldw	r4,1340(sp)
    4b50:	b00b883a 	mov	r5,r22
    4b54:	d9800c04 	addi	r6,sp,48
    4b58:	d9c15115 	stw	r7,1348(sp)
    4b5c:	00046a80 	call	46a8 <__sprint_r>
    4b60:	d9c15117 	ldw	r7,1348(sp)
    4b64:	10009e1e 	bne	r2,zero,4de0 <___vfprintf_internal_r+0x6e0>
    4b68:	843ffc04 	addi	r16,r16,-16
    4b6c:	dc800e17 	ldw	r18,56(sp)
    4b70:	dc400d17 	ldw	r17,52(sp)
    4b74:	dd401904 	addi	r21,sp,100
    4b78:	9c3fed16 	blt	r19,r16,4b30 <___vfprintf_internal_r+0x430>
    4b7c:	9425883a 	add	r18,r18,r16
    4b80:	8c400044 	addi	r17,r17,1
    4b84:	008001c4 	movi	r2,7
    4b88:	af000015 	stw	fp,0(r21)
    4b8c:	ac000115 	stw	r16,4(r21)
    4b90:	dc800e15 	stw	r18,56(sp)
    4b94:	dc400d15 	stw	r17,52(sp)
    4b98:	1441f516 	blt	r2,r17,5370 <___vfprintf_internal_r+0xc70>
    4b9c:	ad400204 	addi	r21,r21,8
    4ba0:	00000206 	br	4bac <___vfprintf_internal_r+0x4ac>
    4ba4:	dc800e17 	ldw	r18,56(sp)
    4ba8:	dc400d17 	ldw	r17,52(sp)
    4bac:	d8800407 	ldb	r2,16(sp)
    4bb0:	10000b26 	beq	r2,zero,4be0 <___vfprintf_internal_r+0x4e0>
    4bb4:	00800044 	movi	r2,1
    4bb8:	94800044 	addi	r18,r18,1
    4bbc:	8c400044 	addi	r17,r17,1
    4bc0:	a8800115 	stw	r2,4(r21)
    4bc4:	d8c00404 	addi	r3,sp,16
    4bc8:	008001c4 	movi	r2,7
    4bcc:	a8c00015 	stw	r3,0(r21)
    4bd0:	dc800e15 	stw	r18,56(sp)
    4bd4:	dc400d15 	stw	r17,52(sp)
    4bd8:	1441da16 	blt	r2,r17,5344 <___vfprintf_internal_r+0xc44>
    4bdc:	ad400204 	addi	r21,r21,8
    4be0:	d9015017 	ldw	r4,1344(sp)
    4be4:	20000b1e 	bne	r4,zero,4c14 <___vfprintf_internal_r+0x514>
    4be8:	d8800444 	addi	r2,sp,17
    4bec:	94800084 	addi	r18,r18,2
    4bf0:	8c400044 	addi	r17,r17,1
    4bf4:	a8800015 	stw	r2,0(r21)
    4bf8:	00c00084 	movi	r3,2
    4bfc:	008001c4 	movi	r2,7
    4c00:	a8c00115 	stw	r3,4(r21)
    4c04:	dc800e15 	stw	r18,56(sp)
    4c08:	dc400d15 	stw	r17,52(sp)
    4c0c:	1441c216 	blt	r2,r17,5318 <___vfprintf_internal_r+0xc18>
    4c10:	ad400204 	addi	r21,r21,8
    4c14:	d9414e17 	ldw	r5,1336(sp)
    4c18:	00802004 	movi	r2,128
    4c1c:	2880b126 	beq	r5,r2,4ee4 <___vfprintf_internal_r+0x7e4>
    4c20:	d8c14617 	ldw	r3,1304(sp)
    4c24:	19e1c83a 	sub	r16,r3,r7
    4c28:	0400260e 	bge	zero,r16,4cc4 <___vfprintf_internal_r+0x5c4>
    4c2c:	00800404 	movi	r2,16
    4c30:	1403c90e 	bge	r2,r16,5b58 <___vfprintf_internal_r+0x1458>
    4c34:	1027883a 	mov	r19,r2
    4c38:	07000074 	movhi	fp,1
    4c3c:	e707bb84 	addi	fp,fp,7918
    4c40:	050001c4 	movi	r20,7
    4c44:	00000306 	br	4c54 <___vfprintf_internal_r+0x554>
    4c48:	843ffc04 	addi	r16,r16,-16
    4c4c:	ad400204 	addi	r21,r21,8
    4c50:	9c00130e 	bge	r19,r16,4ca0 <___vfprintf_internal_r+0x5a0>
    4c54:	94800404 	addi	r18,r18,16
    4c58:	8c400044 	addi	r17,r17,1
    4c5c:	af000015 	stw	fp,0(r21)
    4c60:	acc00115 	stw	r19,4(r21)
    4c64:	dc800e15 	stw	r18,56(sp)
    4c68:	dc400d15 	stw	r17,52(sp)
    4c6c:	a47ff60e 	bge	r20,r17,4c48 <___vfprintf_internal_r+0x548>
    4c70:	d9014f17 	ldw	r4,1340(sp)
    4c74:	b00b883a 	mov	r5,r22
    4c78:	d9800c04 	addi	r6,sp,48
    4c7c:	d9c15115 	stw	r7,1348(sp)
    4c80:	00046a80 	call	46a8 <__sprint_r>
    4c84:	d9c15117 	ldw	r7,1348(sp)
    4c88:	1000551e 	bne	r2,zero,4de0 <___vfprintf_internal_r+0x6e0>
    4c8c:	843ffc04 	addi	r16,r16,-16
    4c90:	dc800e17 	ldw	r18,56(sp)
    4c94:	dc400d17 	ldw	r17,52(sp)
    4c98:	dd401904 	addi	r21,sp,100
    4c9c:	9c3fed16 	blt	r19,r16,4c54 <___vfprintf_internal_r+0x554>
    4ca0:	9425883a 	add	r18,r18,r16
    4ca4:	8c400044 	addi	r17,r17,1
    4ca8:	008001c4 	movi	r2,7
    4cac:	af000015 	stw	fp,0(r21)
    4cb0:	ac000115 	stw	r16,4(r21)
    4cb4:	dc800e15 	stw	r18,56(sp)
    4cb8:	dc400d15 	stw	r17,52(sp)
    4cbc:	14418216 	blt	r2,r17,52c8 <___vfprintf_internal_r+0xbc8>
    4cc0:	ad400204 	addi	r21,r21,8
    4cc4:	d9014c17 	ldw	r4,1328(sp)
    4cc8:	2080400c 	andi	r2,r4,256
    4ccc:	10004a1e 	bne	r2,zero,4df8 <___vfprintf_internal_r+0x6f8>
    4cd0:	d9414117 	ldw	r5,1284(sp)
    4cd4:	91e5883a 	add	r18,r18,r7
    4cd8:	8c400044 	addi	r17,r17,1
    4cdc:	008001c4 	movi	r2,7
    4ce0:	a9400015 	stw	r5,0(r21)
    4ce4:	a9c00115 	stw	r7,4(r21)
    4ce8:	dc800e15 	stw	r18,56(sp)
    4cec:	dc400d15 	stw	r17,52(sp)
    4cf0:	14416716 	blt	r2,r17,5290 <___vfprintf_internal_r+0xb90>
    4cf4:	a8c00204 	addi	r3,r21,8
    4cf8:	d9814c17 	ldw	r6,1328(sp)
    4cfc:	3080010c 	andi	r2,r6,4
    4d00:	10002826 	beq	r2,zero,4da4 <___vfprintf_internal_r+0x6a4>
    4d04:	d8814a17 	ldw	r2,1320(sp)
    4d08:	d9014517 	ldw	r4,1300(sp)
    4d0c:	1121c83a 	sub	r16,r2,r4
    4d10:	0400240e 	bge	zero,r16,4da4 <___vfprintf_internal_r+0x6a4>
    4d14:	00800404 	movi	r2,16
    4d18:	14044f0e 	bge	r2,r16,5e58 <___vfprintf_internal_r+0x1758>
    4d1c:	dc400d17 	ldw	r17,52(sp)
    4d20:	1027883a 	mov	r19,r2
    4d24:	07000074 	movhi	fp,1
    4d28:	e707bf84 	addi	fp,fp,7934
    4d2c:	050001c4 	movi	r20,7
    4d30:	00000306 	br	4d40 <___vfprintf_internal_r+0x640>
    4d34:	843ffc04 	addi	r16,r16,-16
    4d38:	18c00204 	addi	r3,r3,8
    4d3c:	9c00110e 	bge	r19,r16,4d84 <___vfprintf_internal_r+0x684>
    4d40:	94800404 	addi	r18,r18,16
    4d44:	8c400044 	addi	r17,r17,1
    4d48:	1f000015 	stw	fp,0(r3)
    4d4c:	1cc00115 	stw	r19,4(r3)
    4d50:	dc800e15 	stw	r18,56(sp)
    4d54:	dc400d15 	stw	r17,52(sp)
    4d58:	a47ff60e 	bge	r20,r17,4d34 <___vfprintf_internal_r+0x634>
    4d5c:	d9014f17 	ldw	r4,1340(sp)
    4d60:	b00b883a 	mov	r5,r22
    4d64:	d9800c04 	addi	r6,sp,48
    4d68:	00046a80 	call	46a8 <__sprint_r>
    4d6c:	10001c1e 	bne	r2,zero,4de0 <___vfprintf_internal_r+0x6e0>
    4d70:	843ffc04 	addi	r16,r16,-16
    4d74:	dc800e17 	ldw	r18,56(sp)
    4d78:	dc400d17 	ldw	r17,52(sp)
    4d7c:	d8c01904 	addi	r3,sp,100
    4d80:	9c3fef16 	blt	r19,r16,4d40 <___vfprintf_internal_r+0x640>
    4d84:	9425883a 	add	r18,r18,r16
    4d88:	8c400044 	addi	r17,r17,1
    4d8c:	008001c4 	movi	r2,7
    4d90:	1f000015 	stw	fp,0(r3)
    4d94:	1c000115 	stw	r16,4(r3)
    4d98:	dc800e15 	stw	r18,56(sp)
    4d9c:	dc400d15 	stw	r17,52(sp)
    4da0:	1440cb16 	blt	r2,r17,50d0 <___vfprintf_internal_r+0x9d0>
    4da4:	d8814a17 	ldw	r2,1320(sp)
    4da8:	d9414517 	ldw	r5,1300(sp)
    4dac:	1140010e 	bge	r2,r5,4db4 <___vfprintf_internal_r+0x6b4>
    4db0:	2805883a 	mov	r2,r5
    4db4:	d9814b17 	ldw	r6,1324(sp)
    4db8:	308d883a 	add	r6,r6,r2
    4dbc:	d9814b15 	stw	r6,1324(sp)
    4dc0:	90013b1e 	bne	r18,zero,52b0 <___vfprintf_internal_r+0xbb0>
    4dc4:	d9c14017 	ldw	r7,1280(sp)
    4dc8:	dd401904 	addi	r21,sp,100
    4dcc:	d8000d15 	stw	zero,52(sp)
    4dd0:	003ea706 	br	4870 <___vfprintf_internal_r+0x170>
    4dd4:	d8800e17 	ldw	r2,56(sp)
    4dd8:	10053f1e 	bne	r2,zero,62d8 <___vfprintf_internal_r+0x1bd8>
    4ddc:	d8000d15 	stw	zero,52(sp)
    4de0:	b080030b 	ldhu	r2,12(r22)
    4de4:	1080100c 	andi	r2,r2,64
    4de8:	103e8726 	beq	r2,zero,4808 <___vfprintf_internal_r+0x108>
    4dec:	00bfffc4 	movi	r2,-1
    4df0:	d8814b15 	stw	r2,1324(sp)
    4df4:	003e8406 	br	4808 <___vfprintf_internal_r+0x108>
    4df8:	d9814d17 	ldw	r6,1332(sp)
    4dfc:	00801944 	movi	r2,101
    4e00:	11806e16 	blt	r2,r6,4fbc <___vfprintf_internal_r+0x8bc>
    4e04:	d9414717 	ldw	r5,1308(sp)
    4e08:	00c00044 	movi	r3,1
    4e0c:	1943430e 	bge	r3,r5,5b1c <___vfprintf_internal_r+0x141c>
    4e10:	d8814117 	ldw	r2,1284(sp)
    4e14:	94800044 	addi	r18,r18,1
    4e18:	8c400044 	addi	r17,r17,1
    4e1c:	a8800015 	stw	r2,0(r21)
    4e20:	008001c4 	movi	r2,7
    4e24:	a8c00115 	stw	r3,4(r21)
    4e28:	dc800e15 	stw	r18,56(sp)
    4e2c:	dc400d15 	stw	r17,52(sp)
    4e30:	1441ca16 	blt	r2,r17,555c <___vfprintf_internal_r+0xe5c>
    4e34:	a8c00204 	addi	r3,r21,8
    4e38:	d9014917 	ldw	r4,1316(sp)
    4e3c:	00800044 	movi	r2,1
    4e40:	94800044 	addi	r18,r18,1
    4e44:	8c400044 	addi	r17,r17,1
    4e48:	18800115 	stw	r2,4(r3)
    4e4c:	008001c4 	movi	r2,7
    4e50:	19000015 	stw	r4,0(r3)
    4e54:	dc800e15 	stw	r18,56(sp)
    4e58:	dc400d15 	stw	r17,52(sp)
    4e5c:	1441b616 	blt	r2,r17,5538 <___vfprintf_internal_r+0xe38>
    4e60:	1cc00204 	addi	r19,r3,8
    4e64:	d9014217 	ldw	r4,1288(sp)
    4e68:	d9414317 	ldw	r5,1292(sp)
    4e6c:	000d883a 	mov	r6,zero
    4e70:	000f883a 	mov	r7,zero
    4e74:	000cf500 	call	cf50 <__nedf2>
    4e78:	10017426 	beq	r2,zero,544c <___vfprintf_internal_r+0xd4c>
    4e7c:	d9414717 	ldw	r5,1308(sp)
    4e80:	d9814117 	ldw	r6,1284(sp)
    4e84:	8c400044 	addi	r17,r17,1
    4e88:	2c85883a 	add	r2,r5,r18
    4e8c:	14bfffc4 	addi	r18,r2,-1
    4e90:	28bfffc4 	addi	r2,r5,-1
    4e94:	30c00044 	addi	r3,r6,1
    4e98:	98800115 	stw	r2,4(r19)
    4e9c:	008001c4 	movi	r2,7
    4ea0:	98c00015 	stw	r3,0(r19)
    4ea4:	dc800e15 	stw	r18,56(sp)
    4ea8:	dc400d15 	stw	r17,52(sp)
    4eac:	14418e16 	blt	r2,r17,54e8 <___vfprintf_internal_r+0xde8>
    4eb0:	9cc00204 	addi	r19,r19,8
    4eb4:	d9414817 	ldw	r5,1312(sp)
    4eb8:	d8800804 	addi	r2,sp,32
    4ebc:	8c400044 	addi	r17,r17,1
    4ec0:	9165883a 	add	r18,r18,r5
    4ec4:	98800015 	stw	r2,0(r19)
    4ec8:	008001c4 	movi	r2,7
    4ecc:	99400115 	stw	r5,4(r19)
    4ed0:	dc800e15 	stw	r18,56(sp)
    4ed4:	dc400d15 	stw	r17,52(sp)
    4ed8:	1440ed16 	blt	r2,r17,5290 <___vfprintf_internal_r+0xb90>
    4edc:	98c00204 	addi	r3,r19,8
    4ee0:	003f8506 	br	4cf8 <___vfprintf_internal_r+0x5f8>
    4ee4:	d9814a17 	ldw	r6,1320(sp)
    4ee8:	d8814517 	ldw	r2,1300(sp)
    4eec:	30a1c83a 	sub	r16,r6,r2
    4ef0:	043f4b0e 	bge	zero,r16,4c20 <___vfprintf_internal_r+0x520>
    4ef4:	00800404 	movi	r2,16
    4ef8:	1404340e 	bge	r2,r16,5fcc <___vfprintf_internal_r+0x18cc>
    4efc:	1027883a 	mov	r19,r2
    4f00:	07000074 	movhi	fp,1
    4f04:	e707bb84 	addi	fp,fp,7918
    4f08:	050001c4 	movi	r20,7
    4f0c:	00000306 	br	4f1c <___vfprintf_internal_r+0x81c>
    4f10:	843ffc04 	addi	r16,r16,-16
    4f14:	ad400204 	addi	r21,r21,8
    4f18:	9c00130e 	bge	r19,r16,4f68 <___vfprintf_internal_r+0x868>
    4f1c:	94800404 	addi	r18,r18,16
    4f20:	8c400044 	addi	r17,r17,1
    4f24:	af000015 	stw	fp,0(r21)
    4f28:	acc00115 	stw	r19,4(r21)
    4f2c:	dc800e15 	stw	r18,56(sp)
    4f30:	dc400d15 	stw	r17,52(sp)
    4f34:	a47ff60e 	bge	r20,r17,4f10 <___vfprintf_internal_r+0x810>
    4f38:	d9014f17 	ldw	r4,1340(sp)
    4f3c:	b00b883a 	mov	r5,r22
    4f40:	d9800c04 	addi	r6,sp,48
    4f44:	d9c15115 	stw	r7,1348(sp)
    4f48:	00046a80 	call	46a8 <__sprint_r>
    4f4c:	d9c15117 	ldw	r7,1348(sp)
    4f50:	103fa31e 	bne	r2,zero,4de0 <___vfprintf_internal_r+0x6e0>
    4f54:	843ffc04 	addi	r16,r16,-16
    4f58:	dc800e17 	ldw	r18,56(sp)
    4f5c:	dc400d17 	ldw	r17,52(sp)
    4f60:	dd401904 	addi	r21,sp,100
    4f64:	9c3fed16 	blt	r19,r16,4f1c <___vfprintf_internal_r+0x81c>
    4f68:	9425883a 	add	r18,r18,r16
    4f6c:	8c400044 	addi	r17,r17,1
    4f70:	008001c4 	movi	r2,7
    4f74:	af000015 	stw	fp,0(r21)
    4f78:	ac000115 	stw	r16,4(r21)
    4f7c:	dc800e15 	stw	r18,56(sp)
    4f80:	dc400d15 	stw	r17,52(sp)
    4f84:	14416116 	blt	r2,r17,550c <___vfprintf_internal_r+0xe0c>
    4f88:	ad400204 	addi	r21,r21,8
    4f8c:	003f2406 	br	4c20 <___vfprintf_internal_r+0x520>
    4f90:	d9014f17 	ldw	r4,1340(sp)
    4f94:	00081700 	call	8170 <__sinit>
    4f98:	d9c15117 	ldw	r7,1348(sp)
    4f9c:	003def06 	br	475c <___vfprintf_internal_r+0x5c>
    4fa0:	d9014f17 	ldw	r4,1340(sp)
    4fa4:	b00b883a 	mov	r5,r22
    4fa8:	d9c15115 	stw	r7,1348(sp)
    4fac:	00065d00 	call	65d0 <__swsetup_r>
    4fb0:	d9c15117 	ldw	r7,1348(sp)
    4fb4:	103dee26 	beq	r2,zero,4770 <___vfprintf_internal_r+0x70>
    4fb8:	003f8c06 	br	4dec <___vfprintf_internal_r+0x6ec>
    4fbc:	d9014217 	ldw	r4,1288(sp)
    4fc0:	d9414317 	ldw	r5,1292(sp)
    4fc4:	000d883a 	mov	r6,zero
    4fc8:	000f883a 	mov	r7,zero
    4fcc:	000cec80 	call	cec8 <__eqdf2>
    4fd0:	1000f21e 	bne	r2,zero,539c <___vfprintf_internal_r+0xc9c>
    4fd4:	00800074 	movhi	r2,1
    4fd8:	1087bb04 	addi	r2,r2,7916
    4fdc:	94800044 	addi	r18,r18,1
    4fe0:	8c400044 	addi	r17,r17,1
    4fe4:	a8800015 	stw	r2,0(r21)
    4fe8:	00c00044 	movi	r3,1
    4fec:	008001c4 	movi	r2,7
    4ff0:	a8c00115 	stw	r3,4(r21)
    4ff4:	dc800e15 	stw	r18,56(sp)
    4ff8:	dc400d15 	stw	r17,52(sp)
    4ffc:	1442fa16 	blt	r2,r17,5be8 <___vfprintf_internal_r+0x14e8>
    5000:	a8c00204 	addi	r3,r21,8
    5004:	d8800517 	ldw	r2,20(sp)
    5008:	d9014717 	ldw	r4,1308(sp)
    500c:	11015c0e 	bge	r2,r4,5580 <___vfprintf_internal_r+0xe80>
    5010:	dc400d17 	ldw	r17,52(sp)
    5014:	d9814917 	ldw	r6,1316(sp)
    5018:	00800044 	movi	r2,1
    501c:	94800044 	addi	r18,r18,1
    5020:	8c400044 	addi	r17,r17,1
    5024:	18800115 	stw	r2,4(r3)
    5028:	008001c4 	movi	r2,7
    502c:	19800015 	stw	r6,0(r3)
    5030:	dc800e15 	stw	r18,56(sp)
    5034:	dc400d15 	stw	r17,52(sp)
    5038:	14431016 	blt	r2,r17,5c7c <___vfprintf_internal_r+0x157c>
    503c:	18c00204 	addi	r3,r3,8
    5040:	d8814717 	ldw	r2,1308(sp)
    5044:	143fffc4 	addi	r16,r2,-1
    5048:	043f2b0e 	bge	zero,r16,4cf8 <___vfprintf_internal_r+0x5f8>
    504c:	00800404 	movi	r2,16
    5050:	1402a20e 	bge	r2,r16,5adc <___vfprintf_internal_r+0x13dc>
    5054:	dc400d17 	ldw	r17,52(sp)
    5058:	1027883a 	mov	r19,r2
    505c:	07000074 	movhi	fp,1
    5060:	e707bb84 	addi	fp,fp,7918
    5064:	050001c4 	movi	r20,7
    5068:	00000306 	br	5078 <___vfprintf_internal_r+0x978>
    506c:	18c00204 	addi	r3,r3,8
    5070:	843ffc04 	addi	r16,r16,-16
    5074:	9c029c0e 	bge	r19,r16,5ae8 <___vfprintf_internal_r+0x13e8>
    5078:	94800404 	addi	r18,r18,16
    507c:	8c400044 	addi	r17,r17,1
    5080:	1f000015 	stw	fp,0(r3)
    5084:	1cc00115 	stw	r19,4(r3)
    5088:	dc800e15 	stw	r18,56(sp)
    508c:	dc400d15 	stw	r17,52(sp)
    5090:	a47ff60e 	bge	r20,r17,506c <___vfprintf_internal_r+0x96c>
    5094:	d9014f17 	ldw	r4,1340(sp)
    5098:	b00b883a 	mov	r5,r22
    509c:	d9800c04 	addi	r6,sp,48
    50a0:	00046a80 	call	46a8 <__sprint_r>
    50a4:	103f4e1e 	bne	r2,zero,4de0 <___vfprintf_internal_r+0x6e0>
    50a8:	dc800e17 	ldw	r18,56(sp)
    50ac:	dc400d17 	ldw	r17,52(sp)
    50b0:	d8c01904 	addi	r3,sp,100
    50b4:	003fee06 	br	5070 <___vfprintf_internal_r+0x970>
    50b8:	d8802c0b 	ldhu	r2,176(sp)
    50bc:	00ffffc4 	movi	r3,-1
    50c0:	d8c14b15 	stw	r3,1324(sp)
    50c4:	1080100c 	andi	r2,r2,64
    50c8:	103dcc1e 	bne	r2,zero,47fc <___vfprintf_internal_r+0xfc>
    50cc:	003dce06 	br	4808 <___vfprintf_internal_r+0x108>
    50d0:	d9014f17 	ldw	r4,1340(sp)
    50d4:	b00b883a 	mov	r5,r22
    50d8:	d9800c04 	addi	r6,sp,48
    50dc:	00046a80 	call	46a8 <__sprint_r>
    50e0:	103f3f1e 	bne	r2,zero,4de0 <___vfprintf_internal_r+0x6e0>
    50e4:	dc800e17 	ldw	r18,56(sp)
    50e8:	003f2e06 	br	4da4 <___vfprintf_internal_r+0x6a4>
    50ec:	d9414c17 	ldw	r5,1328(sp)
    50f0:	29400414 	ori	r5,r5,16
    50f4:	d9414c15 	stw	r5,1328(sp)
    50f8:	d9814c17 	ldw	r6,1328(sp)
    50fc:	3080080c 	andi	r2,r6,32
    5100:	10014f1e 	bne	r2,zero,5640 <___vfprintf_internal_r+0xf40>
    5104:	d8c14c17 	ldw	r3,1328(sp)
    5108:	1880040c 	andi	r2,r3,16
    510c:	1002ea1e 	bne	r2,zero,5cb8 <___vfprintf_internal_r+0x15b8>
    5110:	d9014c17 	ldw	r4,1328(sp)
    5114:	2080100c 	andi	r2,r4,64
    5118:	1002e726 	beq	r2,zero,5cb8 <___vfprintf_internal_r+0x15b8>
    511c:	3880000f 	ldh	r2,0(r7)
    5120:	39c00104 	addi	r7,r7,4
    5124:	d9c14015 	stw	r7,1280(sp)
    5128:	1023d7fa 	srai	r17,r2,31
    512c:	1021883a 	mov	r16,r2
    5130:	88037216 	blt	r17,zero,5efc <___vfprintf_internal_r+0x17fc>
    5134:	01000044 	movi	r4,1
    5138:	98000416 	blt	r19,zero,514c <___vfprintf_internal_r+0xa4c>
    513c:	d8c14c17 	ldw	r3,1328(sp)
    5140:	00bfdfc4 	movi	r2,-129
    5144:	1886703a 	and	r3,r3,r2
    5148:	d8c14c15 	stw	r3,1328(sp)
    514c:	8444b03a 	or	r2,r16,r17
    5150:	1002261e 	bne	r2,zero,59ec <___vfprintf_internal_r+0x12ec>
    5154:	9802251e 	bne	r19,zero,59ec <___vfprintf_internal_r+0x12ec>
    5158:	20803fcc 	andi	r2,r4,255
    515c:	10029b26 	beq	r2,zero,5bcc <___vfprintf_internal_r+0x14cc>
    5160:	d8c01904 	addi	r3,sp,100
    5164:	dd000f04 	addi	r20,sp,60
    5168:	d8c14115 	stw	r3,1284(sp)
    516c:	d8c14117 	ldw	r3,1284(sp)
    5170:	dcc14515 	stw	r19,1300(sp)
    5174:	a0c5c83a 	sub	r2,r20,r3
    5178:	11c00a04 	addi	r7,r2,40
    517c:	99c0010e 	bge	r19,r7,5184 <___vfprintf_internal_r+0xa84>
    5180:	d9c14515 	stw	r7,1300(sp)
    5184:	dcc14615 	stw	r19,1304(sp)
    5188:	d8800407 	ldb	r2,16(sp)
    518c:	103e4c26 	beq	r2,zero,4ac0 <___vfprintf_internal_r+0x3c0>
    5190:	d8814517 	ldw	r2,1300(sp)
    5194:	10800044 	addi	r2,r2,1
    5198:	d8814515 	stw	r2,1300(sp)
    519c:	003e4806 	br	4ac0 <___vfprintf_internal_r+0x3c0>
    51a0:	d9814c17 	ldw	r6,1328(sp)
    51a4:	31800414 	ori	r6,r6,16
    51a8:	d9814c15 	stw	r6,1328(sp)
    51ac:	d8c14c17 	ldw	r3,1328(sp)
    51b0:	1880080c 	andi	r2,r3,32
    51b4:	1001271e 	bne	r2,zero,5654 <___vfprintf_internal_r+0xf54>
    51b8:	d9414c17 	ldw	r5,1328(sp)
    51bc:	2880040c 	andi	r2,r5,16
    51c0:	1002b61e 	bne	r2,zero,5c9c <___vfprintf_internal_r+0x159c>
    51c4:	d9814c17 	ldw	r6,1328(sp)
    51c8:	3080100c 	andi	r2,r6,64
    51cc:	1002b326 	beq	r2,zero,5c9c <___vfprintf_internal_r+0x159c>
    51d0:	3c00000b 	ldhu	r16,0(r7)
    51d4:	0009883a 	mov	r4,zero
    51d8:	39c00104 	addi	r7,r7,4
    51dc:	0023883a 	mov	r17,zero
    51e0:	d9c14015 	stw	r7,1280(sp)
    51e4:	d8000405 	stb	zero,16(sp)
    51e8:	003fd306 	br	5138 <___vfprintf_internal_r+0xa38>
    51ec:	d9014c17 	ldw	r4,1328(sp)
    51f0:	21000414 	ori	r4,r4,16
    51f4:	d9014c15 	stw	r4,1328(sp)
    51f8:	d9414c17 	ldw	r5,1328(sp)
    51fc:	2880080c 	andi	r2,r5,32
    5200:	1001081e 	bne	r2,zero,5624 <___vfprintf_internal_r+0xf24>
    5204:	d8c14c17 	ldw	r3,1328(sp)
    5208:	1880040c 	andi	r2,r3,16
    520c:	1002b01e 	bne	r2,zero,5cd0 <___vfprintf_internal_r+0x15d0>
    5210:	d9014c17 	ldw	r4,1328(sp)
    5214:	2080100c 	andi	r2,r4,64
    5218:	1002ad26 	beq	r2,zero,5cd0 <___vfprintf_internal_r+0x15d0>
    521c:	3c00000b 	ldhu	r16,0(r7)
    5220:	01000044 	movi	r4,1
    5224:	39c00104 	addi	r7,r7,4
    5228:	0023883a 	mov	r17,zero
    522c:	d9c14015 	stw	r7,1280(sp)
    5230:	d8000405 	stb	zero,16(sp)
    5234:	003fc006 	br	5138 <___vfprintf_internal_r+0xa38>
    5238:	d9014f17 	ldw	r4,1340(sp)
    523c:	b00b883a 	mov	r5,r22
    5240:	d9800c04 	addi	r6,sp,48
    5244:	00046a80 	call	46a8 <__sprint_r>
    5248:	103ee51e 	bne	r2,zero,4de0 <___vfprintf_internal_r+0x6e0>
    524c:	dc800e17 	ldw	r18,56(sp)
    5250:	d8c01904 	addi	r3,sp,100
    5254:	d9814c17 	ldw	r6,1328(sp)
    5258:	3080004c 	andi	r2,r6,1
    525c:	1005003a 	cmpeq	r2,r2,zero
    5260:	103ea51e 	bne	r2,zero,4cf8 <___vfprintf_internal_r+0x5f8>
    5264:	00800044 	movi	r2,1
    5268:	dc400d17 	ldw	r17,52(sp)
    526c:	18800115 	stw	r2,4(r3)
    5270:	d8814917 	ldw	r2,1316(sp)
    5274:	94800044 	addi	r18,r18,1
    5278:	8c400044 	addi	r17,r17,1
    527c:	18800015 	stw	r2,0(r3)
    5280:	008001c4 	movi	r2,7
    5284:	dc800e15 	stw	r18,56(sp)
    5288:	dc400d15 	stw	r17,52(sp)
    528c:	14421e0e 	bge	r2,r17,5b08 <___vfprintf_internal_r+0x1408>
    5290:	d9014f17 	ldw	r4,1340(sp)
    5294:	b00b883a 	mov	r5,r22
    5298:	d9800c04 	addi	r6,sp,48
    529c:	00046a80 	call	46a8 <__sprint_r>
    52a0:	103ecf1e 	bne	r2,zero,4de0 <___vfprintf_internal_r+0x6e0>
    52a4:	dc800e17 	ldw	r18,56(sp)
    52a8:	d8c01904 	addi	r3,sp,100
    52ac:	003e9206 	br	4cf8 <___vfprintf_internal_r+0x5f8>
    52b0:	d9014f17 	ldw	r4,1340(sp)
    52b4:	b00b883a 	mov	r5,r22
    52b8:	d9800c04 	addi	r6,sp,48
    52bc:	00046a80 	call	46a8 <__sprint_r>
    52c0:	103ec026 	beq	r2,zero,4dc4 <___vfprintf_internal_r+0x6c4>
    52c4:	003ec606 	br	4de0 <___vfprintf_internal_r+0x6e0>
    52c8:	d9014f17 	ldw	r4,1340(sp)
    52cc:	b00b883a 	mov	r5,r22
    52d0:	d9800c04 	addi	r6,sp,48
    52d4:	d9c15115 	stw	r7,1348(sp)
    52d8:	00046a80 	call	46a8 <__sprint_r>
    52dc:	d9c15117 	ldw	r7,1348(sp)
    52e0:	103ebf1e 	bne	r2,zero,4de0 <___vfprintf_internal_r+0x6e0>
    52e4:	dc800e17 	ldw	r18,56(sp)
    52e8:	dc400d17 	ldw	r17,52(sp)
    52ec:	dd401904 	addi	r21,sp,100
    52f0:	003e7406 	br	4cc4 <___vfprintf_internal_r+0x5c4>
    52f4:	d9014f17 	ldw	r4,1340(sp)
    52f8:	b00b883a 	mov	r5,r22
    52fc:	d9800c04 	addi	r6,sp,48
    5300:	d9c15115 	stw	r7,1348(sp)
    5304:	00046a80 	call	46a8 <__sprint_r>
    5308:	d9c15117 	ldw	r7,1348(sp)
    530c:	103eb41e 	bne	r2,zero,4de0 <___vfprintf_internal_r+0x6e0>
    5310:	dd401904 	addi	r21,sp,100
    5314:	003d6d06 	br	48cc <___vfprintf_internal_r+0x1cc>
    5318:	d9014f17 	ldw	r4,1340(sp)
    531c:	b00b883a 	mov	r5,r22
    5320:	d9800c04 	addi	r6,sp,48
    5324:	d9c15115 	stw	r7,1348(sp)
    5328:	00046a80 	call	46a8 <__sprint_r>
    532c:	d9c15117 	ldw	r7,1348(sp)
    5330:	103eab1e 	bne	r2,zero,4de0 <___vfprintf_internal_r+0x6e0>
    5334:	dc800e17 	ldw	r18,56(sp)
    5338:	dc400d17 	ldw	r17,52(sp)
    533c:	dd401904 	addi	r21,sp,100
    5340:	003e3406 	br	4c14 <___vfprintf_internal_r+0x514>
    5344:	d9014f17 	ldw	r4,1340(sp)
    5348:	b00b883a 	mov	r5,r22
    534c:	d9800c04 	addi	r6,sp,48
    5350:	d9c15115 	stw	r7,1348(sp)
    5354:	00046a80 	call	46a8 <__sprint_r>
    5358:	d9c15117 	ldw	r7,1348(sp)
    535c:	103ea01e 	bne	r2,zero,4de0 <___vfprintf_internal_r+0x6e0>
    5360:	dc800e17 	ldw	r18,56(sp)
    5364:	dc400d17 	ldw	r17,52(sp)
    5368:	dd401904 	addi	r21,sp,100
    536c:	003e1c06 	br	4be0 <___vfprintf_internal_r+0x4e0>
    5370:	d9014f17 	ldw	r4,1340(sp)
    5374:	b00b883a 	mov	r5,r22
    5378:	d9800c04 	addi	r6,sp,48
    537c:	d9c15115 	stw	r7,1348(sp)
    5380:	00046a80 	call	46a8 <__sprint_r>
    5384:	d9c15117 	ldw	r7,1348(sp)
    5388:	103e951e 	bne	r2,zero,4de0 <___vfprintf_internal_r+0x6e0>
    538c:	dc800e17 	ldw	r18,56(sp)
    5390:	dc400d17 	ldw	r17,52(sp)
    5394:	dd401904 	addi	r21,sp,100
    5398:	003e0406 	br	4bac <___vfprintf_internal_r+0x4ac>
    539c:	d9000517 	ldw	r4,20(sp)
    53a0:	0102520e 	bge	zero,r4,5cec <___vfprintf_internal_r+0x15ec>
    53a4:	d9814717 	ldw	r6,1308(sp)
    53a8:	21807a16 	blt	r4,r6,5594 <___vfprintf_internal_r+0xe94>
    53ac:	d8814117 	ldw	r2,1284(sp)
    53b0:	91a5883a 	add	r18,r18,r6
    53b4:	8c400044 	addi	r17,r17,1
    53b8:	a8800015 	stw	r2,0(r21)
    53bc:	008001c4 	movi	r2,7
    53c0:	a9800115 	stw	r6,4(r21)
    53c4:	dc800e15 	stw	r18,56(sp)
    53c8:	dc400d15 	stw	r17,52(sp)
    53cc:	1442f616 	blt	r2,r17,5fa8 <___vfprintf_internal_r+0x18a8>
    53d0:	a8c00204 	addi	r3,r21,8
    53d4:	d9414717 	ldw	r5,1308(sp)
    53d8:	2161c83a 	sub	r16,r4,r5
    53dc:	043f9d0e 	bge	zero,r16,5254 <___vfprintf_internal_r+0xb54>
    53e0:	00800404 	movi	r2,16
    53e4:	1402130e 	bge	r2,r16,5c34 <___vfprintf_internal_r+0x1534>
    53e8:	dc400d17 	ldw	r17,52(sp)
    53ec:	1027883a 	mov	r19,r2
    53f0:	07000074 	movhi	fp,1
    53f4:	e707bb84 	addi	fp,fp,7918
    53f8:	050001c4 	movi	r20,7
    53fc:	00000306 	br	540c <___vfprintf_internal_r+0xd0c>
    5400:	18c00204 	addi	r3,r3,8
    5404:	843ffc04 	addi	r16,r16,-16
    5408:	9c020d0e 	bge	r19,r16,5c40 <___vfprintf_internal_r+0x1540>
    540c:	94800404 	addi	r18,r18,16
    5410:	8c400044 	addi	r17,r17,1
    5414:	1f000015 	stw	fp,0(r3)
    5418:	1cc00115 	stw	r19,4(r3)
    541c:	dc800e15 	stw	r18,56(sp)
    5420:	dc400d15 	stw	r17,52(sp)
    5424:	a47ff60e 	bge	r20,r17,5400 <___vfprintf_internal_r+0xd00>
    5428:	d9014f17 	ldw	r4,1340(sp)
    542c:	b00b883a 	mov	r5,r22
    5430:	d9800c04 	addi	r6,sp,48
    5434:	00046a80 	call	46a8 <__sprint_r>
    5438:	103e691e 	bne	r2,zero,4de0 <___vfprintf_internal_r+0x6e0>
    543c:	dc800e17 	ldw	r18,56(sp)
    5440:	dc400d17 	ldw	r17,52(sp)
    5444:	d8c01904 	addi	r3,sp,100
    5448:	003fee06 	br	5404 <___vfprintf_internal_r+0xd04>
    544c:	d8814717 	ldw	r2,1308(sp)
    5450:	143fffc4 	addi	r16,r2,-1
    5454:	043e970e 	bge	zero,r16,4eb4 <___vfprintf_internal_r+0x7b4>
    5458:	00800404 	movi	r2,16
    545c:	1400180e 	bge	r2,r16,54c0 <___vfprintf_internal_r+0xdc0>
    5460:	1029883a 	mov	r20,r2
    5464:	07000074 	movhi	fp,1
    5468:	e707bb84 	addi	fp,fp,7918
    546c:	054001c4 	movi	r21,7
    5470:	00000306 	br	5480 <___vfprintf_internal_r+0xd80>
    5474:	9cc00204 	addi	r19,r19,8
    5478:	843ffc04 	addi	r16,r16,-16
    547c:	a400120e 	bge	r20,r16,54c8 <___vfprintf_internal_r+0xdc8>
    5480:	94800404 	addi	r18,r18,16
    5484:	8c400044 	addi	r17,r17,1
    5488:	9f000015 	stw	fp,0(r19)
    548c:	9d000115 	stw	r20,4(r19)
    5490:	dc800e15 	stw	r18,56(sp)
    5494:	dc400d15 	stw	r17,52(sp)
    5498:	ac7ff60e 	bge	r21,r17,5474 <___vfprintf_internal_r+0xd74>
    549c:	d9014f17 	ldw	r4,1340(sp)
    54a0:	b00b883a 	mov	r5,r22
    54a4:	d9800c04 	addi	r6,sp,48
    54a8:	00046a80 	call	46a8 <__sprint_r>
    54ac:	103e4c1e 	bne	r2,zero,4de0 <___vfprintf_internal_r+0x6e0>
    54b0:	dc800e17 	ldw	r18,56(sp)
    54b4:	dc400d17 	ldw	r17,52(sp)
    54b8:	dcc01904 	addi	r19,sp,100
    54bc:	003fee06 	br	5478 <___vfprintf_internal_r+0xd78>
    54c0:	07000074 	movhi	fp,1
    54c4:	e707bb84 	addi	fp,fp,7918
    54c8:	9425883a 	add	r18,r18,r16
    54cc:	8c400044 	addi	r17,r17,1
    54d0:	008001c4 	movi	r2,7
    54d4:	9f000015 	stw	fp,0(r19)
    54d8:	9c000115 	stw	r16,4(r19)
    54dc:	dc800e15 	stw	r18,56(sp)
    54e0:	dc400d15 	stw	r17,52(sp)
    54e4:	147e720e 	bge	r2,r17,4eb0 <___vfprintf_internal_r+0x7b0>
    54e8:	d9014f17 	ldw	r4,1340(sp)
    54ec:	b00b883a 	mov	r5,r22
    54f0:	d9800c04 	addi	r6,sp,48
    54f4:	00046a80 	call	46a8 <__sprint_r>
    54f8:	103e391e 	bne	r2,zero,4de0 <___vfprintf_internal_r+0x6e0>
    54fc:	dc800e17 	ldw	r18,56(sp)
    5500:	dc400d17 	ldw	r17,52(sp)
    5504:	dcc01904 	addi	r19,sp,100
    5508:	003e6a06 	br	4eb4 <___vfprintf_internal_r+0x7b4>
    550c:	d9014f17 	ldw	r4,1340(sp)
    5510:	b00b883a 	mov	r5,r22
    5514:	d9800c04 	addi	r6,sp,48
    5518:	d9c15115 	stw	r7,1348(sp)
    551c:	00046a80 	call	46a8 <__sprint_r>
    5520:	d9c15117 	ldw	r7,1348(sp)
    5524:	103e2e1e 	bne	r2,zero,4de0 <___vfprintf_internal_r+0x6e0>
    5528:	dc800e17 	ldw	r18,56(sp)
    552c:	dc400d17 	ldw	r17,52(sp)
    5530:	dd401904 	addi	r21,sp,100
    5534:	003dba06 	br	4c20 <___vfprintf_internal_r+0x520>
    5538:	d9014f17 	ldw	r4,1340(sp)
    553c:	b00b883a 	mov	r5,r22
    5540:	d9800c04 	addi	r6,sp,48
    5544:	00046a80 	call	46a8 <__sprint_r>
    5548:	103e251e 	bne	r2,zero,4de0 <___vfprintf_internal_r+0x6e0>
    554c:	dc800e17 	ldw	r18,56(sp)
    5550:	dc400d17 	ldw	r17,52(sp)
    5554:	dcc01904 	addi	r19,sp,100
    5558:	003e4206 	br	4e64 <___vfprintf_internal_r+0x764>
    555c:	d9014f17 	ldw	r4,1340(sp)
    5560:	b00b883a 	mov	r5,r22
    5564:	d9800c04 	addi	r6,sp,48
    5568:	00046a80 	call	46a8 <__sprint_r>
    556c:	103e1c1e 	bne	r2,zero,4de0 <___vfprintf_internal_r+0x6e0>
    5570:	dc800e17 	ldw	r18,56(sp)
    5574:	dc400d17 	ldw	r17,52(sp)
    5578:	d8c01904 	addi	r3,sp,100
    557c:	003e2e06 	br	4e38 <___vfprintf_internal_r+0x738>
    5580:	d9414c17 	ldw	r5,1328(sp)
    5584:	2880004c 	andi	r2,r5,1
    5588:	1005003a 	cmpeq	r2,r2,zero
    558c:	103dda1e 	bne	r2,zero,4cf8 <___vfprintf_internal_r+0x5f8>
    5590:	003e9f06 	br	5010 <___vfprintf_internal_r+0x910>
    5594:	d8c14117 	ldw	r3,1284(sp)
    5598:	9125883a 	add	r18,r18,r4
    559c:	8c400044 	addi	r17,r17,1
    55a0:	008001c4 	movi	r2,7
    55a4:	a8c00015 	stw	r3,0(r21)
    55a8:	a9000115 	stw	r4,4(r21)
    55ac:	dc800e15 	stw	r18,56(sp)
    55b0:	dc400d15 	stw	r17,52(sp)
    55b4:	14426616 	blt	r2,r17,5f50 <___vfprintf_internal_r+0x1850>
    55b8:	a8c00204 	addi	r3,r21,8
    55bc:	d9414917 	ldw	r5,1316(sp)
    55c0:	00800044 	movi	r2,1
    55c4:	94800044 	addi	r18,r18,1
    55c8:	8c400044 	addi	r17,r17,1
    55cc:	18800115 	stw	r2,4(r3)
    55d0:	008001c4 	movi	r2,7
    55d4:	19400015 	stw	r5,0(r3)
    55d8:	dc800e15 	stw	r18,56(sp)
    55dc:	dc400d15 	stw	r17,52(sp)
    55e0:	2021883a 	mov	r16,r4
    55e4:	14425016 	blt	r2,r17,5f28 <___vfprintf_internal_r+0x1828>
    55e8:	19400204 	addi	r5,r3,8
    55ec:	d9814717 	ldw	r6,1308(sp)
    55f0:	8c400044 	addi	r17,r17,1
    55f4:	dc400d15 	stw	r17,52(sp)
    55f8:	3107c83a 	sub	r3,r6,r4
    55fc:	d9014117 	ldw	r4,1284(sp)
    5600:	90e5883a 	add	r18,r18,r3
    5604:	28c00115 	stw	r3,4(r5)
    5608:	8105883a 	add	r2,r16,r4
    560c:	28800015 	stw	r2,0(r5)
    5610:	008001c4 	movi	r2,7
    5614:	dc800e15 	stw	r18,56(sp)
    5618:	147f1d16 	blt	r2,r17,5290 <___vfprintf_internal_r+0xb90>
    561c:	28c00204 	addi	r3,r5,8
    5620:	003db506 	br	4cf8 <___vfprintf_internal_r+0x5f8>
    5624:	3c000017 	ldw	r16,0(r7)
    5628:	3c400117 	ldw	r17,4(r7)
    562c:	39800204 	addi	r6,r7,8
    5630:	01000044 	movi	r4,1
    5634:	d9814015 	stw	r6,1280(sp)
    5638:	d8000405 	stb	zero,16(sp)
    563c:	003ebe06 	br	5138 <___vfprintf_internal_r+0xa38>
    5640:	3c000017 	ldw	r16,0(r7)
    5644:	3c400117 	ldw	r17,4(r7)
    5648:	38800204 	addi	r2,r7,8
    564c:	d8814015 	stw	r2,1280(sp)
    5650:	003eb706 	br	5130 <___vfprintf_internal_r+0xa30>
    5654:	3c000017 	ldw	r16,0(r7)
    5658:	3c400117 	ldw	r17,4(r7)
    565c:	39000204 	addi	r4,r7,8
    5660:	d9014015 	stw	r4,1280(sp)
    5664:	0009883a 	mov	r4,zero
    5668:	d8000405 	stb	zero,16(sp)
    566c:	003eb206 	br	5138 <___vfprintf_internal_r+0xa38>
    5670:	38c00017 	ldw	r3,0(r7)
    5674:	39c00104 	addi	r7,r7,4
    5678:	d8c14a15 	stw	r3,1320(sp)
    567c:	1800d10e 	bge	r3,zero,59c4 <___vfprintf_internal_r+0x12c4>
    5680:	00c7c83a 	sub	r3,zero,r3
    5684:	d8c14a15 	stw	r3,1320(sp)
    5688:	d9014c17 	ldw	r4,1328(sp)
    568c:	b8c00007 	ldb	r3,0(r23)
    5690:	21000114 	ori	r4,r4,4
    5694:	d9014c15 	stw	r4,1328(sp)
    5698:	003c9806 	br	48fc <___vfprintf_internal_r+0x1fc>
    569c:	d9814c17 	ldw	r6,1328(sp)
    56a0:	3080080c 	andi	r2,r6,32
    56a4:	1001f026 	beq	r2,zero,5e68 <___vfprintf_internal_r+0x1768>
    56a8:	d9014b17 	ldw	r4,1324(sp)
    56ac:	38800017 	ldw	r2,0(r7)
    56b0:	39c00104 	addi	r7,r7,4
    56b4:	d9c14015 	stw	r7,1280(sp)
    56b8:	2007d7fa 	srai	r3,r4,31
    56bc:	d9c14017 	ldw	r7,1280(sp)
    56c0:	11000015 	stw	r4,0(r2)
    56c4:	10c00115 	stw	r3,4(r2)
    56c8:	003c6906 	br	4870 <___vfprintf_internal_r+0x170>
    56cc:	b8c00007 	ldb	r3,0(r23)
    56d0:	00801b04 	movi	r2,108
    56d4:	18824f26 	beq	r3,r2,6014 <___vfprintf_internal_r+0x1914>
    56d8:	d9414c17 	ldw	r5,1328(sp)
    56dc:	29400414 	ori	r5,r5,16
    56e0:	d9414c15 	stw	r5,1328(sp)
    56e4:	003c8506 	br	48fc <___vfprintf_internal_r+0x1fc>
    56e8:	d9814c17 	ldw	r6,1328(sp)
    56ec:	b8c00007 	ldb	r3,0(r23)
    56f0:	31800814 	ori	r6,r6,32
    56f4:	d9814c15 	stw	r6,1328(sp)
    56f8:	003c8006 	br	48fc <___vfprintf_internal_r+0x1fc>
    56fc:	d8814c17 	ldw	r2,1328(sp)
    5700:	3c000017 	ldw	r16,0(r7)
    5704:	00c01e04 	movi	r3,120
    5708:	10800094 	ori	r2,r2,2
    570c:	d8814c15 	stw	r2,1328(sp)
    5710:	39c00104 	addi	r7,r7,4
    5714:	01400074 	movhi	r5,1
    5718:	2947a404 	addi	r5,r5,7824
    571c:	00800c04 	movi	r2,48
    5720:	0023883a 	mov	r17,zero
    5724:	01000084 	movi	r4,2
    5728:	d9c14015 	stw	r7,1280(sp)
    572c:	d8c14d15 	stw	r3,1332(sp)
    5730:	d9414415 	stw	r5,1296(sp)
    5734:	d8800445 	stb	r2,17(sp)
    5738:	d8c00485 	stb	r3,18(sp)
    573c:	d8000405 	stb	zero,16(sp)
    5740:	003e7d06 	br	5138 <___vfprintf_internal_r+0xa38>
    5744:	d8814c17 	ldw	r2,1328(sp)
    5748:	b8c00007 	ldb	r3,0(r23)
    574c:	10801014 	ori	r2,r2,64
    5750:	d8814c15 	stw	r2,1328(sp)
    5754:	003c6906 	br	48fc <___vfprintf_internal_r+0x1fc>
    5758:	d9414c17 	ldw	r5,1328(sp)
    575c:	2880020c 	andi	r2,r5,8
    5760:	1001df26 	beq	r2,zero,5ee0 <___vfprintf_internal_r+0x17e0>
    5764:	39800017 	ldw	r6,0(r7)
    5768:	38800204 	addi	r2,r7,8
    576c:	d8814015 	stw	r2,1280(sp)
    5770:	d9814215 	stw	r6,1288(sp)
    5774:	39c00117 	ldw	r7,4(r7)
    5778:	d9c14315 	stw	r7,1292(sp)
    577c:	d9014217 	ldw	r4,1288(sp)
    5780:	d9414317 	ldw	r5,1292(sp)
    5784:	000b0a00 	call	b0a0 <__isinfd>
    5788:	10021726 	beq	r2,zero,5fe8 <___vfprintf_internal_r+0x18e8>
    578c:	d9014217 	ldw	r4,1288(sp)
    5790:	d9414317 	ldw	r5,1292(sp)
    5794:	000d883a 	mov	r6,zero
    5798:	000f883a 	mov	r7,zero
    579c:	000d0e80 	call	d0e8 <__ltdf2>
    57a0:	1002ca16 	blt	r2,zero,62cc <___vfprintf_internal_r+0x1bcc>
    57a4:	d9414d17 	ldw	r5,1332(sp)
    57a8:	008011c4 	movi	r2,71
    57ac:	11420a16 	blt	r2,r5,5fd8 <___vfprintf_internal_r+0x18d8>
    57b0:	01800074 	movhi	r6,1
    57b4:	3187a904 	addi	r6,r6,7844
    57b8:	d9814115 	stw	r6,1284(sp)
    57bc:	d9014c17 	ldw	r4,1328(sp)
    57c0:	00c000c4 	movi	r3,3
    57c4:	00bfdfc4 	movi	r2,-129
    57c8:	2088703a 	and	r4,r4,r2
    57cc:	180f883a 	mov	r7,r3
    57d0:	d8c14515 	stw	r3,1300(sp)
    57d4:	d9014c15 	stw	r4,1328(sp)
    57d8:	d8014615 	stw	zero,1304(sp)
    57dc:	003e6a06 	br	5188 <___vfprintf_internal_r+0xa88>
    57e0:	38800017 	ldw	r2,0(r7)
    57e4:	00c00044 	movi	r3,1
    57e8:	39c00104 	addi	r7,r7,4
    57ec:	d9c14015 	stw	r7,1280(sp)
    57f0:	d9000f04 	addi	r4,sp,60
    57f4:	180f883a 	mov	r7,r3
    57f8:	d8c14515 	stw	r3,1300(sp)
    57fc:	d9014115 	stw	r4,1284(sp)
    5800:	d8800f05 	stb	r2,60(sp)
    5804:	d8000405 	stb	zero,16(sp)
    5808:	003cac06 	br	4abc <___vfprintf_internal_r+0x3bc>
    580c:	01400074 	movhi	r5,1
    5810:	2947af04 	addi	r5,r5,7868
    5814:	d9414415 	stw	r5,1296(sp)
    5818:	d9814c17 	ldw	r6,1328(sp)
    581c:	3080080c 	andi	r2,r6,32
    5820:	1000f926 	beq	r2,zero,5c08 <___vfprintf_internal_r+0x1508>
    5824:	3c000017 	ldw	r16,0(r7)
    5828:	3c400117 	ldw	r17,4(r7)
    582c:	38800204 	addi	r2,r7,8
    5830:	d8814015 	stw	r2,1280(sp)
    5834:	d9414c17 	ldw	r5,1328(sp)
    5838:	2880004c 	andi	r2,r5,1
    583c:	1005003a 	cmpeq	r2,r2,zero
    5840:	1000b31e 	bne	r2,zero,5b10 <___vfprintf_internal_r+0x1410>
    5844:	8444b03a 	or	r2,r16,r17
    5848:	1000b126 	beq	r2,zero,5b10 <___vfprintf_internal_r+0x1410>
    584c:	d9814d17 	ldw	r6,1332(sp)
    5850:	29400094 	ori	r5,r5,2
    5854:	00800c04 	movi	r2,48
    5858:	01000084 	movi	r4,2
    585c:	d9414c15 	stw	r5,1328(sp)
    5860:	d8800445 	stb	r2,17(sp)
    5864:	d9800485 	stb	r6,18(sp)
    5868:	d8000405 	stb	zero,16(sp)
    586c:	003e3206 	br	5138 <___vfprintf_internal_r+0xa38>
    5870:	01800074 	movhi	r6,1
    5874:	3187a404 	addi	r6,r6,7824
    5878:	d9814415 	stw	r6,1296(sp)
    587c:	003fe606 	br	5818 <___vfprintf_internal_r+0x1118>
    5880:	00800ac4 	movi	r2,43
    5884:	d8800405 	stb	r2,16(sp)
    5888:	b8c00007 	ldb	r3,0(r23)
    588c:	003c1b06 	br	48fc <___vfprintf_internal_r+0x1fc>
    5890:	d8814c17 	ldw	r2,1328(sp)
    5894:	b8c00007 	ldb	r3,0(r23)
    5898:	10800054 	ori	r2,r2,1
    589c:	d8814c15 	stw	r2,1328(sp)
    58a0:	003c1606 	br	48fc <___vfprintf_internal_r+0x1fc>
    58a4:	d8800407 	ldb	r2,16(sp)
    58a8:	1000461e 	bne	r2,zero,59c4 <___vfprintf_internal_r+0x12c4>
    58ac:	00800804 	movi	r2,32
    58b0:	d8800405 	stb	r2,16(sp)
    58b4:	b8c00007 	ldb	r3,0(r23)
    58b8:	003c1006 	br	48fc <___vfprintf_internal_r+0x1fc>
    58bc:	d9814c17 	ldw	r6,1328(sp)
    58c0:	b8c00007 	ldb	r3,0(r23)
    58c4:	31800214 	ori	r6,r6,8
    58c8:	d9814c15 	stw	r6,1328(sp)
    58cc:	003c0b06 	br	48fc <___vfprintf_internal_r+0x1fc>
    58d0:	0007883a 	mov	r3,zero
    58d4:	01000244 	movi	r4,9
    58d8:	188002a4 	muli	r2,r3,10
    58dc:	b8c00007 	ldb	r3,0(r23)
    58e0:	d9814d17 	ldw	r6,1332(sp)
    58e4:	bdc00044 	addi	r23,r23,1
    58e8:	d8c14d15 	stw	r3,1332(sp)
    58ec:	d9414d17 	ldw	r5,1332(sp)
    58f0:	3085883a 	add	r2,r6,r2
    58f4:	10fff404 	addi	r3,r2,-48
    58f8:	28bff404 	addi	r2,r5,-48
    58fc:	20bff62e 	bgeu	r4,r2,58d8 <___vfprintf_internal_r+0x11d8>
    5900:	d8c14a15 	stw	r3,1320(sp)
    5904:	003bff06 	br	4904 <___vfprintf_internal_r+0x204>
    5908:	d9414c17 	ldw	r5,1328(sp)
    590c:	b8c00007 	ldb	r3,0(r23)
    5910:	29402014 	ori	r5,r5,128
    5914:	d9414c15 	stw	r5,1328(sp)
    5918:	003bf806 	br	48fc <___vfprintf_internal_r+0x1fc>
    591c:	b8c00007 	ldb	r3,0(r23)
    5920:	00800a84 	movi	r2,42
    5924:	bdc00044 	addi	r23,r23,1
    5928:	18831526 	beq	r3,r2,6580 <___vfprintf_internal_r+0x1e80>
    592c:	d8c14d15 	stw	r3,1332(sp)
    5930:	18bff404 	addi	r2,r3,-48
    5934:	00c00244 	movi	r3,9
    5938:	18827836 	bltu	r3,r2,631c <___vfprintf_internal_r+0x1c1c>
    593c:	000d883a 	mov	r6,zero
    5940:	308002a4 	muli	r2,r6,10
    5944:	b9800007 	ldb	r6,0(r23)
    5948:	d9414d17 	ldw	r5,1332(sp)
    594c:	bdc00044 	addi	r23,r23,1
    5950:	d9814d15 	stw	r6,1332(sp)
    5954:	d9014d17 	ldw	r4,1332(sp)
    5958:	1145883a 	add	r2,r2,r5
    595c:	11bff404 	addi	r6,r2,-48
    5960:	20bff404 	addi	r2,r4,-48
    5964:	18bff62e 	bgeu	r3,r2,5940 <___vfprintf_internal_r+0x1240>
    5968:	3027883a 	mov	r19,r6
    596c:	303be50e 	bge	r6,zero,4904 <___vfprintf_internal_r+0x204>
    5970:	04ffffc4 	movi	r19,-1
    5974:	003be306 	br	4904 <___vfprintf_internal_r+0x204>
    5978:	d8000405 	stb	zero,16(sp)
    597c:	39800017 	ldw	r6,0(r7)
    5980:	39c00104 	addi	r7,r7,4
    5984:	d9c14015 	stw	r7,1280(sp)
    5988:	d9814115 	stw	r6,1284(sp)
    598c:	3001c926 	beq	r6,zero,60b4 <___vfprintf_internal_r+0x19b4>
    5990:	98000e16 	blt	r19,zero,59cc <___vfprintf_internal_r+0x12cc>
    5994:	d9014117 	ldw	r4,1284(sp)
    5998:	000b883a 	mov	r5,zero
    599c:	980d883a 	mov	r6,r19
    59a0:	00097bc0 	call	97bc <memchr>
    59a4:	10025926 	beq	r2,zero,630c <___vfprintf_internal_r+0x1c0c>
    59a8:	d8c14117 	ldw	r3,1284(sp)
    59ac:	10cfc83a 	sub	r7,r2,r3
    59b0:	99c19e16 	blt	r19,r7,602c <___vfprintf_internal_r+0x192c>
    59b4:	d9c14515 	stw	r7,1300(sp)
    59b8:	38000916 	blt	r7,zero,59e0 <___vfprintf_internal_r+0x12e0>
    59bc:	d8014615 	stw	zero,1304(sp)
    59c0:	003df106 	br	5188 <___vfprintf_internal_r+0xa88>
    59c4:	b8c00007 	ldb	r3,0(r23)
    59c8:	003bcc06 	br	48fc <___vfprintf_internal_r+0x1fc>
    59cc:	d9014117 	ldw	r4,1284(sp)
    59d0:	00046340 	call	4634 <strlen>
    59d4:	d8814515 	stw	r2,1300(sp)
    59d8:	100f883a 	mov	r7,r2
    59dc:	103ff70e 	bge	r2,zero,59bc <___vfprintf_internal_r+0x12bc>
    59e0:	d8014515 	stw	zero,1300(sp)
    59e4:	d8014615 	stw	zero,1304(sp)
    59e8:	003de706 	br	5188 <___vfprintf_internal_r+0xa88>
    59ec:	20c03fcc 	andi	r3,r4,255
    59f0:	00800044 	movi	r2,1
    59f4:	18802d26 	beq	r3,r2,5aac <___vfprintf_internal_r+0x13ac>
    59f8:	18800e36 	bltu	r3,r2,5a34 <___vfprintf_internal_r+0x1334>
    59fc:	00800084 	movi	r2,2
    5a00:	1880fa26 	beq	r3,r2,5dec <___vfprintf_internal_r+0x16ec>
    5a04:	01000074 	movhi	r4,1
    5a08:	2107b404 	addi	r4,r4,7888
    5a0c:	00046340 	call	4634 <strlen>
    5a10:	100f883a 	mov	r7,r2
    5a14:	dcc14515 	stw	r19,1300(sp)
    5a18:	9880010e 	bge	r19,r2,5a20 <___vfprintf_internal_r+0x1320>
    5a1c:	d8814515 	stw	r2,1300(sp)
    5a20:	00800074 	movhi	r2,1
    5a24:	1087b404 	addi	r2,r2,7888
    5a28:	dcc14615 	stw	r19,1304(sp)
    5a2c:	d8814115 	stw	r2,1284(sp)
    5a30:	003dd506 	br	5188 <___vfprintf_internal_r+0xa88>
    5a34:	d9401904 	addi	r5,sp,100
    5a38:	dd000f04 	addi	r20,sp,60
    5a3c:	d9414115 	stw	r5,1284(sp)
    5a40:	880a977a 	slli	r5,r17,29
    5a44:	d9814117 	ldw	r6,1284(sp)
    5a48:	8004d0fa 	srli	r2,r16,3
    5a4c:	8806d0fa 	srli	r3,r17,3
    5a50:	810001cc 	andi	r4,r16,7
    5a54:	2884b03a 	or	r2,r5,r2
    5a58:	31bfffc4 	addi	r6,r6,-1
    5a5c:	21000c04 	addi	r4,r4,48
    5a60:	d9814115 	stw	r6,1284(sp)
    5a64:	10cab03a 	or	r5,r2,r3
    5a68:	31000005 	stb	r4,0(r6)
    5a6c:	1021883a 	mov	r16,r2
    5a70:	1823883a 	mov	r17,r3
    5a74:	283ff21e 	bne	r5,zero,5a40 <___vfprintf_internal_r+0x1340>
    5a78:	d8c14c17 	ldw	r3,1328(sp)
    5a7c:	1880004c 	andi	r2,r3,1
    5a80:	1005003a 	cmpeq	r2,r2,zero
    5a84:	103db91e 	bne	r2,zero,516c <___vfprintf_internal_r+0xa6c>
    5a88:	20803fcc 	andi	r2,r4,255
    5a8c:	1080201c 	xori	r2,r2,128
    5a90:	10bfe004 	addi	r2,r2,-128
    5a94:	00c00c04 	movi	r3,48
    5a98:	10fdb426 	beq	r2,r3,516c <___vfprintf_internal_r+0xa6c>
    5a9c:	31bfffc4 	addi	r6,r6,-1
    5aa0:	d9814115 	stw	r6,1284(sp)
    5aa4:	30c00005 	stb	r3,0(r6)
    5aa8:	003db006 	br	516c <___vfprintf_internal_r+0xa6c>
    5aac:	88800068 	cmpgeui	r2,r17,1
    5ab0:	10002c1e 	bne	r2,zero,5b64 <___vfprintf_internal_r+0x1464>
    5ab4:	8800021e 	bne	r17,zero,5ac0 <___vfprintf_internal_r+0x13c0>
    5ab8:	00800244 	movi	r2,9
    5abc:	14002936 	bltu	r2,r16,5b64 <___vfprintf_internal_r+0x1464>
    5ac0:	d90018c4 	addi	r4,sp,99
    5ac4:	dd000f04 	addi	r20,sp,60
    5ac8:	d9014115 	stw	r4,1284(sp)
    5acc:	d9014117 	ldw	r4,1284(sp)
    5ad0:	80800c04 	addi	r2,r16,48
    5ad4:	20800005 	stb	r2,0(r4)
    5ad8:	003da406 	br	516c <___vfprintf_internal_r+0xa6c>
    5adc:	dc400d17 	ldw	r17,52(sp)
    5ae0:	07000074 	movhi	fp,1
    5ae4:	e707bb84 	addi	fp,fp,7918
    5ae8:	9425883a 	add	r18,r18,r16
    5aec:	8c400044 	addi	r17,r17,1
    5af0:	008001c4 	movi	r2,7
    5af4:	1f000015 	stw	fp,0(r3)
    5af8:	1c000115 	stw	r16,4(r3)
    5afc:	dc800e15 	stw	r18,56(sp)
    5b00:	dc400d15 	stw	r17,52(sp)
    5b04:	147de216 	blt	r2,r17,5290 <___vfprintf_internal_r+0xb90>
    5b08:	18c00204 	addi	r3,r3,8
    5b0c:	003c7a06 	br	4cf8 <___vfprintf_internal_r+0x5f8>
    5b10:	01000084 	movi	r4,2
    5b14:	d8000405 	stb	zero,16(sp)
    5b18:	003d8706 	br	5138 <___vfprintf_internal_r+0xa38>
    5b1c:	d9814c17 	ldw	r6,1328(sp)
    5b20:	30c4703a 	and	r2,r6,r3
    5b24:	1005003a 	cmpeq	r2,r2,zero
    5b28:	103cb926 	beq	r2,zero,4e10 <___vfprintf_internal_r+0x710>
    5b2c:	d9014117 	ldw	r4,1284(sp)
    5b30:	94800044 	addi	r18,r18,1
    5b34:	8c400044 	addi	r17,r17,1
    5b38:	008001c4 	movi	r2,7
    5b3c:	a9000015 	stw	r4,0(r21)
    5b40:	a8c00115 	stw	r3,4(r21)
    5b44:	dc800e15 	stw	r18,56(sp)
    5b48:	dc400d15 	stw	r17,52(sp)
    5b4c:	147e6616 	blt	r2,r17,54e8 <___vfprintf_internal_r+0xde8>
    5b50:	acc00204 	addi	r19,r21,8
    5b54:	003cd706 	br	4eb4 <___vfprintf_internal_r+0x7b4>
    5b58:	07000074 	movhi	fp,1
    5b5c:	e707bb84 	addi	fp,fp,7918
    5b60:	003c4f06 	br	4ca0 <___vfprintf_internal_r+0x5a0>
    5b64:	dd000f04 	addi	r20,sp,60
    5b68:	dc801904 	addi	r18,sp,100
    5b6c:	8009883a 	mov	r4,r16
    5b70:	880b883a 	mov	r5,r17
    5b74:	01800284 	movi	r6,10
    5b78:	000f883a 	mov	r7,zero
    5b7c:	000bdf80 	call	bdf8 <__umoddi3>
    5b80:	12000c04 	addi	r8,r2,48
    5b84:	94bfffc4 	addi	r18,r18,-1
    5b88:	8009883a 	mov	r4,r16
    5b8c:	880b883a 	mov	r5,r17
    5b90:	01800284 	movi	r6,10
    5b94:	000f883a 	mov	r7,zero
    5b98:	92000005 	stb	r8,0(r18)
    5b9c:	000b81c0 	call	b81c <__udivdi3>
    5ba0:	1009883a 	mov	r4,r2
    5ba4:	1021883a 	mov	r16,r2
    5ba8:	18800068 	cmpgeui	r2,r3,1
    5bac:	1823883a 	mov	r17,r3
    5bb0:	103fee1e 	bne	r2,zero,5b6c <___vfprintf_internal_r+0x146c>
    5bb4:	1800021e 	bne	r3,zero,5bc0 <___vfprintf_internal_r+0x14c0>
    5bb8:	00800244 	movi	r2,9
    5bbc:	113feb36 	bltu	r2,r4,5b6c <___vfprintf_internal_r+0x146c>
    5bc0:	94bfffc4 	addi	r18,r18,-1
    5bc4:	dc814115 	stw	r18,1284(sp)
    5bc8:	003fc006 	br	5acc <___vfprintf_internal_r+0x13cc>
    5bcc:	d9014c17 	ldw	r4,1328(sp)
    5bd0:	2080004c 	andi	r2,r4,1
    5bd4:	10009a1e 	bne	r2,zero,5e40 <___vfprintf_internal_r+0x1740>
    5bd8:	d9401904 	addi	r5,sp,100
    5bdc:	dd000f04 	addi	r20,sp,60
    5be0:	d9414115 	stw	r5,1284(sp)
    5be4:	003d6106 	br	516c <___vfprintf_internal_r+0xa6c>
    5be8:	d9014f17 	ldw	r4,1340(sp)
    5bec:	b00b883a 	mov	r5,r22
    5bf0:	d9800c04 	addi	r6,sp,48
    5bf4:	00046a80 	call	46a8 <__sprint_r>
    5bf8:	103c791e 	bne	r2,zero,4de0 <___vfprintf_internal_r+0x6e0>
    5bfc:	dc800e17 	ldw	r18,56(sp)
    5c00:	d8c01904 	addi	r3,sp,100
    5c04:	003cff06 	br	5004 <___vfprintf_internal_r+0x904>
    5c08:	d8c14c17 	ldw	r3,1328(sp)
    5c0c:	1880040c 	andi	r2,r3,16
    5c10:	1000711e 	bne	r2,zero,5dd8 <___vfprintf_internal_r+0x16d8>
    5c14:	d9014c17 	ldw	r4,1328(sp)
    5c18:	2080100c 	andi	r2,r4,64
    5c1c:	10006e26 	beq	r2,zero,5dd8 <___vfprintf_internal_r+0x16d8>
    5c20:	3c00000b 	ldhu	r16,0(r7)
    5c24:	0023883a 	mov	r17,zero
    5c28:	39c00104 	addi	r7,r7,4
    5c2c:	d9c14015 	stw	r7,1280(sp)
    5c30:	003f0006 	br	5834 <___vfprintf_internal_r+0x1134>
    5c34:	dc400d17 	ldw	r17,52(sp)
    5c38:	07000074 	movhi	fp,1
    5c3c:	e707bb84 	addi	fp,fp,7918
    5c40:	9425883a 	add	r18,r18,r16
    5c44:	8c400044 	addi	r17,r17,1
    5c48:	008001c4 	movi	r2,7
    5c4c:	1f000015 	stw	fp,0(r3)
    5c50:	1c000115 	stw	r16,4(r3)
    5c54:	dc800e15 	stw	r18,56(sp)
    5c58:	dc400d15 	stw	r17,52(sp)
    5c5c:	147d7616 	blt	r2,r17,5238 <___vfprintf_internal_r+0xb38>
    5c60:	18c00204 	addi	r3,r3,8
    5c64:	003d7b06 	br	5254 <___vfprintf_internal_r+0xb54>
    5c68:	dc800e17 	ldw	r18,56(sp)
    5c6c:	dc400d17 	ldw	r17,52(sp)
    5c70:	07000074 	movhi	fp,1
    5c74:	e707bf84 	addi	fp,fp,7934
    5c78:	003bc006 	br	4b7c <___vfprintf_internal_r+0x47c>
    5c7c:	d9014f17 	ldw	r4,1340(sp)
    5c80:	b00b883a 	mov	r5,r22
    5c84:	d9800c04 	addi	r6,sp,48
    5c88:	00046a80 	call	46a8 <__sprint_r>
    5c8c:	103c541e 	bne	r2,zero,4de0 <___vfprintf_internal_r+0x6e0>
    5c90:	dc800e17 	ldw	r18,56(sp)
    5c94:	d8c01904 	addi	r3,sp,100
    5c98:	003ce906 	br	5040 <___vfprintf_internal_r+0x940>
    5c9c:	3c000017 	ldw	r16,0(r7)
    5ca0:	0009883a 	mov	r4,zero
    5ca4:	39c00104 	addi	r7,r7,4
    5ca8:	0023883a 	mov	r17,zero
    5cac:	d9c14015 	stw	r7,1280(sp)
    5cb0:	d8000405 	stb	zero,16(sp)
    5cb4:	003d2006 	br	5138 <___vfprintf_internal_r+0xa38>
    5cb8:	38800017 	ldw	r2,0(r7)
    5cbc:	39c00104 	addi	r7,r7,4
    5cc0:	d9c14015 	stw	r7,1280(sp)
    5cc4:	1023d7fa 	srai	r17,r2,31
    5cc8:	1021883a 	mov	r16,r2
    5ccc:	003d1806 	br	5130 <___vfprintf_internal_r+0xa30>
    5cd0:	3c000017 	ldw	r16,0(r7)
    5cd4:	01000044 	movi	r4,1
    5cd8:	39c00104 	addi	r7,r7,4
    5cdc:	0023883a 	mov	r17,zero
    5ce0:	d9c14015 	stw	r7,1280(sp)
    5ce4:	d8000405 	stb	zero,16(sp)
    5ce8:	003d1306 	br	5138 <___vfprintf_internal_r+0xa38>
    5cec:	00800074 	movhi	r2,1
    5cf0:	1087bb04 	addi	r2,r2,7916
    5cf4:	94800044 	addi	r18,r18,1
    5cf8:	8c400044 	addi	r17,r17,1
    5cfc:	a8800015 	stw	r2,0(r21)
    5d00:	00c00044 	movi	r3,1
    5d04:	008001c4 	movi	r2,7
    5d08:	a8c00115 	stw	r3,4(r21)
    5d0c:	dc800e15 	stw	r18,56(sp)
    5d10:	dc400d15 	stw	r17,52(sp)
    5d14:	1440ca16 	blt	r2,r17,6040 <___vfprintf_internal_r+0x1940>
    5d18:	a8c00204 	addi	r3,r21,8
    5d1c:	2000061e 	bne	r4,zero,5d38 <___vfprintf_internal_r+0x1638>
    5d20:	d9414717 	ldw	r5,1308(sp)
    5d24:	2800041e 	bne	r5,zero,5d38 <___vfprintf_internal_r+0x1638>
    5d28:	d9814c17 	ldw	r6,1328(sp)
    5d2c:	3080004c 	andi	r2,r6,1
    5d30:	1005003a 	cmpeq	r2,r2,zero
    5d34:	103bf01e 	bne	r2,zero,4cf8 <___vfprintf_internal_r+0x5f8>
    5d38:	00800044 	movi	r2,1
    5d3c:	dc400d17 	ldw	r17,52(sp)
    5d40:	18800115 	stw	r2,4(r3)
    5d44:	d8814917 	ldw	r2,1316(sp)
    5d48:	94800044 	addi	r18,r18,1
    5d4c:	8c400044 	addi	r17,r17,1
    5d50:	18800015 	stw	r2,0(r3)
    5d54:	008001c4 	movi	r2,7
    5d58:	dc800e15 	stw	r18,56(sp)
    5d5c:	dc400d15 	stw	r17,52(sp)
    5d60:	1440ca16 	blt	r2,r17,608c <___vfprintf_internal_r+0x198c>
    5d64:	18c00204 	addi	r3,r3,8
    5d68:	0121c83a 	sub	r16,zero,r4
    5d6c:	0400500e 	bge	zero,r16,5eb0 <___vfprintf_internal_r+0x17b0>
    5d70:	00800404 	movi	r2,16
    5d74:	1400800e 	bge	r2,r16,5f78 <___vfprintf_internal_r+0x1878>
    5d78:	1027883a 	mov	r19,r2
    5d7c:	07000074 	movhi	fp,1
    5d80:	e707bb84 	addi	fp,fp,7918
    5d84:	050001c4 	movi	r20,7
    5d88:	00000306 	br	5d98 <___vfprintf_internal_r+0x1698>
    5d8c:	18c00204 	addi	r3,r3,8
    5d90:	843ffc04 	addi	r16,r16,-16
    5d94:	9c007a0e 	bge	r19,r16,5f80 <___vfprintf_internal_r+0x1880>
    5d98:	94800404 	addi	r18,r18,16
    5d9c:	8c400044 	addi	r17,r17,1
    5da0:	1f000015 	stw	fp,0(r3)
    5da4:	1cc00115 	stw	r19,4(r3)
    5da8:	dc800e15 	stw	r18,56(sp)
    5dac:	dc400d15 	stw	r17,52(sp)
    5db0:	a47ff60e 	bge	r20,r17,5d8c <___vfprintf_internal_r+0x168c>
    5db4:	d9014f17 	ldw	r4,1340(sp)
    5db8:	b00b883a 	mov	r5,r22
    5dbc:	d9800c04 	addi	r6,sp,48
    5dc0:	00046a80 	call	46a8 <__sprint_r>
    5dc4:	103c061e 	bne	r2,zero,4de0 <___vfprintf_internal_r+0x6e0>
    5dc8:	dc800e17 	ldw	r18,56(sp)
    5dcc:	dc400d17 	ldw	r17,52(sp)
    5dd0:	d8c01904 	addi	r3,sp,100
    5dd4:	003fee06 	br	5d90 <___vfprintf_internal_r+0x1690>
    5dd8:	3c000017 	ldw	r16,0(r7)
    5ddc:	0023883a 	mov	r17,zero
    5de0:	39c00104 	addi	r7,r7,4
    5de4:	d9c14015 	stw	r7,1280(sp)
    5de8:	003e9206 	br	5834 <___vfprintf_internal_r+0x1134>
    5dec:	d9401904 	addi	r5,sp,100
    5df0:	dd000f04 	addi	r20,sp,60
    5df4:	d9414115 	stw	r5,1284(sp)
    5df8:	d9814417 	ldw	r6,1296(sp)
    5dfc:	880a973a 	slli	r5,r17,28
    5e00:	8004d13a 	srli	r2,r16,4
    5e04:	810003cc 	andi	r4,r16,15
    5e08:	3109883a 	add	r4,r6,r4
    5e0c:	2884b03a 	or	r2,r5,r2
    5e10:	21400003 	ldbu	r5,0(r4)
    5e14:	d9014117 	ldw	r4,1284(sp)
    5e18:	8806d13a 	srli	r3,r17,4
    5e1c:	1021883a 	mov	r16,r2
    5e20:	213fffc4 	addi	r4,r4,-1
    5e24:	d9014115 	stw	r4,1284(sp)
    5e28:	d9814117 	ldw	r6,1284(sp)
    5e2c:	10c8b03a 	or	r4,r2,r3
    5e30:	1823883a 	mov	r17,r3
    5e34:	31400005 	stb	r5,0(r6)
    5e38:	203fef1e 	bne	r4,zero,5df8 <___vfprintf_internal_r+0x16f8>
    5e3c:	003ccb06 	br	516c <___vfprintf_internal_r+0xa6c>
    5e40:	00800c04 	movi	r2,48
    5e44:	d98018c4 	addi	r6,sp,99
    5e48:	dd000f04 	addi	r20,sp,60
    5e4c:	d88018c5 	stb	r2,99(sp)
    5e50:	d9814115 	stw	r6,1284(sp)
    5e54:	003cc506 	br	516c <___vfprintf_internal_r+0xa6c>
    5e58:	dc400d17 	ldw	r17,52(sp)
    5e5c:	07000074 	movhi	fp,1
    5e60:	e707bf84 	addi	fp,fp,7934
    5e64:	003bc706 	br	4d84 <___vfprintf_internal_r+0x684>
    5e68:	d9414c17 	ldw	r5,1328(sp)
    5e6c:	2880040c 	andi	r2,r5,16
    5e70:	10007c26 	beq	r2,zero,6064 <___vfprintf_internal_r+0x1964>
    5e74:	38800017 	ldw	r2,0(r7)
    5e78:	39c00104 	addi	r7,r7,4
    5e7c:	d9c14015 	stw	r7,1280(sp)
    5e80:	d9814b17 	ldw	r6,1324(sp)
    5e84:	d9c14017 	ldw	r7,1280(sp)
    5e88:	11800015 	stw	r6,0(r2)
    5e8c:	003a7806 	br	4870 <___vfprintf_internal_r+0x170>
    5e90:	d9014f17 	ldw	r4,1340(sp)
    5e94:	b00b883a 	mov	r5,r22
    5e98:	d9800c04 	addi	r6,sp,48
    5e9c:	00046a80 	call	46a8 <__sprint_r>
    5ea0:	103bcf1e 	bne	r2,zero,4de0 <___vfprintf_internal_r+0x6e0>
    5ea4:	dc800e17 	ldw	r18,56(sp)
    5ea8:	dc400d17 	ldw	r17,52(sp)
    5eac:	d8c01904 	addi	r3,sp,100
    5eb0:	d9014717 	ldw	r4,1308(sp)
    5eb4:	d9414117 	ldw	r5,1284(sp)
    5eb8:	8c400044 	addi	r17,r17,1
    5ebc:	9125883a 	add	r18,r18,r4
    5ec0:	008001c4 	movi	r2,7
    5ec4:	19400015 	stw	r5,0(r3)
    5ec8:	19000115 	stw	r4,4(r3)
    5ecc:	dc800e15 	stw	r18,56(sp)
    5ed0:	dc400d15 	stw	r17,52(sp)
    5ed4:	147cee16 	blt	r2,r17,5290 <___vfprintf_internal_r+0xb90>
    5ed8:	18c00204 	addi	r3,r3,8
    5edc:	003b8606 	br	4cf8 <___vfprintf_internal_r+0x5f8>
    5ee0:	38c00017 	ldw	r3,0(r7)
    5ee4:	39000204 	addi	r4,r7,8
    5ee8:	d9014015 	stw	r4,1280(sp)
    5eec:	d8c14215 	stw	r3,1288(sp)
    5ef0:	39c00117 	ldw	r7,4(r7)
    5ef4:	d9c14315 	stw	r7,1292(sp)
    5ef8:	003e2006 	br	577c <___vfprintf_internal_r+0x107c>
    5efc:	0005883a 	mov	r2,zero
    5f00:	1409c83a 	sub	r4,r2,r16
    5f04:	1105803a 	cmpltu	r2,r2,r4
    5f08:	044bc83a 	sub	r5,zero,r17
    5f0c:	2885c83a 	sub	r2,r5,r2
    5f10:	2021883a 	mov	r16,r4
    5f14:	1023883a 	mov	r17,r2
    5f18:	01000044 	movi	r4,1
    5f1c:	00800b44 	movi	r2,45
    5f20:	d8800405 	stb	r2,16(sp)
    5f24:	003c8406 	br	5138 <___vfprintf_internal_r+0xa38>
    5f28:	d9014f17 	ldw	r4,1340(sp)
    5f2c:	b00b883a 	mov	r5,r22
    5f30:	d9800c04 	addi	r6,sp,48
    5f34:	00046a80 	call	46a8 <__sprint_r>
    5f38:	103ba91e 	bne	r2,zero,4de0 <___vfprintf_internal_r+0x6e0>
    5f3c:	dc800e17 	ldw	r18,56(sp)
    5f40:	dc400d17 	ldw	r17,52(sp)
    5f44:	d9000517 	ldw	r4,20(sp)
    5f48:	d9401904 	addi	r5,sp,100
    5f4c:	003da706 	br	55ec <___vfprintf_internal_r+0xeec>
    5f50:	d9014f17 	ldw	r4,1340(sp)
    5f54:	b00b883a 	mov	r5,r22
    5f58:	d9800c04 	addi	r6,sp,48
    5f5c:	00046a80 	call	46a8 <__sprint_r>
    5f60:	103b9f1e 	bne	r2,zero,4de0 <___vfprintf_internal_r+0x6e0>
    5f64:	dc800e17 	ldw	r18,56(sp)
    5f68:	dc400d17 	ldw	r17,52(sp)
    5f6c:	d9000517 	ldw	r4,20(sp)
    5f70:	d8c01904 	addi	r3,sp,100
    5f74:	003d9106 	br	55bc <___vfprintf_internal_r+0xebc>
    5f78:	07000074 	movhi	fp,1
    5f7c:	e707bb84 	addi	fp,fp,7918
    5f80:	9425883a 	add	r18,r18,r16
    5f84:	8c400044 	addi	r17,r17,1
    5f88:	008001c4 	movi	r2,7
    5f8c:	1f000015 	stw	fp,0(r3)
    5f90:	1c000115 	stw	r16,4(r3)
    5f94:	dc800e15 	stw	r18,56(sp)
    5f98:	dc400d15 	stw	r17,52(sp)
    5f9c:	147fbc16 	blt	r2,r17,5e90 <___vfprintf_internal_r+0x1790>
    5fa0:	18c00204 	addi	r3,r3,8
    5fa4:	003fc206 	br	5eb0 <___vfprintf_internal_r+0x17b0>
    5fa8:	d9014f17 	ldw	r4,1340(sp)
    5fac:	b00b883a 	mov	r5,r22
    5fb0:	d9800c04 	addi	r6,sp,48
    5fb4:	00046a80 	call	46a8 <__sprint_r>
    5fb8:	103b891e 	bne	r2,zero,4de0 <___vfprintf_internal_r+0x6e0>
    5fbc:	dc800e17 	ldw	r18,56(sp)
    5fc0:	d9000517 	ldw	r4,20(sp)
    5fc4:	d8c01904 	addi	r3,sp,100
    5fc8:	003d0206 	br	53d4 <___vfprintf_internal_r+0xcd4>
    5fcc:	07000074 	movhi	fp,1
    5fd0:	e707bb84 	addi	fp,fp,7918
    5fd4:	003be406 	br	4f68 <___vfprintf_internal_r+0x868>
    5fd8:	00800074 	movhi	r2,1
    5fdc:	1087aa04 	addi	r2,r2,7848
    5fe0:	d8814115 	stw	r2,1284(sp)
    5fe4:	003df506 	br	57bc <___vfprintf_internal_r+0x10bc>
    5fe8:	d9014217 	ldw	r4,1288(sp)
    5fec:	d9414317 	ldw	r5,1292(sp)
    5ff0:	000b0e00 	call	b0e0 <__isnand>
    5ff4:	10003926 	beq	r2,zero,60dc <___vfprintf_internal_r+0x19dc>
    5ff8:	d9414d17 	ldw	r5,1332(sp)
    5ffc:	008011c4 	movi	r2,71
    6000:	1140ce16 	blt	r2,r5,633c <___vfprintf_internal_r+0x1c3c>
    6004:	01800074 	movhi	r6,1
    6008:	3187ab04 	addi	r6,r6,7852
    600c:	d9814115 	stw	r6,1284(sp)
    6010:	003dea06 	br	57bc <___vfprintf_internal_r+0x10bc>
    6014:	d9014c17 	ldw	r4,1328(sp)
    6018:	bdc00044 	addi	r23,r23,1
    601c:	b8c00007 	ldb	r3,0(r23)
    6020:	21000814 	ori	r4,r4,32
    6024:	d9014c15 	stw	r4,1328(sp)
    6028:	003a3406 	br	48fc <___vfprintf_internal_r+0x1fc>
    602c:	dcc14515 	stw	r19,1300(sp)
    6030:	98011016 	blt	r19,zero,6474 <___vfprintf_internal_r+0x1d74>
    6034:	980f883a 	mov	r7,r19
    6038:	d8014615 	stw	zero,1304(sp)
    603c:	003c5206 	br	5188 <___vfprintf_internal_r+0xa88>
    6040:	d9014f17 	ldw	r4,1340(sp)
    6044:	b00b883a 	mov	r5,r22
    6048:	d9800c04 	addi	r6,sp,48
    604c:	00046a80 	call	46a8 <__sprint_r>
    6050:	103b631e 	bne	r2,zero,4de0 <___vfprintf_internal_r+0x6e0>
    6054:	dc800e17 	ldw	r18,56(sp)
    6058:	d9000517 	ldw	r4,20(sp)
    605c:	d8c01904 	addi	r3,sp,100
    6060:	003f2e06 	br	5d1c <___vfprintf_internal_r+0x161c>
    6064:	d8c14c17 	ldw	r3,1328(sp)
    6068:	1880100c 	andi	r2,r3,64
    606c:	1000a026 	beq	r2,zero,62f0 <___vfprintf_internal_r+0x1bf0>
    6070:	38800017 	ldw	r2,0(r7)
    6074:	39c00104 	addi	r7,r7,4
    6078:	d9c14015 	stw	r7,1280(sp)
    607c:	d9014b17 	ldw	r4,1324(sp)
    6080:	d9c14017 	ldw	r7,1280(sp)
    6084:	1100000d 	sth	r4,0(r2)
    6088:	0039f906 	br	4870 <___vfprintf_internal_r+0x170>
    608c:	d9014f17 	ldw	r4,1340(sp)
    6090:	b00b883a 	mov	r5,r22
    6094:	d9800c04 	addi	r6,sp,48
    6098:	00046a80 	call	46a8 <__sprint_r>
    609c:	103b501e 	bne	r2,zero,4de0 <___vfprintf_internal_r+0x6e0>
    60a0:	dc800e17 	ldw	r18,56(sp)
    60a4:	dc400d17 	ldw	r17,52(sp)
    60a8:	d9000517 	ldw	r4,20(sp)
    60ac:	d8c01904 	addi	r3,sp,100
    60b0:	003f2d06 	br	5d68 <___vfprintf_internal_r+0x1668>
    60b4:	00800184 	movi	r2,6
    60b8:	14c09a36 	bltu	r2,r19,6324 <___vfprintf_internal_r+0x1c24>
    60bc:	dcc14515 	stw	r19,1300(sp)
    60c0:	9800010e 	bge	r19,zero,60c8 <___vfprintf_internal_r+0x19c8>
    60c4:	d8014515 	stw	zero,1300(sp)
    60c8:	00800074 	movhi	r2,1
    60cc:	1087ad04 	addi	r2,r2,7860
    60d0:	980f883a 	mov	r7,r19
    60d4:	d8814115 	stw	r2,1284(sp)
    60d8:	003a7806 	br	4abc <___vfprintf_internal_r+0x3bc>
    60dc:	00bfffc4 	movi	r2,-1
    60e0:	9880e226 	beq	r19,r2,646c <___vfprintf_internal_r+0x1d6c>
    60e4:	d9414d17 	ldw	r5,1332(sp)
    60e8:	008019c4 	movi	r2,103
    60ec:	2880dc26 	beq	r5,r2,6460 <___vfprintf_internal_r+0x1d60>
    60f0:	008011c4 	movi	r2,71
    60f4:	2880da26 	beq	r5,r2,6460 <___vfprintf_internal_r+0x1d60>
    60f8:	d9414c17 	ldw	r5,1328(sp)
    60fc:	d9014317 	ldw	r4,1292(sp)
    6100:	d9814217 	ldw	r6,1288(sp)
    6104:	29404014 	ori	r5,r5,256
    6108:	d9414c15 	stw	r5,1328(sp)
    610c:	2000cc16 	blt	r4,zero,6440 <___vfprintf_internal_r+0x1d40>
    6110:	3021883a 	mov	r16,r6
    6114:	2023883a 	mov	r17,r4
    6118:	0039883a 	mov	fp,zero
    611c:	d9414d17 	ldw	r5,1332(sp)
    6120:	00801984 	movi	r2,102
    6124:	2880b726 	beq	r5,r2,6404 <___vfprintf_internal_r+0x1d04>
    6128:	00801184 	movi	r2,70
    612c:	2880b526 	beq	r5,r2,6404 <___vfprintf_internal_r+0x1d04>
    6130:	00801944 	movi	r2,101
    6134:	2880c826 	beq	r5,r2,6458 <___vfprintf_internal_r+0x1d58>
    6138:	00801144 	movi	r2,69
    613c:	2880c626 	beq	r5,r2,6458 <___vfprintf_internal_r+0x1d58>
    6140:	9829883a 	mov	r20,r19
    6144:	d9014f17 	ldw	r4,1340(sp)
    6148:	d8800504 	addi	r2,sp,20
    614c:	880d883a 	mov	r6,r17
    6150:	d8800115 	stw	r2,4(sp)
    6154:	d8c00604 	addi	r3,sp,24
    6158:	d8800704 	addi	r2,sp,28
    615c:	800b883a 	mov	r5,r16
    6160:	01c00084 	movi	r7,2
    6164:	d8c00215 	stw	r3,8(sp)
    6168:	d8800315 	stw	r2,12(sp)
    616c:	dd000015 	stw	r20,0(sp)
    6170:	00069240 	call	6924 <_dtoa_r>
    6174:	d9814d17 	ldw	r6,1332(sp)
    6178:	d8814115 	stw	r2,1284(sp)
    617c:	008019c4 	movi	r2,103
    6180:	30809526 	beq	r6,r2,63d8 <___vfprintf_internal_r+0x1cd8>
    6184:	d8c14d17 	ldw	r3,1332(sp)
    6188:	008011c4 	movi	r2,71
    618c:	18809226 	beq	r3,r2,63d8 <___vfprintf_internal_r+0x1cd8>
    6190:	d9414117 	ldw	r5,1284(sp)
    6194:	d9814d17 	ldw	r6,1332(sp)
    6198:	00801984 	movi	r2,102
    619c:	2d25883a 	add	r18,r5,r20
    61a0:	30808626 	beq	r6,r2,63bc <___vfprintf_internal_r+0x1cbc>
    61a4:	00801184 	movi	r2,70
    61a8:	30808426 	beq	r6,r2,63bc <___vfprintf_internal_r+0x1cbc>
    61ac:	000d883a 	mov	r6,zero
    61b0:	000f883a 	mov	r7,zero
    61b4:	880b883a 	mov	r5,r17
    61b8:	8009883a 	mov	r4,r16
    61bc:	000cec80 	call	cec8 <__eqdf2>
    61c0:	1000751e 	bne	r2,zero,6398 <___vfprintf_internal_r+0x1c98>
    61c4:	9005883a 	mov	r2,r18
    61c8:	dc800715 	stw	r18,28(sp)
    61cc:	d9014117 	ldw	r4,1284(sp)
    61d0:	d9414d17 	ldw	r5,1332(sp)
    61d4:	00c019c4 	movi	r3,103
    61d8:	1125c83a 	sub	r18,r2,r4
    61dc:	28c06826 	beq	r5,r3,6380 <___vfprintf_internal_r+0x1c80>
    61e0:	008011c4 	movi	r2,71
    61e4:	28806626 	beq	r5,r2,6380 <___vfprintf_internal_r+0x1c80>
    61e8:	d9000517 	ldw	r4,20(sp)
    61ec:	d8c14d17 	ldw	r3,1332(sp)
    61f0:	00801944 	movi	r2,101
    61f4:	10c05516 	blt	r2,r3,634c <___vfprintf_internal_r+0x1c4c>
    61f8:	213fffc4 	addi	r4,r4,-1
    61fc:	d9000515 	stw	r4,20(sp)
    6200:	d8c00805 	stb	r3,32(sp)
    6204:	2021883a 	mov	r16,r4
    6208:	2000c116 	blt	r4,zero,6510 <___vfprintf_internal_r+0x1e10>
    620c:	00800ac4 	movi	r2,43
    6210:	d8800845 	stb	r2,33(sp)
    6214:	00800244 	movi	r2,9
    6218:	1400af0e 	bge	r2,r16,64d8 <___vfprintf_internal_r+0x1dd8>
    621c:	1027883a 	mov	r19,r2
    6220:	dc400b84 	addi	r17,sp,46
    6224:	8009883a 	mov	r4,r16
    6228:	01400284 	movi	r5,10
    622c:	00044980 	call	4498 <__modsi3>
    6230:	10800c04 	addi	r2,r2,48
    6234:	8c7fffc4 	addi	r17,r17,-1
    6238:	8009883a 	mov	r4,r16
    623c:	01400284 	movi	r5,10
    6240:	88800005 	stb	r2,0(r17)
    6244:	00044380 	call	4438 <__divsi3>
    6248:	1021883a 	mov	r16,r2
    624c:	98bff516 	blt	r19,r2,6224 <___vfprintf_internal_r+0x1b24>
    6250:	10c00c04 	addi	r3,r2,48
    6254:	d88009c4 	addi	r2,sp,39
    6258:	108001c4 	addi	r2,r2,7
    625c:	897fffc4 	addi	r5,r17,-1
    6260:	88ffffc5 	stb	r3,-1(r17)
    6264:	2880a72e 	bgeu	r5,r2,6504 <___vfprintf_internal_r+0x1e04>
    6268:	1009883a 	mov	r4,r2
    626c:	d9800804 	addi	r6,sp,32
    6270:	d8c00884 	addi	r3,sp,34
    6274:	28800003 	ldbu	r2,0(r5)
    6278:	29400044 	addi	r5,r5,1
    627c:	18800005 	stb	r2,0(r3)
    6280:	18c00044 	addi	r3,r3,1
    6284:	293ffb36 	bltu	r5,r4,6274 <___vfprintf_internal_r+0x1b74>
    6288:	1987c83a 	sub	r3,r3,r6
    628c:	00800044 	movi	r2,1
    6290:	d8c14815 	stw	r3,1312(sp)
    6294:	90cf883a 	add	r7,r18,r3
    6298:	1480960e 	bge	r2,r18,64f4 <___vfprintf_internal_r+0x1df4>
    629c:	39c00044 	addi	r7,r7,1
    62a0:	d9c14515 	stw	r7,1300(sp)
    62a4:	38003416 	blt	r7,zero,6378 <___vfprintf_internal_r+0x1c78>
    62a8:	e0803fcc 	andi	r2,fp,255
    62ac:	1080201c 	xori	r2,r2,128
    62b0:	10bfe004 	addi	r2,r2,-128
    62b4:	10004e26 	beq	r2,zero,63f0 <___vfprintf_internal_r+0x1cf0>
    62b8:	00800b44 	movi	r2,45
    62bc:	dc814715 	stw	r18,1308(sp)
    62c0:	d8014615 	stw	zero,1304(sp)
    62c4:	d8800405 	stb	r2,16(sp)
    62c8:	003bb106 	br	5190 <___vfprintf_internal_r+0xa90>
    62cc:	00800b44 	movi	r2,45
    62d0:	d8800405 	stb	r2,16(sp)
    62d4:	003d3306 	br	57a4 <___vfprintf_internal_r+0x10a4>
    62d8:	d9014f17 	ldw	r4,1340(sp)
    62dc:	b00b883a 	mov	r5,r22
    62e0:	d9800c04 	addi	r6,sp,48
    62e4:	00046a80 	call	46a8 <__sprint_r>
    62e8:	103abd1e 	bne	r2,zero,4de0 <___vfprintf_internal_r+0x6e0>
    62ec:	003abb06 	br	4ddc <___vfprintf_internal_r+0x6dc>
    62f0:	38800017 	ldw	r2,0(r7)
    62f4:	39c00104 	addi	r7,r7,4
    62f8:	d9c14015 	stw	r7,1280(sp)
    62fc:	d9414b17 	ldw	r5,1324(sp)
    6300:	d9c14017 	ldw	r7,1280(sp)
    6304:	11400015 	stw	r5,0(r2)
    6308:	00395906 	br	4870 <___vfprintf_internal_r+0x170>
    630c:	980f883a 	mov	r7,r19
    6310:	dcc14515 	stw	r19,1300(sp)
    6314:	d8014615 	stw	zero,1304(sp)
    6318:	003b9b06 	br	5188 <___vfprintf_internal_r+0xa88>
    631c:	0027883a 	mov	r19,zero
    6320:	00397806 	br	4904 <___vfprintf_internal_r+0x204>
    6324:	00c00074 	movhi	r3,1
    6328:	18c7ad04 	addi	r3,r3,7860
    632c:	100f883a 	mov	r7,r2
    6330:	d8814515 	stw	r2,1300(sp)
    6334:	d8c14115 	stw	r3,1284(sp)
    6338:	0039e006 	br	4abc <___vfprintf_internal_r+0x3bc>
    633c:	00800074 	movhi	r2,1
    6340:	1087ac04 	addi	r2,r2,7856
    6344:	d8814115 	stw	r2,1284(sp)
    6348:	003d1c06 	br	57bc <___vfprintf_internal_r+0x10bc>
    634c:	d9414d17 	ldw	r5,1332(sp)
    6350:	00801984 	movi	r2,102
    6354:	28804926 	beq	r5,r2,647c <___vfprintf_internal_r+0x1d7c>
    6358:	200f883a 	mov	r7,r4
    635c:	24805716 	blt	r4,r18,64bc <___vfprintf_internal_r+0x1dbc>
    6360:	d9414c17 	ldw	r5,1328(sp)
    6364:	2880004c 	andi	r2,r5,1
    6368:	10000126 	beq	r2,zero,6370 <___vfprintf_internal_r+0x1c70>
    636c:	21c00044 	addi	r7,r4,1
    6370:	d9c14515 	stw	r7,1300(sp)
    6374:	383fcc0e 	bge	r7,zero,62a8 <___vfprintf_internal_r+0x1ba8>
    6378:	d8014515 	stw	zero,1300(sp)
    637c:	003fca06 	br	62a8 <___vfprintf_internal_r+0x1ba8>
    6380:	d9000517 	ldw	r4,20(sp)
    6384:	00bfff04 	movi	r2,-4
    6388:	1100480e 	bge	r2,r4,64ac <___vfprintf_internal_r+0x1dac>
    638c:	99004716 	blt	r19,r4,64ac <___vfprintf_internal_r+0x1dac>
    6390:	d8c14d15 	stw	r3,1332(sp)
    6394:	003ff006 	br	6358 <___vfprintf_internal_r+0x1c58>
    6398:	d8800717 	ldw	r2,28(sp)
    639c:	14bf8b2e 	bgeu	r2,r18,61cc <___vfprintf_internal_r+0x1acc>
    63a0:	9007883a 	mov	r3,r18
    63a4:	01000c04 	movi	r4,48
    63a8:	11000005 	stb	r4,0(r2)
    63ac:	10800044 	addi	r2,r2,1
    63b0:	d8800715 	stw	r2,28(sp)
    63b4:	18bffc1e 	bne	r3,r2,63a8 <___vfprintf_internal_r+0x1ca8>
    63b8:	003f8406 	br	61cc <___vfprintf_internal_r+0x1acc>
    63bc:	d8814117 	ldw	r2,1284(sp)
    63c0:	10c00007 	ldb	r3,0(r2)
    63c4:	00800c04 	movi	r2,48
    63c8:	18805b26 	beq	r3,r2,6538 <___vfprintf_internal_r+0x1e38>
    63cc:	d9000517 	ldw	r4,20(sp)
    63d0:	9125883a 	add	r18,r18,r4
    63d4:	003f7506 	br	61ac <___vfprintf_internal_r+0x1aac>
    63d8:	d9014c17 	ldw	r4,1328(sp)
    63dc:	2080004c 	andi	r2,r4,1
    63e0:	1005003a 	cmpeq	r2,r2,zero
    63e4:	103f6a26 	beq	r2,zero,6190 <___vfprintf_internal_r+0x1a90>
    63e8:	d8800717 	ldw	r2,28(sp)
    63ec:	003f7706 	br	61cc <___vfprintf_internal_r+0x1acc>
    63f0:	d9c14515 	stw	r7,1300(sp)
    63f4:	38004d16 	blt	r7,zero,652c <___vfprintf_internal_r+0x1e2c>
    63f8:	dc814715 	stw	r18,1308(sp)
    63fc:	d8014615 	stw	zero,1304(sp)
    6400:	003b6106 	br	5188 <___vfprintf_internal_r+0xa88>
    6404:	d9014f17 	ldw	r4,1340(sp)
    6408:	d8800504 	addi	r2,sp,20
    640c:	d8800115 	stw	r2,4(sp)
    6410:	d8c00604 	addi	r3,sp,24
    6414:	d8800704 	addi	r2,sp,28
    6418:	800b883a 	mov	r5,r16
    641c:	880d883a 	mov	r6,r17
    6420:	01c000c4 	movi	r7,3
    6424:	d8c00215 	stw	r3,8(sp)
    6428:	d8800315 	stw	r2,12(sp)
    642c:	dcc00015 	stw	r19,0(sp)
    6430:	9829883a 	mov	r20,r19
    6434:	00069240 	call	6924 <_dtoa_r>
    6438:	d8814115 	stw	r2,1284(sp)
    643c:	003f5106 	br	6184 <___vfprintf_internal_r+0x1a84>
    6440:	d8c14217 	ldw	r3,1288(sp)
    6444:	d9014317 	ldw	r4,1292(sp)
    6448:	07000b44 	movi	fp,45
    644c:	1821883a 	mov	r16,r3
    6450:	2460003c 	xorhi	r17,r4,32768
    6454:	003f3106 	br	611c <___vfprintf_internal_r+0x1a1c>
    6458:	9d000044 	addi	r20,r19,1
    645c:	003f3906 	br	6144 <___vfprintf_internal_r+0x1a44>
    6460:	983f251e 	bne	r19,zero,60f8 <___vfprintf_internal_r+0x19f8>
    6464:	04c00044 	movi	r19,1
    6468:	003f2306 	br	60f8 <___vfprintf_internal_r+0x19f8>
    646c:	04c00184 	movi	r19,6
    6470:	003f2106 	br	60f8 <___vfprintf_internal_r+0x19f8>
    6474:	d8014515 	stw	zero,1300(sp)
    6478:	003eee06 	br	6034 <___vfprintf_internal_r+0x1934>
    647c:	200f883a 	mov	r7,r4
    6480:	0100370e 	bge	zero,r4,6560 <___vfprintf_internal_r+0x1e60>
    6484:	9800031e 	bne	r19,zero,6494 <___vfprintf_internal_r+0x1d94>
    6488:	d9814c17 	ldw	r6,1328(sp)
    648c:	3080004c 	andi	r2,r6,1
    6490:	103fb726 	beq	r2,zero,6370 <___vfprintf_internal_r+0x1c70>
    6494:	20800044 	addi	r2,r4,1
    6498:	98a7883a 	add	r19,r19,r2
    649c:	dcc14515 	stw	r19,1300(sp)
    64a0:	980f883a 	mov	r7,r19
    64a4:	983f800e 	bge	r19,zero,62a8 <___vfprintf_internal_r+0x1ba8>
    64a8:	003fb306 	br	6378 <___vfprintf_internal_r+0x1c78>
    64ac:	d9814d17 	ldw	r6,1332(sp)
    64b0:	31bfff84 	addi	r6,r6,-2
    64b4:	d9814d15 	stw	r6,1332(sp)
    64b8:	003f4c06 	br	61ec <___vfprintf_internal_r+0x1aec>
    64bc:	0100180e 	bge	zero,r4,6520 <___vfprintf_internal_r+0x1e20>
    64c0:	00800044 	movi	r2,1
    64c4:	1485883a 	add	r2,r2,r18
    64c8:	d8814515 	stw	r2,1300(sp)
    64cc:	100f883a 	mov	r7,r2
    64d0:	103f750e 	bge	r2,zero,62a8 <___vfprintf_internal_r+0x1ba8>
    64d4:	003fa806 	br	6378 <___vfprintf_internal_r+0x1c78>
    64d8:	80c00c04 	addi	r3,r16,48
    64dc:	00800c04 	movi	r2,48
    64e0:	d8c008c5 	stb	r3,35(sp)
    64e4:	d9800804 	addi	r6,sp,32
    64e8:	d8c00904 	addi	r3,sp,36
    64ec:	d8800885 	stb	r2,34(sp)
    64f0:	003f6506 	br	6288 <___vfprintf_internal_r+0x1b88>
    64f4:	d9014c17 	ldw	r4,1328(sp)
    64f8:	2084703a 	and	r2,r4,r2
    64fc:	103f9c26 	beq	r2,zero,6370 <___vfprintf_internal_r+0x1c70>
    6500:	003f6606 	br	629c <___vfprintf_internal_r+0x1b9c>
    6504:	d9800804 	addi	r6,sp,32
    6508:	d8c00884 	addi	r3,sp,34
    650c:	003f5e06 	br	6288 <___vfprintf_internal_r+0x1b88>
    6510:	00800b44 	movi	r2,45
    6514:	0121c83a 	sub	r16,zero,r4
    6518:	d8800845 	stb	r2,33(sp)
    651c:	003f3d06 	br	6214 <___vfprintf_internal_r+0x1b14>
    6520:	00800084 	movi	r2,2
    6524:	1105c83a 	sub	r2,r2,r4
    6528:	003fe606 	br	64c4 <___vfprintf_internal_r+0x1dc4>
    652c:	d8014515 	stw	zero,1300(sp)
    6530:	dc814715 	stw	r18,1308(sp)
    6534:	003fb106 	br	63fc <___vfprintf_internal_r+0x1cfc>
    6538:	000d883a 	mov	r6,zero
    653c:	000f883a 	mov	r7,zero
    6540:	8009883a 	mov	r4,r16
    6544:	880b883a 	mov	r5,r17
    6548:	000cf500 	call	cf50 <__nedf2>
    654c:	103f9f26 	beq	r2,zero,63cc <___vfprintf_internal_r+0x1ccc>
    6550:	00800044 	movi	r2,1
    6554:	1509c83a 	sub	r4,r2,r20
    6558:	d9000515 	stw	r4,20(sp)
    655c:	003f9b06 	br	63cc <___vfprintf_internal_r+0x1ccc>
    6560:	98000d1e 	bne	r19,zero,6598 <___vfprintf_internal_r+0x1e98>
    6564:	d8c14c17 	ldw	r3,1328(sp)
    6568:	1880004c 	andi	r2,r3,1
    656c:	10000a1e 	bne	r2,zero,6598 <___vfprintf_internal_r+0x1e98>
    6570:	01000044 	movi	r4,1
    6574:	200f883a 	mov	r7,r4
    6578:	d9014515 	stw	r4,1300(sp)
    657c:	003f4a06 	br	62a8 <___vfprintf_internal_r+0x1ba8>
    6580:	3cc00017 	ldw	r19,0(r7)
    6584:	39c00104 	addi	r7,r7,4
    6588:	983d0e0e 	bge	r19,zero,59c4 <___vfprintf_internal_r+0x12c4>
    658c:	b8c00007 	ldb	r3,0(r23)
    6590:	04ffffc4 	movi	r19,-1
    6594:	0038d906 	br	48fc <___vfprintf_internal_r+0x1fc>
    6598:	9cc00084 	addi	r19,r19,2
    659c:	dcc14515 	stw	r19,1300(sp)
    65a0:	980f883a 	mov	r7,r19
    65a4:	983f400e 	bge	r19,zero,62a8 <___vfprintf_internal_r+0x1ba8>
    65a8:	003f7306 	br	6378 <___vfprintf_internal_r+0x1c78>

000065ac <__vfprintf_internal>:
    65ac:	00800074 	movhi	r2,1
    65b0:	108fe904 	addi	r2,r2,16292
    65b4:	2013883a 	mov	r9,r4
    65b8:	11000017 	ldw	r4,0(r2)
    65bc:	2805883a 	mov	r2,r5
    65c0:	300f883a 	mov	r7,r6
    65c4:	480b883a 	mov	r5,r9
    65c8:	100d883a 	mov	r6,r2
    65cc:	00047001 	jmpi	4700 <___vfprintf_internal_r>

000065d0 <__swsetup_r>:
    65d0:	00800074 	movhi	r2,1
    65d4:	108fe904 	addi	r2,r2,16292
    65d8:	10c00017 	ldw	r3,0(r2)
    65dc:	defffd04 	addi	sp,sp,-12
    65e0:	dc400115 	stw	r17,4(sp)
    65e4:	dc000015 	stw	r16,0(sp)
    65e8:	dfc00215 	stw	ra,8(sp)
    65ec:	2023883a 	mov	r17,r4
    65f0:	2821883a 	mov	r16,r5
    65f4:	18000226 	beq	r3,zero,6600 <__swsetup_r+0x30>
    65f8:	18800e17 	ldw	r2,56(r3)
    65fc:	10001f26 	beq	r2,zero,667c <__swsetup_r+0xac>
    6600:	8100030b 	ldhu	r4,12(r16)
    6604:	2080020c 	andi	r2,r4,8
    6608:	10002826 	beq	r2,zero,66ac <__swsetup_r+0xdc>
    660c:	81400417 	ldw	r5,16(r16)
    6610:	28001d26 	beq	r5,zero,6688 <__swsetup_r+0xb8>
    6614:	2080004c 	andi	r2,r4,1
    6618:	1005003a 	cmpeq	r2,r2,zero
    661c:	10000b26 	beq	r2,zero,664c <__swsetup_r+0x7c>
    6620:	2080008c 	andi	r2,r4,2
    6624:	10001226 	beq	r2,zero,6670 <__swsetup_r+0xa0>
    6628:	0005883a 	mov	r2,zero
    662c:	80800215 	stw	r2,8(r16)
    6630:	28000b26 	beq	r5,zero,6660 <__swsetup_r+0x90>
    6634:	0005883a 	mov	r2,zero
    6638:	dfc00217 	ldw	ra,8(sp)
    663c:	dc400117 	ldw	r17,4(sp)
    6640:	dc000017 	ldw	r16,0(sp)
    6644:	dec00304 	addi	sp,sp,12
    6648:	f800283a 	ret
    664c:	80800517 	ldw	r2,20(r16)
    6650:	80000215 	stw	zero,8(r16)
    6654:	0085c83a 	sub	r2,zero,r2
    6658:	80800615 	stw	r2,24(r16)
    665c:	283ff51e 	bne	r5,zero,6634 <__swsetup_r+0x64>
    6660:	2080200c 	andi	r2,r4,128
    6664:	103ff326 	beq	r2,zero,6634 <__swsetup_r+0x64>
    6668:	00bfffc4 	movi	r2,-1
    666c:	003ff206 	br	6638 <__swsetup_r+0x68>
    6670:	80800517 	ldw	r2,20(r16)
    6674:	80800215 	stw	r2,8(r16)
    6678:	003fed06 	br	6630 <__swsetup_r+0x60>
    667c:	1809883a 	mov	r4,r3
    6680:	00081700 	call	8170 <__sinit>
    6684:	003fde06 	br	6600 <__swsetup_r+0x30>
    6688:	20c0a00c 	andi	r3,r4,640
    668c:	00808004 	movi	r2,512
    6690:	18bfe026 	beq	r3,r2,6614 <__swsetup_r+0x44>
    6694:	8809883a 	mov	r4,r17
    6698:	800b883a 	mov	r5,r16
    669c:	0008ee80 	call	8ee8 <__smakebuf_r>
    66a0:	8100030b 	ldhu	r4,12(r16)
    66a4:	81400417 	ldw	r5,16(r16)
    66a8:	003fda06 	br	6614 <__swsetup_r+0x44>
    66ac:	2080040c 	andi	r2,r4,16
    66b0:	103fed26 	beq	r2,zero,6668 <__swsetup_r+0x98>
    66b4:	2080010c 	andi	r2,r4,4
    66b8:	10001226 	beq	r2,zero,6704 <__swsetup_r+0x134>
    66bc:	81400c17 	ldw	r5,48(r16)
    66c0:	28000526 	beq	r5,zero,66d8 <__swsetup_r+0x108>
    66c4:	80801004 	addi	r2,r16,64
    66c8:	28800226 	beq	r5,r2,66d4 <__swsetup_r+0x104>
    66cc:	8809883a 	mov	r4,r17
    66d0:	00084f40 	call	84f4 <_free_r>
    66d4:	80000c15 	stw	zero,48(r16)
    66d8:	8080030b 	ldhu	r2,12(r16)
    66dc:	81400417 	ldw	r5,16(r16)
    66e0:	80000115 	stw	zero,4(r16)
    66e4:	10bff6cc 	andi	r2,r2,65499
    66e8:	8080030d 	sth	r2,12(r16)
    66ec:	81400015 	stw	r5,0(r16)
    66f0:	8080030b 	ldhu	r2,12(r16)
    66f4:	10800214 	ori	r2,r2,8
    66f8:	113fffcc 	andi	r4,r2,65535
    66fc:	8080030d 	sth	r2,12(r16)
    6700:	003fc306 	br	6610 <__swsetup_r+0x40>
    6704:	81400417 	ldw	r5,16(r16)
    6708:	003ff906 	br	66f0 <__swsetup_r+0x120>

0000670c <quorem>:
    670c:	28c00417 	ldw	r3,16(r5)
    6710:	20800417 	ldw	r2,16(r4)
    6714:	defff604 	addi	sp,sp,-40
    6718:	ddc00715 	stw	r23,28(sp)
    671c:	dd400515 	stw	r21,20(sp)
    6720:	dfc00915 	stw	ra,36(sp)
    6724:	df000815 	stw	fp,32(sp)
    6728:	dd800615 	stw	r22,24(sp)
    672c:	dd000415 	stw	r20,16(sp)
    6730:	dcc00315 	stw	r19,12(sp)
    6734:	dc800215 	stw	r18,8(sp)
    6738:	dc400115 	stw	r17,4(sp)
    673c:	dc000015 	stw	r16,0(sp)
    6740:	202f883a 	mov	r23,r4
    6744:	282b883a 	mov	r21,r5
    6748:	10c07416 	blt	r2,r3,691c <quorem+0x210>
    674c:	1c7fffc4 	addi	r17,r3,-1
    6750:	8c45883a 	add	r2,r17,r17
    6754:	1085883a 	add	r2,r2,r2
    6758:	2c000504 	addi	r16,r5,20
    675c:	24c00504 	addi	r19,r4,20
    6760:	14ed883a 	add	r22,r2,r19
    6764:	80a5883a 	add	r18,r16,r2
    6768:	b7000017 	ldw	fp,0(r22)
    676c:	91400017 	ldw	r5,0(r18)
    6770:	e009883a 	mov	r4,fp
    6774:	29400044 	addi	r5,r5,1
    6778:	00044f80 	call	44f8 <__udivsi3>
    677c:	1029883a 	mov	r20,r2
    6780:	10003c1e 	bne	r2,zero,6874 <quorem+0x168>
    6784:	a80b883a 	mov	r5,r21
    6788:	b809883a 	mov	r4,r23
    678c:	0009c140 	call	9c14 <__mcmp>
    6790:	10002b16 	blt	r2,zero,6840 <quorem+0x134>
    6794:	a5000044 	addi	r20,r20,1
    6798:	980f883a 	mov	r7,r19
    679c:	0011883a 	mov	r8,zero
    67a0:	0009883a 	mov	r4,zero
    67a4:	81400017 	ldw	r5,0(r16)
    67a8:	38c00017 	ldw	r3,0(r7)
    67ac:	84000104 	addi	r16,r16,4
    67b0:	28bfffcc 	andi	r2,r5,65535
    67b4:	2085883a 	add	r2,r4,r2
    67b8:	11bfffcc 	andi	r6,r2,65535
    67bc:	193fffcc 	andi	r4,r3,65535
    67c0:	1004d43a 	srli	r2,r2,16
    67c4:	280ad43a 	srli	r5,r5,16
    67c8:	2189c83a 	sub	r4,r4,r6
    67cc:	2209883a 	add	r4,r4,r8
    67d0:	1806d43a 	srli	r3,r3,16
    67d4:	288b883a 	add	r5,r5,r2
    67d8:	200dd43a 	srai	r6,r4,16
    67dc:	28bfffcc 	andi	r2,r5,65535
    67e0:	1887c83a 	sub	r3,r3,r2
    67e4:	1987883a 	add	r3,r3,r6
    67e8:	3900000d 	sth	r4,0(r7)
    67ec:	38c0008d 	sth	r3,2(r7)
    67f0:	2808d43a 	srli	r4,r5,16
    67f4:	39c00104 	addi	r7,r7,4
    67f8:	1811d43a 	srai	r8,r3,16
    67fc:	943fe92e 	bgeu	r18,r16,67a4 <quorem+0x98>
    6800:	8c45883a 	add	r2,r17,r17
    6804:	1085883a 	add	r2,r2,r2
    6808:	9885883a 	add	r2,r19,r2
    680c:	10c00017 	ldw	r3,0(r2)
    6810:	18000b1e 	bne	r3,zero,6840 <quorem+0x134>
    6814:	113fff04 	addi	r4,r2,-4
    6818:	9900082e 	bgeu	r19,r4,683c <quorem+0x130>
    681c:	10bfff17 	ldw	r2,-4(r2)
    6820:	10000326 	beq	r2,zero,6830 <quorem+0x124>
    6824:	00000506 	br	683c <quorem+0x130>
    6828:	20800017 	ldw	r2,0(r4)
    682c:	1000031e 	bne	r2,zero,683c <quorem+0x130>
    6830:	213fff04 	addi	r4,r4,-4
    6834:	8c7fffc4 	addi	r17,r17,-1
    6838:	993ffb36 	bltu	r19,r4,6828 <quorem+0x11c>
    683c:	bc400415 	stw	r17,16(r23)
    6840:	a005883a 	mov	r2,r20
    6844:	dfc00917 	ldw	ra,36(sp)
    6848:	df000817 	ldw	fp,32(sp)
    684c:	ddc00717 	ldw	r23,28(sp)
    6850:	dd800617 	ldw	r22,24(sp)
    6854:	dd400517 	ldw	r21,20(sp)
    6858:	dd000417 	ldw	r20,16(sp)
    685c:	dcc00317 	ldw	r19,12(sp)
    6860:	dc800217 	ldw	r18,8(sp)
    6864:	dc400117 	ldw	r17,4(sp)
    6868:	dc000017 	ldw	r16,0(sp)
    686c:	dec00a04 	addi	sp,sp,40
    6870:	f800283a 	ret
    6874:	980f883a 	mov	r7,r19
    6878:	8011883a 	mov	r8,r16
    687c:	0013883a 	mov	r9,zero
    6880:	000d883a 	mov	r6,zero
    6884:	40c00017 	ldw	r3,0(r8)
    6888:	39000017 	ldw	r4,0(r7)
    688c:	42000104 	addi	r8,r8,4
    6890:	18bfffcc 	andi	r2,r3,65535
    6894:	a085383a 	mul	r2,r20,r2
    6898:	1806d43a 	srli	r3,r3,16
    689c:	217fffcc 	andi	r5,r4,65535
    68a0:	3085883a 	add	r2,r6,r2
    68a4:	11bfffcc 	andi	r6,r2,65535
    68a8:	a0c7383a 	mul	r3,r20,r3
    68ac:	1004d43a 	srli	r2,r2,16
    68b0:	298bc83a 	sub	r5,r5,r6
    68b4:	2a4b883a 	add	r5,r5,r9
    68b8:	2008d43a 	srli	r4,r4,16
    68bc:	1887883a 	add	r3,r3,r2
    68c0:	280dd43a 	srai	r6,r5,16
    68c4:	18bfffcc 	andi	r2,r3,65535
    68c8:	2089c83a 	sub	r4,r4,r2
    68cc:	2189883a 	add	r4,r4,r6
    68d0:	3900008d 	sth	r4,2(r7)
    68d4:	3940000d 	sth	r5,0(r7)
    68d8:	180cd43a 	srli	r6,r3,16
    68dc:	39c00104 	addi	r7,r7,4
    68e0:	2013d43a 	srai	r9,r4,16
    68e4:	923fe72e 	bgeu	r18,r8,6884 <quorem+0x178>
    68e8:	e03fa61e 	bne	fp,zero,6784 <quorem+0x78>
    68ec:	b0ffff04 	addi	r3,r22,-4
    68f0:	98c0082e 	bgeu	r19,r3,6914 <quorem+0x208>
    68f4:	b0bfff17 	ldw	r2,-4(r22)
    68f8:	10000326 	beq	r2,zero,6908 <quorem+0x1fc>
    68fc:	00000506 	br	6914 <quorem+0x208>
    6900:	18800017 	ldw	r2,0(r3)
    6904:	1000031e 	bne	r2,zero,6914 <quorem+0x208>
    6908:	18ffff04 	addi	r3,r3,-4
    690c:	8c7fffc4 	addi	r17,r17,-1
    6910:	98fffb36 	bltu	r19,r3,6900 <quorem+0x1f4>
    6914:	bc400415 	stw	r17,16(r23)
    6918:	003f9a06 	br	6784 <quorem+0x78>
    691c:	0005883a 	mov	r2,zero
    6920:	003fc806 	br	6844 <quorem+0x138>

00006924 <_dtoa_r>:
    6924:	22001017 	ldw	r8,64(r4)
    6928:	deffda04 	addi	sp,sp,-152
    692c:	dd402115 	stw	r21,132(sp)
    6930:	dd002015 	stw	r20,128(sp)
    6934:	dc801e15 	stw	r18,120(sp)
    6938:	dc401d15 	stw	r17,116(sp)
    693c:	dfc02515 	stw	ra,148(sp)
    6940:	df002415 	stw	fp,144(sp)
    6944:	ddc02315 	stw	r23,140(sp)
    6948:	dd802215 	stw	r22,136(sp)
    694c:	dcc01f15 	stw	r19,124(sp)
    6950:	dc001c15 	stw	r16,112(sp)
    6954:	d9001615 	stw	r4,88(sp)
    6958:	3023883a 	mov	r17,r6
    695c:	2829883a 	mov	r20,r5
    6960:	d9c01715 	stw	r7,92(sp)
    6964:	dc802817 	ldw	r18,160(sp)
    6968:	302b883a 	mov	r21,r6
    696c:	40000a26 	beq	r8,zero,6998 <_dtoa_r+0x74>
    6970:	20801117 	ldw	r2,68(r4)
    6974:	400b883a 	mov	r5,r8
    6978:	40800115 	stw	r2,4(r8)
    697c:	20c01117 	ldw	r3,68(r4)
    6980:	00800044 	movi	r2,1
    6984:	10c4983a 	sll	r2,r2,r3
    6988:	40800215 	stw	r2,8(r8)
    698c:	0009ab80 	call	9ab8 <_Bfree>
    6990:	d8c01617 	ldw	r3,88(sp)
    6994:	18001015 	stw	zero,64(r3)
    6998:	8800a316 	blt	r17,zero,6c28 <_dtoa_r+0x304>
    699c:	90000015 	stw	zero,0(r18)
    69a0:	a8dffc2c 	andhi	r3,r21,32752
    69a4:	009ffc34 	movhi	r2,32752
    69a8:	18809126 	beq	r3,r2,6bf0 <_dtoa_r+0x2cc>
    69ac:	000d883a 	mov	r6,zero
    69b0:	000f883a 	mov	r7,zero
    69b4:	a009883a 	mov	r4,r20
    69b8:	a80b883a 	mov	r5,r21
    69bc:	dd001215 	stw	r20,72(sp)
    69c0:	dd401315 	stw	r21,76(sp)
    69c4:	000cf500 	call	cf50 <__nedf2>
    69c8:	1000171e 	bne	r2,zero,6a28 <_dtoa_r+0x104>
    69cc:	d9802717 	ldw	r6,156(sp)
    69d0:	00800044 	movi	r2,1
    69d4:	30800015 	stw	r2,0(r6)
    69d8:	d8802917 	ldw	r2,164(sp)
    69dc:	10029b26 	beq	r2,zero,744c <_dtoa_r+0xb28>
    69e0:	d9002917 	ldw	r4,164(sp)
    69e4:	00800074 	movhi	r2,1
    69e8:	1087bb44 	addi	r2,r2,7917
    69ec:	10ffffc4 	addi	r3,r2,-1
    69f0:	20800015 	stw	r2,0(r4)
    69f4:	1805883a 	mov	r2,r3
    69f8:	dfc02517 	ldw	ra,148(sp)
    69fc:	df002417 	ldw	fp,144(sp)
    6a00:	ddc02317 	ldw	r23,140(sp)
    6a04:	dd802217 	ldw	r22,136(sp)
    6a08:	dd402117 	ldw	r21,132(sp)
    6a0c:	dd002017 	ldw	r20,128(sp)
    6a10:	dcc01f17 	ldw	r19,124(sp)
    6a14:	dc801e17 	ldw	r18,120(sp)
    6a18:	dc401d17 	ldw	r17,116(sp)
    6a1c:	dc001c17 	ldw	r16,112(sp)
    6a20:	dec02604 	addi	sp,sp,152
    6a24:	f800283a 	ret
    6a28:	d9001617 	ldw	r4,88(sp)
    6a2c:	d9401217 	ldw	r5,72(sp)
    6a30:	d8800104 	addi	r2,sp,4
    6a34:	a80d883a 	mov	r6,r21
    6a38:	d9c00204 	addi	r7,sp,8
    6a3c:	d8800015 	stw	r2,0(sp)
    6a40:	000a0f40 	call	a0f4 <__d2b>
    6a44:	d8800715 	stw	r2,28(sp)
    6a48:	a804d53a 	srli	r2,r21,20
    6a4c:	1101ffcc 	andi	r4,r2,2047
    6a50:	20008626 	beq	r4,zero,6c6c <_dtoa_r+0x348>
    6a54:	d8c01217 	ldw	r3,72(sp)
    6a58:	00800434 	movhi	r2,16
    6a5c:	10bfffc4 	addi	r2,r2,-1
    6a60:	ddc00117 	ldw	r23,4(sp)
    6a64:	a884703a 	and	r2,r21,r2
    6a68:	1811883a 	mov	r8,r3
    6a6c:	124ffc34 	orhi	r9,r2,16368
    6a70:	25bf0044 	addi	r22,r4,-1023
    6a74:	d8000815 	stw	zero,32(sp)
    6a78:	0005883a 	mov	r2,zero
    6a7c:	00cffe34 	movhi	r3,16376
    6a80:	480b883a 	mov	r5,r9
    6a84:	4009883a 	mov	r4,r8
    6a88:	180f883a 	mov	r7,r3
    6a8c:	100d883a 	mov	r6,r2
    6a90:	000c7b80 	call	c7b8 <__subdf3>
    6a94:	0218dbf4 	movhi	r8,25455
    6a98:	4210d844 	addi	r8,r8,17249
    6a9c:	024ff4f4 	movhi	r9,16339
    6aa0:	4a61e9c4 	addi	r9,r9,-30809
    6aa4:	480f883a 	mov	r7,r9
    6aa8:	400d883a 	mov	r6,r8
    6aac:	180b883a 	mov	r5,r3
    6ab0:	1009883a 	mov	r4,r2
    6ab4:	000c8ac0 	call	c8ac <__muldf3>
    6ab8:	0222d874 	movhi	r8,35681
    6abc:	42322cc4 	addi	r8,r8,-14157
    6ac0:	024ff1f4 	movhi	r9,16327
    6ac4:	4a628a04 	addi	r9,r9,-30168
    6ac8:	480f883a 	mov	r7,r9
    6acc:	400d883a 	mov	r6,r8
    6ad0:	180b883a 	mov	r5,r3
    6ad4:	1009883a 	mov	r4,r2
    6ad8:	000c8380 	call	c838 <__adddf3>
    6adc:	b009883a 	mov	r4,r22
    6ae0:	1021883a 	mov	r16,r2
    6ae4:	1823883a 	mov	r17,r3
    6ae8:	000d1700 	call	d170 <__floatsidf>
    6aec:	021427f4 	movhi	r8,20639
    6af0:	421e7ec4 	addi	r8,r8,31227
    6af4:	024ff4f4 	movhi	r9,16339
    6af8:	4a5104c4 	addi	r9,r9,17427
    6afc:	480f883a 	mov	r7,r9
    6b00:	400d883a 	mov	r6,r8
    6b04:	180b883a 	mov	r5,r3
    6b08:	1009883a 	mov	r4,r2
    6b0c:	000c8ac0 	call	c8ac <__muldf3>
    6b10:	180f883a 	mov	r7,r3
    6b14:	880b883a 	mov	r5,r17
    6b18:	100d883a 	mov	r6,r2
    6b1c:	8009883a 	mov	r4,r16
    6b20:	000c8380 	call	c838 <__adddf3>
    6b24:	1009883a 	mov	r4,r2
    6b28:	180b883a 	mov	r5,r3
    6b2c:	1021883a 	mov	r16,r2
    6b30:	1823883a 	mov	r17,r3
    6b34:	000d2680 	call	d268 <__fixdfsi>
    6b38:	000d883a 	mov	r6,zero
    6b3c:	000f883a 	mov	r7,zero
    6b40:	8009883a 	mov	r4,r16
    6b44:	880b883a 	mov	r5,r17
    6b48:	d8800d15 	stw	r2,52(sp)
    6b4c:	000d0e80 	call	d0e8 <__ltdf2>
    6b50:	10031716 	blt	r2,zero,77b0 <_dtoa_r+0xe8c>
    6b54:	d8c00d17 	ldw	r3,52(sp)
    6b58:	00800584 	movi	r2,22
    6b5c:	10c1482e 	bgeu	r2,r3,7080 <_dtoa_r+0x75c>
    6b60:	01000044 	movi	r4,1
    6b64:	d9000c15 	stw	r4,48(sp)
    6b68:	bd85c83a 	sub	r2,r23,r22
    6b6c:	11bfffc4 	addi	r6,r2,-1
    6b70:	30030b16 	blt	r6,zero,77a0 <_dtoa_r+0xe7c>
    6b74:	d9800a15 	stw	r6,40(sp)
    6b78:	d8001115 	stw	zero,68(sp)
    6b7c:	d8c00d17 	ldw	r3,52(sp)
    6b80:	1802ff16 	blt	r3,zero,7780 <_dtoa_r+0xe5c>
    6b84:	d9000a17 	ldw	r4,40(sp)
    6b88:	d8c00915 	stw	r3,36(sp)
    6b8c:	d8001015 	stw	zero,64(sp)
    6b90:	20c9883a 	add	r4,r4,r3
    6b94:	d9000a15 	stw	r4,40(sp)
    6b98:	d9001717 	ldw	r4,92(sp)
    6b9c:	00800244 	movi	r2,9
    6ba0:	11004636 	bltu	r2,r4,6cbc <_dtoa_r+0x398>
    6ba4:	00800144 	movi	r2,5
    6ba8:	11020416 	blt	r2,r4,73bc <_dtoa_r+0xa98>
    6bac:	04400044 	movi	r17,1
    6bb0:	d8c01717 	ldw	r3,92(sp)
    6bb4:	00800144 	movi	r2,5
    6bb8:	10c1ed36 	bltu	r2,r3,7370 <_dtoa_r+0xa4c>
    6bbc:	18c5883a 	add	r2,r3,r3
    6bc0:	1085883a 	add	r2,r2,r2
    6bc4:	00c00034 	movhi	r3,0
    6bc8:	18daf604 	addi	r3,r3,27608
    6bcc:	10c5883a 	add	r2,r2,r3
    6bd0:	11000017 	ldw	r4,0(r2)
    6bd4:	2000683a 	jmp	r4
    6bd8:	00006cc4 	movi	zero,435
    6bdc:	00006cc4 	movi	zero,435
    6be0:	000076c4 	movi	zero,475
    6be4:	0000769c 	xori	zero,zero,474
    6be8:	000076e0 	cmpeqi	zero,zero,475
    6bec:	000076ec 	andhi	zero,zero,475
    6bf0:	d9002717 	ldw	r4,156(sp)
    6bf4:	0089c3c4 	movi	r2,9999
    6bf8:	20800015 	stw	r2,0(r4)
    6bfc:	a0001026 	beq	r20,zero,6c40 <_dtoa_r+0x31c>
    6c00:	00c00074 	movhi	r3,1
    6c04:	18c7c704 	addi	r3,r3,7964
    6c08:	d9802917 	ldw	r6,164(sp)
    6c0c:	303f7926 	beq	r6,zero,69f4 <_dtoa_r+0xd0>
    6c10:	188000c7 	ldb	r2,3(r3)
    6c14:	190000c4 	addi	r4,r3,3
    6c18:	1000101e 	bne	r2,zero,6c5c <_dtoa_r+0x338>
    6c1c:	d8802917 	ldw	r2,164(sp)
    6c20:	11000015 	stw	r4,0(r2)
    6c24:	003f7306 	br	69f4 <_dtoa_r+0xd0>
    6c28:	00a00034 	movhi	r2,32768
    6c2c:	10bfffc4 	addi	r2,r2,-1
    6c30:	00c00044 	movi	r3,1
    6c34:	88aa703a 	and	r21,r17,r2
    6c38:	90c00015 	stw	r3,0(r18)
    6c3c:	003f5806 	br	69a0 <_dtoa_r+0x7c>
    6c40:	00800434 	movhi	r2,16
    6c44:	10bfffc4 	addi	r2,r2,-1
    6c48:	a884703a 	and	r2,r21,r2
    6c4c:	103fec1e 	bne	r2,zero,6c00 <_dtoa_r+0x2dc>
    6c50:	00c00074 	movhi	r3,1
    6c54:	18c7c404 	addi	r3,r3,7952
    6c58:	003feb06 	br	6c08 <_dtoa_r+0x2e4>
    6c5c:	d8802917 	ldw	r2,164(sp)
    6c60:	19000204 	addi	r4,r3,8
    6c64:	11000015 	stw	r4,0(r2)
    6c68:	003f6206 	br	69f4 <_dtoa_r+0xd0>
    6c6c:	ddc00117 	ldw	r23,4(sp)
    6c70:	d8800217 	ldw	r2,8(sp)
    6c74:	01000804 	movi	r4,32
    6c78:	b8c10c84 	addi	r3,r23,1074
    6c7c:	18a3883a 	add	r17,r3,r2
    6c80:	2441b80e 	bge	r4,r17,7364 <_dtoa_r+0xa40>
    6c84:	00c01004 	movi	r3,64
    6c88:	1c47c83a 	sub	r3,r3,r17
    6c8c:	88bff804 	addi	r2,r17,-32
    6c90:	a8c6983a 	sll	r3,r21,r3
    6c94:	a084d83a 	srl	r2,r20,r2
    6c98:	1888b03a 	or	r4,r3,r2
    6c9c:	000d3400 	call	d340 <__floatunsidf>
    6ca0:	1011883a 	mov	r8,r2
    6ca4:	00bf8434 	movhi	r2,65040
    6ca8:	01000044 	movi	r4,1
    6cac:	10d3883a 	add	r9,r2,r3
    6cb0:	8dbef344 	addi	r22,r17,-1075
    6cb4:	d9000815 	stw	r4,32(sp)
    6cb8:	003f6f06 	br	6a78 <_dtoa_r+0x154>
    6cbc:	d8001715 	stw	zero,92(sp)
    6cc0:	04400044 	movi	r17,1
    6cc4:	00bfffc4 	movi	r2,-1
    6cc8:	00c00044 	movi	r3,1
    6ccc:	d8800e15 	stw	r2,56(sp)
    6cd0:	d8002615 	stw	zero,152(sp)
    6cd4:	d8800f15 	stw	r2,60(sp)
    6cd8:	d8c00b15 	stw	r3,44(sp)
    6cdc:	1021883a 	mov	r16,r2
    6ce0:	d8801617 	ldw	r2,88(sp)
    6ce4:	10001115 	stw	zero,68(r2)
    6ce8:	d8801617 	ldw	r2,88(sp)
    6cec:	11401117 	ldw	r5,68(r2)
    6cf0:	1009883a 	mov	r4,r2
    6cf4:	000a0380 	call	a038 <_Balloc>
    6cf8:	d8c01617 	ldw	r3,88(sp)
    6cfc:	d8800515 	stw	r2,20(sp)
    6d00:	18801015 	stw	r2,64(r3)
    6d04:	00800384 	movi	r2,14
    6d08:	14006836 	bltu	r2,r16,6eac <_dtoa_r+0x588>
    6d0c:	8805003a 	cmpeq	r2,r17,zero
    6d10:	1000661e 	bne	r2,zero,6eac <_dtoa_r+0x588>
    6d14:	d9000d17 	ldw	r4,52(sp)
    6d18:	0102300e 	bge	zero,r4,75dc <_dtoa_r+0xcb8>
    6d1c:	208003cc 	andi	r2,r4,15
    6d20:	100490fa 	slli	r2,r2,3
    6d24:	2025d13a 	srai	r18,r4,4
    6d28:	00c00074 	movhi	r3,1
    6d2c:	18c7d904 	addi	r3,r3,8036
    6d30:	10c5883a 	add	r2,r2,r3
    6d34:	90c0040c 	andi	r3,r18,16
    6d38:	14000017 	ldw	r16,0(r2)
    6d3c:	14400117 	ldw	r17,4(r2)
    6d40:	18036a1e 	bne	r3,zero,7aec <_dtoa_r+0x11c8>
    6d44:	05800084 	movi	r22,2
    6d48:	90001026 	beq	r18,zero,6d8c <_dtoa_r+0x468>
    6d4c:	04c00074 	movhi	r19,1
    6d50:	9cc80b04 	addi	r19,r19,8236
    6d54:	9080004c 	andi	r2,r18,1
    6d58:	1005003a 	cmpeq	r2,r2,zero
    6d5c:	1000081e 	bne	r2,zero,6d80 <_dtoa_r+0x45c>
    6d60:	99800017 	ldw	r6,0(r19)
    6d64:	99c00117 	ldw	r7,4(r19)
    6d68:	880b883a 	mov	r5,r17
    6d6c:	8009883a 	mov	r4,r16
    6d70:	000c8ac0 	call	c8ac <__muldf3>
    6d74:	1021883a 	mov	r16,r2
    6d78:	b5800044 	addi	r22,r22,1
    6d7c:	1823883a 	mov	r17,r3
    6d80:	9025d07a 	srai	r18,r18,1
    6d84:	9cc00204 	addi	r19,r19,8
    6d88:	903ff21e 	bne	r18,zero,6d54 <_dtoa_r+0x430>
    6d8c:	a80b883a 	mov	r5,r21
    6d90:	a009883a 	mov	r4,r20
    6d94:	880f883a 	mov	r7,r17
    6d98:	800d883a 	mov	r6,r16
    6d9c:	000cc700 	call	cc70 <__divdf3>
    6da0:	1029883a 	mov	r20,r2
    6da4:	182b883a 	mov	r21,r3
    6da8:	d8c00c17 	ldw	r3,48(sp)
    6dac:	1805003a 	cmpeq	r2,r3,zero
    6db0:	1000081e 	bne	r2,zero,6dd4 <_dtoa_r+0x4b0>
    6db4:	0005883a 	mov	r2,zero
    6db8:	00cffc34 	movhi	r3,16368
    6dbc:	180f883a 	mov	r7,r3
    6dc0:	a009883a 	mov	r4,r20
    6dc4:	a80b883a 	mov	r5,r21
    6dc8:	100d883a 	mov	r6,r2
    6dcc:	000d0e80 	call	d0e8 <__ltdf2>
    6dd0:	1003fe16 	blt	r2,zero,7dcc <_dtoa_r+0x14a8>
    6dd4:	b009883a 	mov	r4,r22
    6dd8:	000d1700 	call	d170 <__floatsidf>
    6ddc:	180b883a 	mov	r5,r3
    6de0:	1009883a 	mov	r4,r2
    6de4:	a00d883a 	mov	r6,r20
    6de8:	a80f883a 	mov	r7,r21
    6dec:	000c8ac0 	call	c8ac <__muldf3>
    6df0:	0011883a 	mov	r8,zero
    6df4:	02500734 	movhi	r9,16412
    6df8:	1009883a 	mov	r4,r2
    6dfc:	180b883a 	mov	r5,r3
    6e00:	480f883a 	mov	r7,r9
    6e04:	400d883a 	mov	r6,r8
    6e08:	000c8380 	call	c838 <__adddf3>
    6e0c:	d9000f17 	ldw	r4,60(sp)
    6e10:	102d883a 	mov	r22,r2
    6e14:	00bf3034 	movhi	r2,64704
    6e18:	18b9883a 	add	fp,r3,r2
    6e1c:	e02f883a 	mov	r23,fp
    6e20:	20028f1e 	bne	r4,zero,7860 <_dtoa_r+0xf3c>
    6e24:	0005883a 	mov	r2,zero
    6e28:	00d00534 	movhi	r3,16404
    6e2c:	a009883a 	mov	r4,r20
    6e30:	a80b883a 	mov	r5,r21
    6e34:	180f883a 	mov	r7,r3
    6e38:	100d883a 	mov	r6,r2
    6e3c:	000c7b80 	call	c7b8 <__subdf3>
    6e40:	1009883a 	mov	r4,r2
    6e44:	e00f883a 	mov	r7,fp
    6e48:	180b883a 	mov	r5,r3
    6e4c:	b00d883a 	mov	r6,r22
    6e50:	1025883a 	mov	r18,r2
    6e54:	1827883a 	mov	r19,r3
    6e58:	000cfd80 	call	cfd8 <__gtdf2>
    6e5c:	00834f16 	blt	zero,r2,7b9c <_dtoa_r+0x1278>
    6e60:	e0e0003c 	xorhi	r3,fp,32768
    6e64:	9009883a 	mov	r4,r18
    6e68:	980b883a 	mov	r5,r19
    6e6c:	180f883a 	mov	r7,r3
    6e70:	b00d883a 	mov	r6,r22
    6e74:	000d0e80 	call	d0e8 <__ltdf2>
    6e78:	1000080e 	bge	r2,zero,6e9c <_dtoa_r+0x578>
    6e7c:	0027883a 	mov	r19,zero
    6e80:	0025883a 	mov	r18,zero
    6e84:	d8802617 	ldw	r2,152(sp)
    6e88:	df000517 	ldw	fp,20(sp)
    6e8c:	d8000615 	stw	zero,24(sp)
    6e90:	0084303a 	nor	r2,zero,r2
    6e94:	d8800d15 	stw	r2,52(sp)
    6e98:	00019b06 	br	7508 <_dtoa_r+0xbe4>
    6e9c:	d9801217 	ldw	r6,72(sp)
    6ea0:	d8801317 	ldw	r2,76(sp)
    6ea4:	3029883a 	mov	r20,r6
    6ea8:	102b883a 	mov	r21,r2
    6eac:	d8c00217 	ldw	r3,8(sp)
    6eb0:	18008516 	blt	r3,zero,70c8 <_dtoa_r+0x7a4>
    6eb4:	d9000d17 	ldw	r4,52(sp)
    6eb8:	00800384 	movi	r2,14
    6ebc:	11008216 	blt	r2,r4,70c8 <_dtoa_r+0x7a4>
    6ec0:	200490fa 	slli	r2,r4,3
    6ec4:	d9802617 	ldw	r6,152(sp)
    6ec8:	00c00074 	movhi	r3,1
    6ecc:	18c7d904 	addi	r3,r3,8036
    6ed0:	10c5883a 	add	r2,r2,r3
    6ed4:	14800017 	ldw	r18,0(r2)
    6ed8:	14c00117 	ldw	r19,4(r2)
    6edc:	30031e16 	blt	r6,zero,7b58 <_dtoa_r+0x1234>
    6ee0:	d9000517 	ldw	r4,20(sp)
    6ee4:	d8c00f17 	ldw	r3,60(sp)
    6ee8:	a823883a 	mov	r17,r21
    6eec:	a021883a 	mov	r16,r20
    6ef0:	192b883a 	add	r21,r3,r4
    6ef4:	2039883a 	mov	fp,r4
    6ef8:	00000f06 	br	6f38 <_dtoa_r+0x614>
    6efc:	0005883a 	mov	r2,zero
    6f00:	00d00934 	movhi	r3,16420
    6f04:	5009883a 	mov	r4,r10
    6f08:	580b883a 	mov	r5,r11
    6f0c:	180f883a 	mov	r7,r3
    6f10:	100d883a 	mov	r6,r2
    6f14:	000c8ac0 	call	c8ac <__muldf3>
    6f18:	180b883a 	mov	r5,r3
    6f1c:	000d883a 	mov	r6,zero
    6f20:	000f883a 	mov	r7,zero
    6f24:	1009883a 	mov	r4,r2
    6f28:	1021883a 	mov	r16,r2
    6f2c:	1823883a 	mov	r17,r3
    6f30:	000cf500 	call	cf50 <__nedf2>
    6f34:	10004526 	beq	r2,zero,704c <_dtoa_r+0x728>
    6f38:	900d883a 	mov	r6,r18
    6f3c:	980f883a 	mov	r7,r19
    6f40:	8009883a 	mov	r4,r16
    6f44:	880b883a 	mov	r5,r17
    6f48:	000cc700 	call	cc70 <__divdf3>
    6f4c:	180b883a 	mov	r5,r3
    6f50:	1009883a 	mov	r4,r2
    6f54:	000d2680 	call	d268 <__fixdfsi>
    6f58:	1009883a 	mov	r4,r2
    6f5c:	1029883a 	mov	r20,r2
    6f60:	000d1700 	call	d170 <__floatsidf>
    6f64:	180f883a 	mov	r7,r3
    6f68:	9009883a 	mov	r4,r18
    6f6c:	980b883a 	mov	r5,r19
    6f70:	100d883a 	mov	r6,r2
    6f74:	000c8ac0 	call	c8ac <__muldf3>
    6f78:	180f883a 	mov	r7,r3
    6f7c:	880b883a 	mov	r5,r17
    6f80:	8009883a 	mov	r4,r16
    6f84:	100d883a 	mov	r6,r2
    6f88:	000c7b80 	call	c7b8 <__subdf3>
    6f8c:	1015883a 	mov	r10,r2
    6f90:	a0800c04 	addi	r2,r20,48
    6f94:	e0800005 	stb	r2,0(fp)
    6f98:	e7000044 	addi	fp,fp,1
    6f9c:	1817883a 	mov	r11,r3
    6fa0:	e57fd61e 	bne	fp,r21,6efc <_dtoa_r+0x5d8>
    6fa4:	500d883a 	mov	r6,r10
    6fa8:	180f883a 	mov	r7,r3
    6fac:	5009883a 	mov	r4,r10
    6fb0:	180b883a 	mov	r5,r3
    6fb4:	000c8380 	call	c838 <__adddf3>
    6fb8:	100d883a 	mov	r6,r2
    6fbc:	9009883a 	mov	r4,r18
    6fc0:	980b883a 	mov	r5,r19
    6fc4:	180f883a 	mov	r7,r3
    6fc8:	1021883a 	mov	r16,r2
    6fcc:	1823883a 	mov	r17,r3
    6fd0:	000d0e80 	call	d0e8 <__ltdf2>
    6fd4:	10000816 	blt	r2,zero,6ff8 <_dtoa_r+0x6d4>
    6fd8:	980b883a 	mov	r5,r19
    6fdc:	800d883a 	mov	r6,r16
    6fe0:	880f883a 	mov	r7,r17
    6fe4:	9009883a 	mov	r4,r18
    6fe8:	000cec80 	call	cec8 <__eqdf2>
    6fec:	1000171e 	bne	r2,zero,704c <_dtoa_r+0x728>
    6ff0:	a080004c 	andi	r2,r20,1
    6ff4:	10001526 	beq	r2,zero,704c <_dtoa_r+0x728>
    6ff8:	d8800d17 	ldw	r2,52(sp)
    6ffc:	d8800415 	stw	r2,16(sp)
    7000:	e009883a 	mov	r4,fp
    7004:	213fffc4 	addi	r4,r4,-1
    7008:	20c00007 	ldb	r3,0(r4)
    700c:	00800e44 	movi	r2,57
    7010:	1880081e 	bne	r3,r2,7034 <_dtoa_r+0x710>
    7014:	d8800517 	ldw	r2,20(sp)
    7018:	113ffa1e 	bne	r2,r4,7004 <_dtoa_r+0x6e0>
    701c:	d8c00417 	ldw	r3,16(sp)
    7020:	d9800517 	ldw	r6,20(sp)
    7024:	00800c04 	movi	r2,48
    7028:	18c00044 	addi	r3,r3,1
    702c:	d8c00415 	stw	r3,16(sp)
    7030:	30800005 	stb	r2,0(r6)
    7034:	20800003 	ldbu	r2,0(r4)
    7038:	d8c00417 	ldw	r3,16(sp)
    703c:	27000044 	addi	fp,r4,1
    7040:	10800044 	addi	r2,r2,1
    7044:	d8c00d15 	stw	r3,52(sp)
    7048:	20800005 	stb	r2,0(r4)
    704c:	d9001617 	ldw	r4,88(sp)
    7050:	d9400717 	ldw	r5,28(sp)
    7054:	0009ab80 	call	9ab8 <_Bfree>
    7058:	e0000005 	stb	zero,0(fp)
    705c:	d9800d17 	ldw	r6,52(sp)
    7060:	d8c02717 	ldw	r3,156(sp)
    7064:	d9002917 	ldw	r4,164(sp)
    7068:	30800044 	addi	r2,r6,1
    706c:	18800015 	stw	r2,0(r3)
    7070:	20029c26 	beq	r4,zero,7ae4 <_dtoa_r+0x11c0>
    7074:	d8c00517 	ldw	r3,20(sp)
    7078:	27000015 	stw	fp,0(r4)
    707c:	003e5d06 	br	69f4 <_dtoa_r+0xd0>
    7080:	d9800d17 	ldw	r6,52(sp)
    7084:	00c00074 	movhi	r3,1
    7088:	18c7d904 	addi	r3,r3,8036
    708c:	d9001217 	ldw	r4,72(sp)
    7090:	300490fa 	slli	r2,r6,3
    7094:	d9401317 	ldw	r5,76(sp)
    7098:	10c5883a 	add	r2,r2,r3
    709c:	12000017 	ldw	r8,0(r2)
    70a0:	12400117 	ldw	r9,4(r2)
    70a4:	400d883a 	mov	r6,r8
    70a8:	480f883a 	mov	r7,r9
    70ac:	000d0e80 	call	d0e8 <__ltdf2>
    70b0:	1000030e 	bge	r2,zero,70c0 <_dtoa_r+0x79c>
    70b4:	d8800d17 	ldw	r2,52(sp)
    70b8:	10bfffc4 	addi	r2,r2,-1
    70bc:	d8800d15 	stw	r2,52(sp)
    70c0:	d8000c15 	stw	zero,48(sp)
    70c4:	003ea806 	br	6b68 <_dtoa_r+0x244>
    70c8:	d9000b17 	ldw	r4,44(sp)
    70cc:	202cc03a 	cmpne	r22,r4,zero
    70d0:	b000c71e 	bne	r22,zero,73f0 <_dtoa_r+0xacc>
    70d4:	dc001117 	ldw	r16,68(sp)
    70d8:	dc801017 	ldw	r18,64(sp)
    70dc:	0027883a 	mov	r19,zero
    70e0:	04000b0e 	bge	zero,r16,7110 <_dtoa_r+0x7ec>
    70e4:	d8c00a17 	ldw	r3,40(sp)
    70e8:	00c0090e 	bge	zero,r3,7110 <_dtoa_r+0x7ec>
    70ec:	8005883a 	mov	r2,r16
    70f0:	1c011316 	blt	r3,r16,7540 <_dtoa_r+0xc1c>
    70f4:	d9000a17 	ldw	r4,40(sp)
    70f8:	d9801117 	ldw	r6,68(sp)
    70fc:	80a1c83a 	sub	r16,r16,r2
    7100:	2089c83a 	sub	r4,r4,r2
    7104:	308dc83a 	sub	r6,r6,r2
    7108:	d9000a15 	stw	r4,40(sp)
    710c:	d9801115 	stw	r6,68(sp)
    7110:	d8801017 	ldw	r2,64(sp)
    7114:	0080150e 	bge	zero,r2,716c <_dtoa_r+0x848>
    7118:	d8c00b17 	ldw	r3,44(sp)
    711c:	1805003a 	cmpeq	r2,r3,zero
    7120:	1001c91e 	bne	r2,zero,7848 <_dtoa_r+0xf24>
    7124:	04800e0e 	bge	zero,r18,7160 <_dtoa_r+0x83c>
    7128:	d9001617 	ldw	r4,88(sp)
    712c:	980b883a 	mov	r5,r19
    7130:	900d883a 	mov	r6,r18
    7134:	000a86c0 	call	a86c <__pow5mult>
    7138:	d9001617 	ldw	r4,88(sp)
    713c:	d9800717 	ldw	r6,28(sp)
    7140:	100b883a 	mov	r5,r2
    7144:	1027883a 	mov	r19,r2
    7148:	000a5480 	call	a548 <__multiply>
    714c:	d9001617 	ldw	r4,88(sp)
    7150:	d9400717 	ldw	r5,28(sp)
    7154:	1023883a 	mov	r17,r2
    7158:	0009ab80 	call	9ab8 <_Bfree>
    715c:	dc400715 	stw	r17,28(sp)
    7160:	d9001017 	ldw	r4,64(sp)
    7164:	248dc83a 	sub	r6,r4,r18
    7168:	30010e1e 	bne	r6,zero,75a4 <_dtoa_r+0xc80>
    716c:	d9001617 	ldw	r4,88(sp)
    7170:	04400044 	movi	r17,1
    7174:	880b883a 	mov	r5,r17
    7178:	000a7300 	call	a730 <__i2b>
    717c:	d9800917 	ldw	r6,36(sp)
    7180:	1025883a 	mov	r18,r2
    7184:	0180040e 	bge	zero,r6,7198 <_dtoa_r+0x874>
    7188:	d9001617 	ldw	r4,88(sp)
    718c:	100b883a 	mov	r5,r2
    7190:	000a86c0 	call	a86c <__pow5mult>
    7194:	1025883a 	mov	r18,r2
    7198:	d8801717 	ldw	r2,92(sp)
    719c:	8880f30e 	bge	r17,r2,756c <_dtoa_r+0xc48>
    71a0:	0023883a 	mov	r17,zero
    71a4:	d9800917 	ldw	r6,36(sp)
    71a8:	30019e1e 	bne	r6,zero,7824 <_dtoa_r+0xf00>
    71ac:	00c00044 	movi	r3,1
    71b0:	d9000a17 	ldw	r4,40(sp)
    71b4:	20c5883a 	add	r2,r4,r3
    71b8:	10c007cc 	andi	r3,r2,31
    71bc:	1800841e 	bne	r3,zero,73d0 <_dtoa_r+0xaac>
    71c0:	00800704 	movi	r2,28
    71c4:	d9000a17 	ldw	r4,40(sp)
    71c8:	d9801117 	ldw	r6,68(sp)
    71cc:	80a1883a 	add	r16,r16,r2
    71d0:	2089883a 	add	r4,r4,r2
    71d4:	308d883a 	add	r6,r6,r2
    71d8:	d9000a15 	stw	r4,40(sp)
    71dc:	d9801115 	stw	r6,68(sp)
    71e0:	d8801117 	ldw	r2,68(sp)
    71e4:	0080050e 	bge	zero,r2,71fc <_dtoa_r+0x8d8>
    71e8:	d9400717 	ldw	r5,28(sp)
    71ec:	d9001617 	ldw	r4,88(sp)
    71f0:	100d883a 	mov	r6,r2
    71f4:	000a3fc0 	call	a3fc <__lshift>
    71f8:	d8800715 	stw	r2,28(sp)
    71fc:	d8c00a17 	ldw	r3,40(sp)
    7200:	00c0050e 	bge	zero,r3,7218 <_dtoa_r+0x8f4>
    7204:	d9001617 	ldw	r4,88(sp)
    7208:	900b883a 	mov	r5,r18
    720c:	180d883a 	mov	r6,r3
    7210:	000a3fc0 	call	a3fc <__lshift>
    7214:	1025883a 	mov	r18,r2
    7218:	d9000c17 	ldw	r4,48(sp)
    721c:	2005003a 	cmpeq	r2,r4,zero
    7220:	10016f26 	beq	r2,zero,77e0 <_dtoa_r+0xebc>
    7224:	d9000f17 	ldw	r4,60(sp)
    7228:	0102170e 	bge	zero,r4,7a88 <_dtoa_r+0x1164>
    722c:	d9800b17 	ldw	r6,44(sp)
    7230:	3005003a 	cmpeq	r2,r6,zero
    7234:	1000881e 	bne	r2,zero,7458 <_dtoa_r+0xb34>
    7238:	0400050e 	bge	zero,r16,7250 <_dtoa_r+0x92c>
    723c:	d9001617 	ldw	r4,88(sp)
    7240:	980b883a 	mov	r5,r19
    7244:	800d883a 	mov	r6,r16
    7248:	000a3fc0 	call	a3fc <__lshift>
    724c:	1027883a 	mov	r19,r2
    7250:	8804c03a 	cmpne	r2,r17,zero
    7254:	1002541e 	bne	r2,zero,7ba8 <_dtoa_r+0x1284>
    7258:	980b883a 	mov	r5,r19
    725c:	dd800517 	ldw	r22,20(sp)
    7260:	dcc00615 	stw	r19,24(sp)
    7264:	a700004c 	andi	fp,r20,1
    7268:	2827883a 	mov	r19,r5
    726c:	d9000717 	ldw	r4,28(sp)
    7270:	900b883a 	mov	r5,r18
    7274:	000670c0 	call	670c <quorem>
    7278:	d9000717 	ldw	r4,28(sp)
    727c:	d9400617 	ldw	r5,24(sp)
    7280:	1023883a 	mov	r17,r2
    7284:	8dc00c04 	addi	r23,r17,48
    7288:	0009c140 	call	9c14 <__mcmp>
    728c:	d9001617 	ldw	r4,88(sp)
    7290:	900b883a 	mov	r5,r18
    7294:	980d883a 	mov	r6,r19
    7298:	1029883a 	mov	r20,r2
    729c:	000a2700 	call	a270 <__mdiff>
    72a0:	102b883a 	mov	r21,r2
    72a4:	10800317 	ldw	r2,12(r2)
    72a8:	1001281e 	bne	r2,zero,774c <_dtoa_r+0xe28>
    72ac:	d9000717 	ldw	r4,28(sp)
    72b0:	a80b883a 	mov	r5,r21
    72b4:	0009c140 	call	9c14 <__mcmp>
    72b8:	d9001617 	ldw	r4,88(sp)
    72bc:	1021883a 	mov	r16,r2
    72c0:	a80b883a 	mov	r5,r21
    72c4:	0009ab80 	call	9ab8 <_Bfree>
    72c8:	8000041e 	bne	r16,zero,72dc <_dtoa_r+0x9b8>
    72cc:	d8801717 	ldw	r2,92(sp)
    72d0:	1000021e 	bne	r2,zero,72dc <_dtoa_r+0x9b8>
    72d4:	e004c03a 	cmpne	r2,fp,zero
    72d8:	10011726 	beq	r2,zero,7738 <_dtoa_r+0xe14>
    72dc:	a0010616 	blt	r20,zero,76f8 <_dtoa_r+0xdd4>
    72e0:	a000041e 	bne	r20,zero,72f4 <_dtoa_r+0x9d0>
    72e4:	d8c01717 	ldw	r3,92(sp)
    72e8:	1800021e 	bne	r3,zero,72f4 <_dtoa_r+0x9d0>
    72ec:	e004c03a 	cmpne	r2,fp,zero
    72f0:	10010126 	beq	r2,zero,76f8 <_dtoa_r+0xdd4>
    72f4:	04023d16 	blt	zero,r16,7bec <_dtoa_r+0x12c8>
    72f8:	b5c00005 	stb	r23,0(r22)
    72fc:	d9800517 	ldw	r6,20(sp)
    7300:	d9000f17 	ldw	r4,60(sp)
    7304:	b5800044 	addi	r22,r22,1
    7308:	3105883a 	add	r2,r6,r4
    730c:	b0806526 	beq	r22,r2,74a4 <_dtoa_r+0xb80>
    7310:	d9400717 	ldw	r5,28(sp)
    7314:	d9001617 	ldw	r4,88(sp)
    7318:	01800284 	movi	r6,10
    731c:	000f883a 	mov	r7,zero
    7320:	000a76c0 	call	a76c <__multadd>
    7324:	d8800715 	stw	r2,28(sp)
    7328:	d8800617 	ldw	r2,24(sp)
    732c:	14c10c26 	beq	r2,r19,7760 <_dtoa_r+0xe3c>
    7330:	d9400617 	ldw	r5,24(sp)
    7334:	d9001617 	ldw	r4,88(sp)
    7338:	01800284 	movi	r6,10
    733c:	000f883a 	mov	r7,zero
    7340:	000a76c0 	call	a76c <__multadd>
    7344:	d9001617 	ldw	r4,88(sp)
    7348:	980b883a 	mov	r5,r19
    734c:	01800284 	movi	r6,10
    7350:	000f883a 	mov	r7,zero
    7354:	d8800615 	stw	r2,24(sp)
    7358:	000a76c0 	call	a76c <__multadd>
    735c:	1027883a 	mov	r19,r2
    7360:	003fc206 	br	726c <_dtoa_r+0x948>
    7364:	2445c83a 	sub	r2,r4,r17
    7368:	a088983a 	sll	r4,r20,r2
    736c:	003e4b06 	br	6c9c <_dtoa_r+0x378>
    7370:	01bfffc4 	movi	r6,-1
    7374:	00800044 	movi	r2,1
    7378:	d9800e15 	stw	r6,56(sp)
    737c:	d9800f15 	stw	r6,60(sp)
    7380:	d8800b15 	stw	r2,44(sp)
    7384:	d8c01617 	ldw	r3,88(sp)
    7388:	008005c4 	movi	r2,23
    738c:	18001115 	stw	zero,68(r3)
    7390:	1580082e 	bgeu	r2,r22,73b4 <_dtoa_r+0xa90>
    7394:	00c00104 	movi	r3,4
    7398:	0009883a 	mov	r4,zero
    739c:	18c7883a 	add	r3,r3,r3
    73a0:	18800504 	addi	r2,r3,20
    73a4:	21000044 	addi	r4,r4,1
    73a8:	b0bffc2e 	bgeu	r22,r2,739c <_dtoa_r+0xa78>
    73ac:	d9801617 	ldw	r6,88(sp)
    73b0:	31001115 	stw	r4,68(r6)
    73b4:	dc000f17 	ldw	r16,60(sp)
    73b8:	003e4b06 	br	6ce8 <_dtoa_r+0x3c4>
    73bc:	d9801717 	ldw	r6,92(sp)
    73c0:	0023883a 	mov	r17,zero
    73c4:	31bfff04 	addi	r6,r6,-4
    73c8:	d9801715 	stw	r6,92(sp)
    73cc:	003df806 	br	6bb0 <_dtoa_r+0x28c>
    73d0:	00800804 	movi	r2,32
    73d4:	10c9c83a 	sub	r4,r2,r3
    73d8:	00c00104 	movi	r3,4
    73dc:	19005a16 	blt	r3,r4,7548 <_dtoa_r+0xc24>
    73e0:	008000c4 	movi	r2,3
    73e4:	113f7e16 	blt	r2,r4,71e0 <_dtoa_r+0x8bc>
    73e8:	20800704 	addi	r2,r4,28
    73ec:	003f7506 	br	71c4 <_dtoa_r+0x8a0>
    73f0:	d9801717 	ldw	r6,92(sp)
    73f4:	00800044 	movi	r2,1
    73f8:	1180a10e 	bge	r2,r6,7680 <_dtoa_r+0xd5c>
    73fc:	d9800f17 	ldw	r6,60(sp)
    7400:	d8c01017 	ldw	r3,64(sp)
    7404:	30bfffc4 	addi	r2,r6,-1
    7408:	1881c616 	blt	r3,r2,7b24 <_dtoa_r+0x1200>
    740c:	18a5c83a 	sub	r18,r3,r2
    7410:	d8800f17 	ldw	r2,60(sp)
    7414:	10026216 	blt	r2,zero,7da0 <_dtoa_r+0x147c>
    7418:	dc001117 	ldw	r16,68(sp)
    741c:	1007883a 	mov	r3,r2
    7420:	d9800a17 	ldw	r6,40(sp)
    7424:	d8801117 	ldw	r2,68(sp)
    7428:	d9001617 	ldw	r4,88(sp)
    742c:	30cd883a 	add	r6,r6,r3
    7430:	10c5883a 	add	r2,r2,r3
    7434:	01400044 	movi	r5,1
    7438:	d9800a15 	stw	r6,40(sp)
    743c:	d8801115 	stw	r2,68(sp)
    7440:	000a7300 	call	a730 <__i2b>
    7444:	1027883a 	mov	r19,r2
    7448:	003f2506 	br	70e0 <_dtoa_r+0x7bc>
    744c:	00c00074 	movhi	r3,1
    7450:	18c7bb04 	addi	r3,r3,7916
    7454:	003d6706 	br	69f4 <_dtoa_r+0xd0>
    7458:	dd800517 	ldw	r22,20(sp)
    745c:	04000044 	movi	r16,1
    7460:	00000706 	br	7480 <_dtoa_r+0xb5c>
    7464:	d9400717 	ldw	r5,28(sp)
    7468:	d9001617 	ldw	r4,88(sp)
    746c:	01800284 	movi	r6,10
    7470:	000f883a 	mov	r7,zero
    7474:	000a76c0 	call	a76c <__multadd>
    7478:	d8800715 	stw	r2,28(sp)
    747c:	84000044 	addi	r16,r16,1
    7480:	d9000717 	ldw	r4,28(sp)
    7484:	900b883a 	mov	r5,r18
    7488:	000670c0 	call	670c <quorem>
    748c:	15c00c04 	addi	r23,r2,48
    7490:	b5c00005 	stb	r23,0(r22)
    7494:	d8c00f17 	ldw	r3,60(sp)
    7498:	b5800044 	addi	r22,r22,1
    749c:	80fff116 	blt	r16,r3,7464 <_dtoa_r+0xb40>
    74a0:	d8000615 	stw	zero,24(sp)
    74a4:	d9400717 	ldw	r5,28(sp)
    74a8:	d9001617 	ldw	r4,88(sp)
    74ac:	01800044 	movi	r6,1
    74b0:	000a3fc0 	call	a3fc <__lshift>
    74b4:	1009883a 	mov	r4,r2
    74b8:	900b883a 	mov	r5,r18
    74bc:	d8800715 	stw	r2,28(sp)
    74c0:	0009c140 	call	9c14 <__mcmp>
    74c4:	00803c0e 	bge	zero,r2,75b8 <_dtoa_r+0xc94>
    74c8:	b009883a 	mov	r4,r22
    74cc:	213fffc4 	addi	r4,r4,-1
    74d0:	21400003 	ldbu	r5,0(r4)
    74d4:	00800e44 	movi	r2,57
    74d8:	28c03fcc 	andi	r3,r5,255
    74dc:	18c0201c 	xori	r3,r3,128
    74e0:	18ffe004 	addi	r3,r3,-128
    74e4:	1881981e 	bne	r3,r2,7b48 <_dtoa_r+0x1224>
    74e8:	d9800517 	ldw	r6,20(sp)
    74ec:	21bff71e 	bne	r4,r6,74cc <_dtoa_r+0xba8>
    74f0:	d8800d17 	ldw	r2,52(sp)
    74f4:	37000044 	addi	fp,r6,1
    74f8:	10800044 	addi	r2,r2,1
    74fc:	d8800d15 	stw	r2,52(sp)
    7500:	00800c44 	movi	r2,49
    7504:	30800005 	stb	r2,0(r6)
    7508:	d9001617 	ldw	r4,88(sp)
    750c:	900b883a 	mov	r5,r18
    7510:	0009ab80 	call	9ab8 <_Bfree>
    7514:	983ecd26 	beq	r19,zero,704c <_dtoa_r+0x728>
    7518:	d8c00617 	ldw	r3,24(sp)
    751c:	18000426 	beq	r3,zero,7530 <_dtoa_r+0xc0c>
    7520:	1cc00326 	beq	r3,r19,7530 <_dtoa_r+0xc0c>
    7524:	d9001617 	ldw	r4,88(sp)
    7528:	180b883a 	mov	r5,r3
    752c:	0009ab80 	call	9ab8 <_Bfree>
    7530:	d9001617 	ldw	r4,88(sp)
    7534:	980b883a 	mov	r5,r19
    7538:	0009ab80 	call	9ab8 <_Bfree>
    753c:	003ec306 	br	704c <_dtoa_r+0x728>
    7540:	1805883a 	mov	r2,r3
    7544:	003eeb06 	br	70f4 <_dtoa_r+0x7d0>
    7548:	d9800a17 	ldw	r6,40(sp)
    754c:	d8c01117 	ldw	r3,68(sp)
    7550:	20bfff04 	addi	r2,r4,-4
    7554:	308d883a 	add	r6,r6,r2
    7558:	1887883a 	add	r3,r3,r2
    755c:	80a1883a 	add	r16,r16,r2
    7560:	d9800a15 	stw	r6,40(sp)
    7564:	d8c01115 	stw	r3,68(sp)
    7568:	003f1d06 	br	71e0 <_dtoa_r+0x8bc>
    756c:	a03f0c1e 	bne	r20,zero,71a0 <_dtoa_r+0x87c>
    7570:	00800434 	movhi	r2,16
    7574:	10bfffc4 	addi	r2,r2,-1
    7578:	a884703a 	and	r2,r21,r2
    757c:	103f081e 	bne	r2,zero,71a0 <_dtoa_r+0x87c>
    7580:	a89ffc2c 	andhi	r2,r21,32752
    7584:	103f0626 	beq	r2,zero,71a0 <_dtoa_r+0x87c>
    7588:	d8c01117 	ldw	r3,68(sp)
    758c:	d9000a17 	ldw	r4,40(sp)
    7590:	18c00044 	addi	r3,r3,1
    7594:	21000044 	addi	r4,r4,1
    7598:	d8c01115 	stw	r3,68(sp)
    759c:	d9000a15 	stw	r4,40(sp)
    75a0:	003f0006 	br	71a4 <_dtoa_r+0x880>
    75a4:	d9400717 	ldw	r5,28(sp)
    75a8:	d9001617 	ldw	r4,88(sp)
    75ac:	000a86c0 	call	a86c <__pow5mult>
    75b0:	d8800715 	stw	r2,28(sp)
    75b4:	003eed06 	br	716c <_dtoa_r+0x848>
    75b8:	1000021e 	bne	r2,zero,75c4 <_dtoa_r+0xca0>
    75bc:	b880004c 	andi	r2,r23,1
    75c0:	103fc11e 	bne	r2,zero,74c8 <_dtoa_r+0xba4>
    75c4:	b5bfffc4 	addi	r22,r22,-1
    75c8:	b0c00007 	ldb	r3,0(r22)
    75cc:	00800c04 	movi	r2,48
    75d0:	18bffc26 	beq	r3,r2,75c4 <_dtoa_r+0xca0>
    75d4:	b7000044 	addi	fp,r22,1
    75d8:	003fcb06 	br	7508 <_dtoa_r+0xbe4>
    75dc:	d9800d17 	ldw	r6,52(sp)
    75e0:	018fc83a 	sub	r7,zero,r6
    75e4:	3801f726 	beq	r7,zero,7dc4 <_dtoa_r+0x14a0>
    75e8:	398003cc 	andi	r6,r7,15
    75ec:	300c90fa 	slli	r6,r6,3
    75f0:	01400074 	movhi	r5,1
    75f4:	2947d904 	addi	r5,r5,8036
    75f8:	d9001217 	ldw	r4,72(sp)
    75fc:	314d883a 	add	r6,r6,r5
    7600:	30c00117 	ldw	r3,4(r6)
    7604:	30800017 	ldw	r2,0(r6)
    7608:	d9401317 	ldw	r5,76(sp)
    760c:	3821d13a 	srai	r16,r7,4
    7610:	100d883a 	mov	r6,r2
    7614:	180f883a 	mov	r7,r3
    7618:	000c8ac0 	call	c8ac <__muldf3>
    761c:	1011883a 	mov	r8,r2
    7620:	1813883a 	mov	r9,r3
    7624:	1029883a 	mov	r20,r2
    7628:	182b883a 	mov	r21,r3
    762c:	8001e526 	beq	r16,zero,7dc4 <_dtoa_r+0x14a0>
    7630:	05800084 	movi	r22,2
    7634:	04400074 	movhi	r17,1
    7638:	8c480b04 	addi	r17,r17,8236
    763c:	8080004c 	andi	r2,r16,1
    7640:	1005003a 	cmpeq	r2,r2,zero
    7644:	1000081e 	bne	r2,zero,7668 <_dtoa_r+0xd44>
    7648:	89800017 	ldw	r6,0(r17)
    764c:	89c00117 	ldw	r7,4(r17)
    7650:	480b883a 	mov	r5,r9
    7654:	4009883a 	mov	r4,r8
    7658:	000c8ac0 	call	c8ac <__muldf3>
    765c:	1011883a 	mov	r8,r2
    7660:	b5800044 	addi	r22,r22,1
    7664:	1813883a 	mov	r9,r3
    7668:	8021d07a 	srai	r16,r16,1
    766c:	8c400204 	addi	r17,r17,8
    7670:	803ff21e 	bne	r16,zero,763c <_dtoa_r+0xd18>
    7674:	4029883a 	mov	r20,r8
    7678:	482b883a 	mov	r21,r9
    767c:	003dca06 	br	6da8 <_dtoa_r+0x484>
    7680:	d9000817 	ldw	r4,32(sp)
    7684:	2005003a 	cmpeq	r2,r4,zero
    7688:	1001f61e 	bne	r2,zero,7e64 <_dtoa_r+0x1540>
    768c:	dc001117 	ldw	r16,68(sp)
    7690:	dc801017 	ldw	r18,64(sp)
    7694:	18c10cc4 	addi	r3,r3,1075
    7698:	003f6106 	br	7420 <_dtoa_r+0xafc>
    769c:	d8000b15 	stw	zero,44(sp)
    76a0:	d9802617 	ldw	r6,152(sp)
    76a4:	d8c00d17 	ldw	r3,52(sp)
    76a8:	30800044 	addi	r2,r6,1
    76ac:	18ad883a 	add	r22,r3,r2
    76b0:	b13fffc4 	addi	r4,r22,-1
    76b4:	d9000e15 	stw	r4,56(sp)
    76b8:	0581f60e 	bge	zero,r22,7e94 <_dtoa_r+0x1570>
    76bc:	dd800f15 	stw	r22,60(sp)
    76c0:	003f3006 	br	7384 <_dtoa_r+0xa60>
    76c4:	d8000b15 	stw	zero,44(sp)
    76c8:	d9002617 	ldw	r4,152(sp)
    76cc:	0101eb0e 	bge	zero,r4,7e7c <_dtoa_r+0x1558>
    76d0:	202d883a 	mov	r22,r4
    76d4:	d9000e15 	stw	r4,56(sp)
    76d8:	d9000f15 	stw	r4,60(sp)
    76dc:	003f2906 	br	7384 <_dtoa_r+0xa60>
    76e0:	01800044 	movi	r6,1
    76e4:	d9800b15 	stw	r6,44(sp)
    76e8:	003ff706 	br	76c8 <_dtoa_r+0xda4>
    76ec:	01000044 	movi	r4,1
    76f0:	d9000b15 	stw	r4,44(sp)
    76f4:	003fea06 	br	76a0 <_dtoa_r+0xd7c>
    76f8:	04000c0e 	bge	zero,r16,772c <_dtoa_r+0xe08>
    76fc:	d9400717 	ldw	r5,28(sp)
    7700:	d9001617 	ldw	r4,88(sp)
    7704:	01800044 	movi	r6,1
    7708:	000a3fc0 	call	a3fc <__lshift>
    770c:	1009883a 	mov	r4,r2
    7710:	900b883a 	mov	r5,r18
    7714:	d8800715 	stw	r2,28(sp)
    7718:	0009c140 	call	9c14 <__mcmp>
    771c:	0081e00e 	bge	zero,r2,7ea0 <_dtoa_r+0x157c>
    7720:	bdc00044 	addi	r23,r23,1
    7724:	00800e84 	movi	r2,58
    7728:	b881a226 	beq	r23,r2,7db4 <_dtoa_r+0x1490>
    772c:	b7000044 	addi	fp,r22,1
    7730:	b5c00005 	stb	r23,0(r22)
    7734:	003f7406 	br	7508 <_dtoa_r+0xbe4>
    7738:	00800e44 	movi	r2,57
    773c:	b8819d26 	beq	r23,r2,7db4 <_dtoa_r+0x1490>
    7740:	053ffa0e 	bge	zero,r20,772c <_dtoa_r+0xe08>
    7744:	8dc00c44 	addi	r23,r17,49
    7748:	003ff806 	br	772c <_dtoa_r+0xe08>
    774c:	d9001617 	ldw	r4,88(sp)
    7750:	a80b883a 	mov	r5,r21
    7754:	04000044 	movi	r16,1
    7758:	0009ab80 	call	9ab8 <_Bfree>
    775c:	003edf06 	br	72dc <_dtoa_r+0x9b8>
    7760:	d9001617 	ldw	r4,88(sp)
    7764:	980b883a 	mov	r5,r19
    7768:	01800284 	movi	r6,10
    776c:	000f883a 	mov	r7,zero
    7770:	000a76c0 	call	a76c <__multadd>
    7774:	1027883a 	mov	r19,r2
    7778:	d8800615 	stw	r2,24(sp)
    777c:	003ebb06 	br	726c <_dtoa_r+0x948>
    7780:	d9801117 	ldw	r6,68(sp)
    7784:	d8800d17 	ldw	r2,52(sp)
    7788:	d8000915 	stw	zero,36(sp)
    778c:	308dc83a 	sub	r6,r6,r2
    7790:	0087c83a 	sub	r3,zero,r2
    7794:	d9801115 	stw	r6,68(sp)
    7798:	d8c01015 	stw	r3,64(sp)
    779c:	003cfe06 	br	6b98 <_dtoa_r+0x274>
    77a0:	018dc83a 	sub	r6,zero,r6
    77a4:	d9801115 	stw	r6,68(sp)
    77a8:	d8000a15 	stw	zero,40(sp)
    77ac:	003cf306 	br	6b7c <_dtoa_r+0x258>
    77b0:	d9000d17 	ldw	r4,52(sp)
    77b4:	000d1700 	call	d170 <__floatsidf>
    77b8:	880b883a 	mov	r5,r17
    77bc:	8009883a 	mov	r4,r16
    77c0:	180f883a 	mov	r7,r3
    77c4:	100d883a 	mov	r6,r2
    77c8:	000cf500 	call	cf50 <__nedf2>
    77cc:	103ce126 	beq	r2,zero,6b54 <_dtoa_r+0x230>
    77d0:	d9800d17 	ldw	r6,52(sp)
    77d4:	31bfffc4 	addi	r6,r6,-1
    77d8:	d9800d15 	stw	r6,52(sp)
    77dc:	003cdd06 	br	6b54 <_dtoa_r+0x230>
    77e0:	d9000717 	ldw	r4,28(sp)
    77e4:	900b883a 	mov	r5,r18
    77e8:	0009c140 	call	9c14 <__mcmp>
    77ec:	103e8d0e 	bge	r2,zero,7224 <_dtoa_r+0x900>
    77f0:	d9400717 	ldw	r5,28(sp)
    77f4:	d9001617 	ldw	r4,88(sp)
    77f8:	01800284 	movi	r6,10
    77fc:	000f883a 	mov	r7,zero
    7800:	000a76c0 	call	a76c <__multadd>
    7804:	d9800d17 	ldw	r6,52(sp)
    7808:	d8800715 	stw	r2,28(sp)
    780c:	31bfffc4 	addi	r6,r6,-1
    7810:	d9800d15 	stw	r6,52(sp)
    7814:	b001a71e 	bne	r22,zero,7eb4 <_dtoa_r+0x1590>
    7818:	d8800e17 	ldw	r2,56(sp)
    781c:	d8800f15 	stw	r2,60(sp)
    7820:	003e8006 	br	7224 <_dtoa_r+0x900>
    7824:	90800417 	ldw	r2,16(r18)
    7828:	1085883a 	add	r2,r2,r2
    782c:	1085883a 	add	r2,r2,r2
    7830:	1485883a 	add	r2,r2,r18
    7834:	11000417 	ldw	r4,16(r2)
    7838:	0009ae00 	call	9ae0 <__hi0bits>
    783c:	00c00804 	movi	r3,32
    7840:	1887c83a 	sub	r3,r3,r2
    7844:	003e5a06 	br	71b0 <_dtoa_r+0x88c>
    7848:	d9400717 	ldw	r5,28(sp)
    784c:	d9801017 	ldw	r6,64(sp)
    7850:	d9001617 	ldw	r4,88(sp)
    7854:	000a86c0 	call	a86c <__pow5mult>
    7858:	d8800715 	stw	r2,28(sp)
    785c:	003e4306 	br	716c <_dtoa_r+0x848>
    7860:	d9800f17 	ldw	r6,60(sp)
    7864:	d8800d17 	ldw	r2,52(sp)
    7868:	d9800315 	stw	r6,12(sp)
    786c:	d8800415 	stw	r2,16(sp)
    7870:	d8c00b17 	ldw	r3,44(sp)
    7874:	1805003a 	cmpeq	r2,r3,zero
    7878:	1000e21e 	bne	r2,zero,7c04 <_dtoa_r+0x12e0>
    787c:	d9000317 	ldw	r4,12(sp)
    7880:	0005883a 	mov	r2,zero
    7884:	00cff834 	movhi	r3,16352
    7888:	200c90fa 	slli	r6,r4,3
    788c:	01000074 	movhi	r4,1
    7890:	2107d904 	addi	r4,r4,8036
    7894:	180b883a 	mov	r5,r3
    7898:	310d883a 	add	r6,r6,r4
    789c:	327fff17 	ldw	r9,-4(r6)
    78a0:	323ffe17 	ldw	r8,-8(r6)
    78a4:	1009883a 	mov	r4,r2
    78a8:	480f883a 	mov	r7,r9
    78ac:	400d883a 	mov	r6,r8
    78b0:	000cc700 	call	cc70 <__divdf3>
    78b4:	180b883a 	mov	r5,r3
    78b8:	b00d883a 	mov	r6,r22
    78bc:	b80f883a 	mov	r7,r23
    78c0:	1009883a 	mov	r4,r2
    78c4:	000c7b80 	call	c7b8 <__subdf3>
    78c8:	a80b883a 	mov	r5,r21
    78cc:	a009883a 	mov	r4,r20
    78d0:	d8c01915 	stw	r3,100(sp)
    78d4:	d8801815 	stw	r2,96(sp)
    78d8:	000d2680 	call	d268 <__fixdfsi>
    78dc:	1009883a 	mov	r4,r2
    78e0:	1027883a 	mov	r19,r2
    78e4:	000d1700 	call	d170 <__floatsidf>
    78e8:	a80b883a 	mov	r5,r21
    78ec:	a009883a 	mov	r4,r20
    78f0:	180f883a 	mov	r7,r3
    78f4:	100d883a 	mov	r6,r2
    78f8:	000c7b80 	call	c7b8 <__subdf3>
    78fc:	d9801817 	ldw	r6,96(sp)
    7900:	1823883a 	mov	r17,r3
    7904:	d8801415 	stw	r2,80(sp)
    7908:	302d883a 	mov	r22,r6
    790c:	d9800517 	ldw	r6,20(sp)
    7910:	9cc00c04 	addi	r19,r19,48
    7914:	dc401515 	stw	r17,84(sp)
    7918:	d8c01917 	ldw	r3,100(sp)
    791c:	34c00005 	stb	r19,0(r6)
    7920:	d8800517 	ldw	r2,20(sp)
    7924:	d9401917 	ldw	r5,100(sp)
    7928:	d9801417 	ldw	r6,80(sp)
    792c:	b009883a 	mov	r4,r22
    7930:	880f883a 	mov	r7,r17
    7934:	182f883a 	mov	r23,r3
    7938:	17000044 	addi	fp,r2,1
    793c:	000cfd80 	call	cfd8 <__gtdf2>
    7940:	00804e16 	blt	zero,r2,7a7c <_dtoa_r+0x1158>
    7944:	d9801417 	ldw	r6,80(sp)
    7948:	0005883a 	mov	r2,zero
    794c:	00cffc34 	movhi	r3,16368
    7950:	180b883a 	mov	r5,r3
    7954:	880f883a 	mov	r7,r17
    7958:	1009883a 	mov	r4,r2
    795c:	000c7b80 	call	c7b8 <__subdf3>
    7960:	d9401917 	ldw	r5,100(sp)
    7964:	180f883a 	mov	r7,r3
    7968:	b009883a 	mov	r4,r22
    796c:	100d883a 	mov	r6,r2
    7970:	000cfd80 	call	cfd8 <__gtdf2>
    7974:	00bda216 	blt	zero,r2,7000 <_dtoa_r+0x6dc>
    7978:	d8c00317 	ldw	r3,12(sp)
    797c:	00800044 	movi	r2,1
    7980:	10c01216 	blt	r2,r3,79cc <_dtoa_r+0x10a8>
    7984:	003d4506 	br	6e9c <_dtoa_r+0x578>
    7988:	d9801417 	ldw	r6,80(sp)
    798c:	0005883a 	mov	r2,zero
    7990:	00cffc34 	movhi	r3,16368
    7994:	180b883a 	mov	r5,r3
    7998:	880f883a 	mov	r7,r17
    799c:	1009883a 	mov	r4,r2
    79a0:	000c7b80 	call	c7b8 <__subdf3>
    79a4:	d9c01b17 	ldw	r7,108(sp)
    79a8:	180b883a 	mov	r5,r3
    79ac:	1009883a 	mov	r4,r2
    79b0:	b00d883a 	mov	r6,r22
    79b4:	000d0e80 	call	d0e8 <__ltdf2>
    79b8:	103d9116 	blt	r2,zero,7000 <_dtoa_r+0x6dc>
    79bc:	d9800517 	ldw	r6,20(sp)
    79c0:	d9000317 	ldw	r4,12(sp)
    79c4:	3105883a 	add	r2,r6,r4
    79c8:	e0bd3426 	beq	fp,r2,6e9c <_dtoa_r+0x578>
    79cc:	04500934 	movhi	r17,16420
    79d0:	0021883a 	mov	r16,zero
    79d4:	b80b883a 	mov	r5,r23
    79d8:	b009883a 	mov	r4,r22
    79dc:	800d883a 	mov	r6,r16
    79e0:	880f883a 	mov	r7,r17
    79e4:	000c8ac0 	call	c8ac <__muldf3>
    79e8:	d9401517 	ldw	r5,84(sp)
    79ec:	d9001417 	ldw	r4,80(sp)
    79f0:	880f883a 	mov	r7,r17
    79f4:	000d883a 	mov	r6,zero
    79f8:	d8801a15 	stw	r2,104(sp)
    79fc:	d8c01b15 	stw	r3,108(sp)
    7a00:	000c8ac0 	call	c8ac <__muldf3>
    7a04:	180b883a 	mov	r5,r3
    7a08:	1009883a 	mov	r4,r2
    7a0c:	1823883a 	mov	r17,r3
    7a10:	1021883a 	mov	r16,r2
    7a14:	000d2680 	call	d268 <__fixdfsi>
    7a18:	1009883a 	mov	r4,r2
    7a1c:	102b883a 	mov	r21,r2
    7a20:	000d1700 	call	d170 <__floatsidf>
    7a24:	880b883a 	mov	r5,r17
    7a28:	8009883a 	mov	r4,r16
    7a2c:	180f883a 	mov	r7,r3
    7a30:	100d883a 	mov	r6,r2
    7a34:	000c7b80 	call	c7b8 <__subdf3>
    7a38:	1021883a 	mov	r16,r2
    7a3c:	d9001b17 	ldw	r4,108(sp)
    7a40:	1823883a 	mov	r17,r3
    7a44:	dc001415 	stw	r16,80(sp)
    7a48:	ad400c04 	addi	r21,r21,48
    7a4c:	dc401515 	stw	r17,84(sp)
    7a50:	d8801a17 	ldw	r2,104(sp)
    7a54:	e5400005 	stb	r21,0(fp)
    7a58:	202f883a 	mov	r23,r4
    7a5c:	d9c01b17 	ldw	r7,108(sp)
    7a60:	d9001417 	ldw	r4,80(sp)
    7a64:	880b883a 	mov	r5,r17
    7a68:	100d883a 	mov	r6,r2
    7a6c:	102d883a 	mov	r22,r2
    7a70:	e7000044 	addi	fp,fp,1
    7a74:	000d0e80 	call	d0e8 <__ltdf2>
    7a78:	103fc30e 	bge	r2,zero,7988 <_dtoa_r+0x1064>
    7a7c:	d9000417 	ldw	r4,16(sp)
    7a80:	d9000d15 	stw	r4,52(sp)
    7a84:	003d7106 	br	704c <_dtoa_r+0x728>
    7a88:	d9801717 	ldw	r6,92(sp)
    7a8c:	00800084 	movi	r2,2
    7a90:	11bde60e 	bge	r2,r6,722c <_dtoa_r+0x908>
    7a94:	203cfb1e 	bne	r4,zero,6e84 <_dtoa_r+0x560>
    7a98:	d9001617 	ldw	r4,88(sp)
    7a9c:	900b883a 	mov	r5,r18
    7aa0:	01800144 	movi	r6,5
    7aa4:	000f883a 	mov	r7,zero
    7aa8:	000a76c0 	call	a76c <__multadd>
    7aac:	d9000717 	ldw	r4,28(sp)
    7ab0:	100b883a 	mov	r5,r2
    7ab4:	1025883a 	mov	r18,r2
    7ab8:	0009c140 	call	9c14 <__mcmp>
    7abc:	00bcf10e 	bge	zero,r2,6e84 <_dtoa_r+0x560>
    7ac0:	d8c00d17 	ldw	r3,52(sp)
    7ac4:	d9000517 	ldw	r4,20(sp)
    7ac8:	d8000615 	stw	zero,24(sp)
    7acc:	18c00044 	addi	r3,r3,1
    7ad0:	d8c00d15 	stw	r3,52(sp)
    7ad4:	00800c44 	movi	r2,49
    7ad8:	27000044 	addi	fp,r4,1
    7adc:	20800005 	stb	r2,0(r4)
    7ae0:	003e8906 	br	7508 <_dtoa_r+0xbe4>
    7ae4:	d8c00517 	ldw	r3,20(sp)
    7ae8:	003bc206 	br	69f4 <_dtoa_r+0xd0>
    7aec:	01800074 	movhi	r6,1
    7af0:	31880b04 	addi	r6,r6,8236
    7af4:	30c00917 	ldw	r3,36(r6)
    7af8:	30800817 	ldw	r2,32(r6)
    7afc:	d9001217 	ldw	r4,72(sp)
    7b00:	d9401317 	ldw	r5,76(sp)
    7b04:	180f883a 	mov	r7,r3
    7b08:	100d883a 	mov	r6,r2
    7b0c:	000cc700 	call	cc70 <__divdf3>
    7b10:	948003cc 	andi	r18,r18,15
    7b14:	058000c4 	movi	r22,3
    7b18:	1029883a 	mov	r20,r2
    7b1c:	182b883a 	mov	r21,r3
    7b20:	003c8906 	br	6d48 <_dtoa_r+0x424>
    7b24:	d9001017 	ldw	r4,64(sp)
    7b28:	d9800917 	ldw	r6,36(sp)
    7b2c:	0025883a 	mov	r18,zero
    7b30:	1105c83a 	sub	r2,r2,r4
    7b34:	2089883a 	add	r4,r4,r2
    7b38:	308d883a 	add	r6,r6,r2
    7b3c:	d9001015 	stw	r4,64(sp)
    7b40:	d9800915 	stw	r6,36(sp)
    7b44:	003e3206 	br	7410 <_dtoa_r+0xaec>
    7b48:	28800044 	addi	r2,r5,1
    7b4c:	27000044 	addi	fp,r4,1
    7b50:	20800005 	stb	r2,0(r4)
    7b54:	003e6c06 	br	7508 <_dtoa_r+0xbe4>
    7b58:	d8800f17 	ldw	r2,60(sp)
    7b5c:	00bce016 	blt	zero,r2,6ee0 <_dtoa_r+0x5bc>
    7b60:	d9800f17 	ldw	r6,60(sp)
    7b64:	303cc51e 	bne	r6,zero,6e7c <_dtoa_r+0x558>
    7b68:	0005883a 	mov	r2,zero
    7b6c:	00d00534 	movhi	r3,16404
    7b70:	980b883a 	mov	r5,r19
    7b74:	180f883a 	mov	r7,r3
    7b78:	9009883a 	mov	r4,r18
    7b7c:	100d883a 	mov	r6,r2
    7b80:	000c8ac0 	call	c8ac <__muldf3>
    7b84:	180b883a 	mov	r5,r3
    7b88:	a80f883a 	mov	r7,r21
    7b8c:	1009883a 	mov	r4,r2
    7b90:	a00d883a 	mov	r6,r20
    7b94:	000d0600 	call	d060 <__gedf2>
    7b98:	103cb80e 	bge	r2,zero,6e7c <_dtoa_r+0x558>
    7b9c:	0027883a 	mov	r19,zero
    7ba0:	0025883a 	mov	r18,zero
    7ba4:	003fc606 	br	7ac0 <_dtoa_r+0x119c>
    7ba8:	99400117 	ldw	r5,4(r19)
    7bac:	d9001617 	ldw	r4,88(sp)
    7bb0:	000a0380 	call	a038 <_Balloc>
    7bb4:	99800417 	ldw	r6,16(r19)
    7bb8:	11000304 	addi	r4,r2,12
    7bbc:	99400304 	addi	r5,r19,12
    7bc0:	318d883a 	add	r6,r6,r6
    7bc4:	318d883a 	add	r6,r6,r6
    7bc8:	31800204 	addi	r6,r6,8
    7bcc:	1023883a 	mov	r17,r2
    7bd0:	00098a00 	call	98a0 <memcpy>
    7bd4:	d9001617 	ldw	r4,88(sp)
    7bd8:	880b883a 	mov	r5,r17
    7bdc:	01800044 	movi	r6,1
    7be0:	000a3fc0 	call	a3fc <__lshift>
    7be4:	100b883a 	mov	r5,r2
    7be8:	003d9c06 	br	725c <_dtoa_r+0x938>
    7bec:	00800e44 	movi	r2,57
    7bf0:	b8807026 	beq	r23,r2,7db4 <_dtoa_r+0x1490>
    7bf4:	b8800044 	addi	r2,r23,1
    7bf8:	b7000044 	addi	fp,r22,1
    7bfc:	b0800005 	stb	r2,0(r22)
    7c00:	003e4106 	br	7508 <_dtoa_r+0xbe4>
    7c04:	d8800317 	ldw	r2,12(sp)
    7c08:	01800074 	movhi	r6,1
    7c0c:	3187d904 	addi	r6,r6,8036
    7c10:	b009883a 	mov	r4,r22
    7c14:	100e90fa 	slli	r7,r2,3
    7c18:	b80b883a 	mov	r5,r23
    7c1c:	398f883a 	add	r7,r7,r6
    7c20:	38bffe17 	ldw	r2,-8(r7)
    7c24:	d9800517 	ldw	r6,20(sp)
    7c28:	38ffff17 	ldw	r3,-4(r7)
    7c2c:	37000044 	addi	fp,r6,1
    7c30:	180f883a 	mov	r7,r3
    7c34:	100d883a 	mov	r6,r2
    7c38:	000c8ac0 	call	c8ac <__muldf3>
    7c3c:	a80b883a 	mov	r5,r21
    7c40:	a009883a 	mov	r4,r20
    7c44:	182f883a 	mov	r23,r3
    7c48:	102d883a 	mov	r22,r2
    7c4c:	000d2680 	call	d268 <__fixdfsi>
    7c50:	1009883a 	mov	r4,r2
    7c54:	1027883a 	mov	r19,r2
    7c58:	000d1700 	call	d170 <__floatsidf>
    7c5c:	a80b883a 	mov	r5,r21
    7c60:	a009883a 	mov	r4,r20
    7c64:	180f883a 	mov	r7,r3
    7c68:	100d883a 	mov	r6,r2
    7c6c:	000c7b80 	call	c7b8 <__subdf3>
    7c70:	180b883a 	mov	r5,r3
    7c74:	d8c00517 	ldw	r3,20(sp)
    7c78:	9cc00c04 	addi	r19,r19,48
    7c7c:	1009883a 	mov	r4,r2
    7c80:	1cc00005 	stb	r19,0(r3)
    7c84:	2021883a 	mov	r16,r4
    7c88:	d9000317 	ldw	r4,12(sp)
    7c8c:	00800044 	movi	r2,1
    7c90:	2823883a 	mov	r17,r5
    7c94:	20802226 	beq	r4,r2,7d20 <_dtoa_r+0x13fc>
    7c98:	1029883a 	mov	r20,r2
    7c9c:	0005883a 	mov	r2,zero
    7ca0:	00d00934 	movhi	r3,16420
    7ca4:	180f883a 	mov	r7,r3
    7ca8:	100d883a 	mov	r6,r2
    7cac:	880b883a 	mov	r5,r17
    7cb0:	8009883a 	mov	r4,r16
    7cb4:	000c8ac0 	call	c8ac <__muldf3>
    7cb8:	180b883a 	mov	r5,r3
    7cbc:	1009883a 	mov	r4,r2
    7cc0:	1823883a 	mov	r17,r3
    7cc4:	1021883a 	mov	r16,r2
    7cc8:	000d2680 	call	d268 <__fixdfsi>
    7ccc:	1009883a 	mov	r4,r2
    7cd0:	102b883a 	mov	r21,r2
    7cd4:	000d1700 	call	d170 <__floatsidf>
    7cd8:	880b883a 	mov	r5,r17
    7cdc:	8009883a 	mov	r4,r16
    7ce0:	180f883a 	mov	r7,r3
    7ce4:	100d883a 	mov	r6,r2
    7ce8:	000c7b80 	call	c7b8 <__subdf3>
    7cec:	180b883a 	mov	r5,r3
    7cf0:	d8c00517 	ldw	r3,20(sp)
    7cf4:	1009883a 	mov	r4,r2
    7cf8:	ad400c04 	addi	r21,r21,48
    7cfc:	1d05883a 	add	r2,r3,r20
    7d00:	15400005 	stb	r21,0(r2)
    7d04:	2021883a 	mov	r16,r4
    7d08:	d9000317 	ldw	r4,12(sp)
    7d0c:	a5000044 	addi	r20,r20,1
    7d10:	2823883a 	mov	r17,r5
    7d14:	a13fe11e 	bne	r20,r4,7c9c <_dtoa_r+0x1378>
    7d18:	e505883a 	add	r2,fp,r20
    7d1c:	173fffc4 	addi	fp,r2,-1
    7d20:	0025883a 	mov	r18,zero
    7d24:	04cff834 	movhi	r19,16352
    7d28:	b009883a 	mov	r4,r22
    7d2c:	b80b883a 	mov	r5,r23
    7d30:	900d883a 	mov	r6,r18
    7d34:	980f883a 	mov	r7,r19
    7d38:	000c8380 	call	c838 <__adddf3>
    7d3c:	180b883a 	mov	r5,r3
    7d40:	1009883a 	mov	r4,r2
    7d44:	800d883a 	mov	r6,r16
    7d48:	880f883a 	mov	r7,r17
    7d4c:	000d0e80 	call	d0e8 <__ltdf2>
    7d50:	103cab16 	blt	r2,zero,7000 <_dtoa_r+0x6dc>
    7d54:	0009883a 	mov	r4,zero
    7d58:	980b883a 	mov	r5,r19
    7d5c:	b80f883a 	mov	r7,r23
    7d60:	b00d883a 	mov	r6,r22
    7d64:	000c7b80 	call	c7b8 <__subdf3>
    7d68:	180b883a 	mov	r5,r3
    7d6c:	880f883a 	mov	r7,r17
    7d70:	1009883a 	mov	r4,r2
    7d74:	800d883a 	mov	r6,r16
    7d78:	000cfd80 	call	cfd8 <__gtdf2>
    7d7c:	00bc470e 	bge	zero,r2,6e9c <_dtoa_r+0x578>
    7d80:	00c00c04 	movi	r3,48
    7d84:	e73fffc4 	addi	fp,fp,-1
    7d88:	e0800007 	ldb	r2,0(fp)
    7d8c:	10fffd26 	beq	r2,r3,7d84 <_dtoa_r+0x1460>
    7d90:	d9800417 	ldw	r6,16(sp)
    7d94:	e7000044 	addi	fp,fp,1
    7d98:	d9800d15 	stw	r6,52(sp)
    7d9c:	003cab06 	br	704c <_dtoa_r+0x728>
    7da0:	d8c00f17 	ldw	r3,60(sp)
    7da4:	d9001117 	ldw	r4,68(sp)
    7da8:	20e1c83a 	sub	r16,r4,r3
    7dac:	0007883a 	mov	r3,zero
    7db0:	003d9b06 	br	7420 <_dtoa_r+0xafc>
    7db4:	00800e44 	movi	r2,57
    7db8:	b0800005 	stb	r2,0(r22)
    7dbc:	b5800044 	addi	r22,r22,1
    7dc0:	003dc106 	br	74c8 <_dtoa_r+0xba4>
    7dc4:	05800084 	movi	r22,2
    7dc8:	003bf706 	br	6da8 <_dtoa_r+0x484>
    7dcc:	d9000f17 	ldw	r4,60(sp)
    7dd0:	013c000e 	bge	zero,r4,6dd4 <_dtoa_r+0x4b0>
    7dd4:	d9800e17 	ldw	r6,56(sp)
    7dd8:	01bc300e 	bge	zero,r6,6e9c <_dtoa_r+0x578>
    7ddc:	0005883a 	mov	r2,zero
    7de0:	00d00934 	movhi	r3,16420
    7de4:	a80b883a 	mov	r5,r21
    7de8:	180f883a 	mov	r7,r3
    7dec:	a009883a 	mov	r4,r20
    7df0:	100d883a 	mov	r6,r2
    7df4:	000c8ac0 	call	c8ac <__muldf3>
    7df8:	b1000044 	addi	r4,r22,1
    7dfc:	1021883a 	mov	r16,r2
    7e00:	1823883a 	mov	r17,r3
    7e04:	000d1700 	call	d170 <__floatsidf>
    7e08:	880b883a 	mov	r5,r17
    7e0c:	8009883a 	mov	r4,r16
    7e10:	180f883a 	mov	r7,r3
    7e14:	100d883a 	mov	r6,r2
    7e18:	000c8ac0 	call	c8ac <__muldf3>
    7e1c:	0011883a 	mov	r8,zero
    7e20:	02500734 	movhi	r9,16412
    7e24:	180b883a 	mov	r5,r3
    7e28:	480f883a 	mov	r7,r9
    7e2c:	1009883a 	mov	r4,r2
    7e30:	400d883a 	mov	r6,r8
    7e34:	000c8380 	call	c838 <__adddf3>
    7e38:	102d883a 	mov	r22,r2
    7e3c:	00bf3034 	movhi	r2,64704
    7e40:	10ef883a 	add	r23,r2,r3
    7e44:	d8800d17 	ldw	r2,52(sp)
    7e48:	d8c00e17 	ldw	r3,56(sp)
    7e4c:	8029883a 	mov	r20,r16
    7e50:	10bfffc4 	addi	r2,r2,-1
    7e54:	882b883a 	mov	r21,r17
    7e58:	d8800415 	stw	r2,16(sp)
    7e5c:	d8c00315 	stw	r3,12(sp)
    7e60:	003e8306 	br	7870 <_dtoa_r+0xf4c>
    7e64:	d8800117 	ldw	r2,4(sp)
    7e68:	dc001117 	ldw	r16,68(sp)
    7e6c:	dc801017 	ldw	r18,64(sp)
    7e70:	00c00d84 	movi	r3,54
    7e74:	1887c83a 	sub	r3,r3,r2
    7e78:	003d6906 	br	7420 <_dtoa_r+0xafc>
    7e7c:	01800044 	movi	r6,1
    7e80:	3021883a 	mov	r16,r6
    7e84:	d9800f15 	stw	r6,60(sp)
    7e88:	d9802615 	stw	r6,152(sp)
    7e8c:	d9800e15 	stw	r6,56(sp)
    7e90:	003b9306 	br	6ce0 <_dtoa_r+0x3bc>
    7e94:	b021883a 	mov	r16,r22
    7e98:	dd800f15 	stw	r22,60(sp)
    7e9c:	003b9006 	br	6ce0 <_dtoa_r+0x3bc>
    7ea0:	103e221e 	bne	r2,zero,772c <_dtoa_r+0xe08>
    7ea4:	b880004c 	andi	r2,r23,1
    7ea8:	1005003a 	cmpeq	r2,r2,zero
    7eac:	103e1f1e 	bne	r2,zero,772c <_dtoa_r+0xe08>
    7eb0:	003e1b06 	br	7720 <_dtoa_r+0xdfc>
    7eb4:	d9001617 	ldw	r4,88(sp)
    7eb8:	980b883a 	mov	r5,r19
    7ebc:	01800284 	movi	r6,10
    7ec0:	000f883a 	mov	r7,zero
    7ec4:	000a76c0 	call	a76c <__multadd>
    7ec8:	d8c00e17 	ldw	r3,56(sp)
    7ecc:	1027883a 	mov	r19,r2
    7ed0:	d8c00f15 	stw	r3,60(sp)
    7ed4:	003cd306 	br	7224 <_dtoa_r+0x900>

00007ed8 <_fflush_r>:
    7ed8:	defffb04 	addi	sp,sp,-20
    7edc:	dcc00315 	stw	r19,12(sp)
    7ee0:	dc800215 	stw	r18,8(sp)
    7ee4:	dfc00415 	stw	ra,16(sp)
    7ee8:	dc400115 	stw	r17,4(sp)
    7eec:	dc000015 	stw	r16,0(sp)
    7ef0:	2027883a 	mov	r19,r4
    7ef4:	2825883a 	mov	r18,r5
    7ef8:	20000226 	beq	r4,zero,7f04 <_fflush_r+0x2c>
    7efc:	20800e17 	ldw	r2,56(r4)
    7f00:	10005626 	beq	r2,zero,805c <_fflush_r+0x184>
    7f04:	9100030b 	ldhu	r4,12(r18)
    7f08:	20ffffcc 	andi	r3,r4,65535
    7f0c:	18e0001c 	xori	r3,r3,32768
    7f10:	18e00004 	addi	r3,r3,-32768
    7f14:	1880020c 	andi	r2,r3,8
    7f18:	1000261e 	bne	r2,zero,7fb4 <_fflush_r+0xdc>
    7f1c:	90c00117 	ldw	r3,4(r18)
    7f20:	20820014 	ori	r2,r4,2048
    7f24:	9080030d 	sth	r2,12(r18)
    7f28:	1009883a 	mov	r4,r2
    7f2c:	00c0400e 	bge	zero,r3,8030 <_fflush_r+0x158>
    7f30:	92000a17 	ldw	r8,40(r18)
    7f34:	40004026 	beq	r8,zero,8038 <_fflush_r+0x160>
    7f38:	2084000c 	andi	r2,r4,4096
    7f3c:	10005326 	beq	r2,zero,808c <_fflush_r+0x1b4>
    7f40:	94001417 	ldw	r16,80(r18)
    7f44:	9080030b 	ldhu	r2,12(r18)
    7f48:	1080010c 	andi	r2,r2,4
    7f4c:	1000481e 	bne	r2,zero,8070 <_fflush_r+0x198>
    7f50:	91400717 	ldw	r5,28(r18)
    7f54:	9809883a 	mov	r4,r19
    7f58:	800d883a 	mov	r6,r16
    7f5c:	000f883a 	mov	r7,zero
    7f60:	403ee83a 	callr	r8
    7f64:	8080261e 	bne	r16,r2,8000 <_fflush_r+0x128>
    7f68:	9080030b 	ldhu	r2,12(r18)
    7f6c:	91000417 	ldw	r4,16(r18)
    7f70:	90000115 	stw	zero,4(r18)
    7f74:	10bdffcc 	andi	r2,r2,63487
    7f78:	10ffffcc 	andi	r3,r2,65535
    7f7c:	18c4000c 	andi	r3,r3,4096
    7f80:	9080030d 	sth	r2,12(r18)
    7f84:	91000015 	stw	r4,0(r18)
    7f88:	18002b26 	beq	r3,zero,8038 <_fflush_r+0x160>
    7f8c:	0007883a 	mov	r3,zero
    7f90:	1805883a 	mov	r2,r3
    7f94:	94001415 	stw	r16,80(r18)
    7f98:	dfc00417 	ldw	ra,16(sp)
    7f9c:	dcc00317 	ldw	r19,12(sp)
    7fa0:	dc800217 	ldw	r18,8(sp)
    7fa4:	dc400117 	ldw	r17,4(sp)
    7fa8:	dc000017 	ldw	r16,0(sp)
    7fac:	dec00504 	addi	sp,sp,20
    7fb0:	f800283a 	ret
    7fb4:	94400417 	ldw	r17,16(r18)
    7fb8:	88001f26 	beq	r17,zero,8038 <_fflush_r+0x160>
    7fbc:	90800017 	ldw	r2,0(r18)
    7fc0:	18c000cc 	andi	r3,r3,3
    7fc4:	94400015 	stw	r17,0(r18)
    7fc8:	1461c83a 	sub	r16,r2,r17
    7fcc:	18002526 	beq	r3,zero,8064 <_fflush_r+0x18c>
    7fd0:	0005883a 	mov	r2,zero
    7fd4:	90800215 	stw	r2,8(r18)
    7fd8:	0400170e 	bge	zero,r16,8038 <_fflush_r+0x160>
    7fdc:	90c00917 	ldw	r3,36(r18)
    7fe0:	91400717 	ldw	r5,28(r18)
    7fe4:	880d883a 	mov	r6,r17
    7fe8:	800f883a 	mov	r7,r16
    7fec:	9809883a 	mov	r4,r19
    7ff0:	183ee83a 	callr	r3
    7ff4:	88a3883a 	add	r17,r17,r2
    7ff8:	80a1c83a 	sub	r16,r16,r2
    7ffc:	00bff616 	blt	zero,r2,7fd8 <_fflush_r+0x100>
    8000:	9080030b 	ldhu	r2,12(r18)
    8004:	00ffffc4 	movi	r3,-1
    8008:	10801014 	ori	r2,r2,64
    800c:	9080030d 	sth	r2,12(r18)
    8010:	1805883a 	mov	r2,r3
    8014:	dfc00417 	ldw	ra,16(sp)
    8018:	dcc00317 	ldw	r19,12(sp)
    801c:	dc800217 	ldw	r18,8(sp)
    8020:	dc400117 	ldw	r17,4(sp)
    8024:	dc000017 	ldw	r16,0(sp)
    8028:	dec00504 	addi	sp,sp,20
    802c:	f800283a 	ret
    8030:	90800f17 	ldw	r2,60(r18)
    8034:	00bfbe16 	blt	zero,r2,7f30 <_fflush_r+0x58>
    8038:	0007883a 	mov	r3,zero
    803c:	1805883a 	mov	r2,r3
    8040:	dfc00417 	ldw	ra,16(sp)
    8044:	dcc00317 	ldw	r19,12(sp)
    8048:	dc800217 	ldw	r18,8(sp)
    804c:	dc400117 	ldw	r17,4(sp)
    8050:	dc000017 	ldw	r16,0(sp)
    8054:	dec00504 	addi	sp,sp,20
    8058:	f800283a 	ret
    805c:	00081700 	call	8170 <__sinit>
    8060:	003fa806 	br	7f04 <_fflush_r+0x2c>
    8064:	90800517 	ldw	r2,20(r18)
    8068:	90800215 	stw	r2,8(r18)
    806c:	003fda06 	br	7fd8 <_fflush_r+0x100>
    8070:	90800117 	ldw	r2,4(r18)
    8074:	90c00c17 	ldw	r3,48(r18)
    8078:	80a1c83a 	sub	r16,r16,r2
    807c:	183fb426 	beq	r3,zero,7f50 <_fflush_r+0x78>
    8080:	90800f17 	ldw	r2,60(r18)
    8084:	80a1c83a 	sub	r16,r16,r2
    8088:	003fb106 	br	7f50 <_fflush_r+0x78>
    808c:	91400717 	ldw	r5,28(r18)
    8090:	9809883a 	mov	r4,r19
    8094:	000d883a 	mov	r6,zero
    8098:	01c00044 	movi	r7,1
    809c:	403ee83a 	callr	r8
    80a0:	1021883a 	mov	r16,r2
    80a4:	00bfffc4 	movi	r2,-1
    80a8:	80800226 	beq	r16,r2,80b4 <_fflush_r+0x1dc>
    80ac:	92000a17 	ldw	r8,40(r18)
    80b0:	003fa406 	br	7f44 <_fflush_r+0x6c>
    80b4:	98c00017 	ldw	r3,0(r19)
    80b8:	00800744 	movi	r2,29
    80bc:	18bfde26 	beq	r3,r2,8038 <_fflush_r+0x160>
    80c0:	9080030b 	ldhu	r2,12(r18)
    80c4:	8007883a 	mov	r3,r16
    80c8:	10801014 	ori	r2,r2,64
    80cc:	9080030d 	sth	r2,12(r18)
    80d0:	003fcf06 	br	8010 <_fflush_r+0x138>

000080d4 <fflush>:
    80d4:	01400034 	movhi	r5,0
    80d8:	295fb604 	addi	r5,r5,32472
    80dc:	2007883a 	mov	r3,r4
    80e0:	20000526 	beq	r4,zero,80f8 <fflush+0x24>
    80e4:	00800074 	movhi	r2,1
    80e8:	108fe904 	addi	r2,r2,16292
    80ec:	11000017 	ldw	r4,0(r2)
    80f0:	180b883a 	mov	r5,r3
    80f4:	0007ed81 	jmpi	7ed8 <_fflush_r>
    80f8:	00800074 	movhi	r2,1
    80fc:	108fea04 	addi	r2,r2,16296
    8100:	11000017 	ldw	r4,0(r2)
    8104:	0008ca41 	jmpi	8ca4 <_fwalk_reent>

00008108 <std>:
    8108:	00800074 	movhi	r2,1
    810c:	10ac6004 	addi	r2,r2,-20096
    8110:	20800b15 	stw	r2,44(r4)
    8114:	00800074 	movhi	r2,1
    8118:	10ac9b04 	addi	r2,r2,-19860
    811c:	20800815 	stw	r2,32(r4)
    8120:	00c00074 	movhi	r3,1
    8124:	18ec7c04 	addi	r3,r3,-19984
    8128:	00800074 	movhi	r2,1
    812c:	10ac6204 	addi	r2,r2,-20088
    8130:	2140030d 	sth	r5,12(r4)
    8134:	2180038d 	sth	r6,14(r4)
    8138:	20c00915 	stw	r3,36(r4)
    813c:	20800a15 	stw	r2,40(r4)
    8140:	20000015 	stw	zero,0(r4)
    8144:	20000115 	stw	zero,4(r4)
    8148:	20000215 	stw	zero,8(r4)
    814c:	20000415 	stw	zero,16(r4)
    8150:	20000515 	stw	zero,20(r4)
    8154:	20000615 	stw	zero,24(r4)
    8158:	21000715 	stw	r4,28(r4)
    815c:	f800283a 	ret

00008160 <__sfp_lock_acquire>:
    8160:	f800283a 	ret

00008164 <__sfp_lock_release>:
    8164:	f800283a 	ret

00008168 <__sinit_lock_acquire>:
    8168:	f800283a 	ret

0000816c <__sinit_lock_release>:
    816c:	f800283a 	ret

00008170 <__sinit>:
    8170:	20800e17 	ldw	r2,56(r4)
    8174:	defffd04 	addi	sp,sp,-12
    8178:	dc400115 	stw	r17,4(sp)
    817c:	dc000015 	stw	r16,0(sp)
    8180:	dfc00215 	stw	ra,8(sp)
    8184:	04400044 	movi	r17,1
    8188:	01400104 	movi	r5,4
    818c:	000d883a 	mov	r6,zero
    8190:	2021883a 	mov	r16,r4
    8194:	2200bb04 	addi	r8,r4,748
    8198:	200f883a 	mov	r7,r4
    819c:	10000526 	beq	r2,zero,81b4 <__sinit+0x44>
    81a0:	dfc00217 	ldw	ra,8(sp)
    81a4:	dc400117 	ldw	r17,4(sp)
    81a8:	dc000017 	ldw	r16,0(sp)
    81ac:	dec00304 	addi	sp,sp,12
    81b0:	f800283a 	ret
    81b4:	21000117 	ldw	r4,4(r4)
    81b8:	00800074 	movhi	r2,1
    81bc:	10a09504 	addi	r2,r2,-32172
    81c0:	00c000c4 	movi	r3,3
    81c4:	80800f15 	stw	r2,60(r16)
    81c8:	80c0b915 	stw	r3,740(r16)
    81cc:	8200ba15 	stw	r8,744(r16)
    81d0:	84400e15 	stw	r17,56(r16)
    81d4:	8000b815 	stw	zero,736(r16)
    81d8:	00081080 	call	8108 <std>
    81dc:	81000217 	ldw	r4,8(r16)
    81e0:	880d883a 	mov	r6,r17
    81e4:	800f883a 	mov	r7,r16
    81e8:	01400284 	movi	r5,10
    81ec:	00081080 	call	8108 <std>
    81f0:	81000317 	ldw	r4,12(r16)
    81f4:	800f883a 	mov	r7,r16
    81f8:	01400484 	movi	r5,18
    81fc:	01800084 	movi	r6,2
    8200:	dfc00217 	ldw	ra,8(sp)
    8204:	dc400117 	ldw	r17,4(sp)
    8208:	dc000017 	ldw	r16,0(sp)
    820c:	dec00304 	addi	sp,sp,12
    8210:	00081081 	jmpi	8108 <std>

00008214 <__fp_lock>:
    8214:	0005883a 	mov	r2,zero
    8218:	f800283a 	ret

0000821c <__fp_unlock>:
    821c:	0005883a 	mov	r2,zero
    8220:	f800283a 	ret

00008224 <__fp_unlock_all>:
    8224:	00800074 	movhi	r2,1
    8228:	108fe904 	addi	r2,r2,16292
    822c:	11000017 	ldw	r4,0(r2)
    8230:	01400074 	movhi	r5,1
    8234:	29608704 	addi	r5,r5,-32228
    8238:	0008d6c1 	jmpi	8d6c <_fwalk>

0000823c <__fp_lock_all>:
    823c:	00800074 	movhi	r2,1
    8240:	108fe904 	addi	r2,r2,16292
    8244:	11000017 	ldw	r4,0(r2)
    8248:	01400074 	movhi	r5,1
    824c:	29608504 	addi	r5,r5,-32236
    8250:	0008d6c1 	jmpi	8d6c <_fwalk>

00008254 <_cleanup_r>:
    8254:	01400074 	movhi	r5,1
    8258:	296d8d04 	addi	r5,r5,-18892
    825c:	0008d6c1 	jmpi	8d6c <_fwalk>

00008260 <_cleanup>:
    8260:	00800074 	movhi	r2,1
    8264:	108fea04 	addi	r2,r2,16296
    8268:	11000017 	ldw	r4,0(r2)
    826c:	00082541 	jmpi	8254 <_cleanup_r>

00008270 <__sfmoreglue>:
    8270:	defffc04 	addi	sp,sp,-16
    8274:	dc400115 	stw	r17,4(sp)
    8278:	2c401724 	muli	r17,r5,92
    827c:	dc800215 	stw	r18,8(sp)
    8280:	2825883a 	mov	r18,r5
    8284:	89400304 	addi	r5,r17,12
    8288:	dc000015 	stw	r16,0(sp)
    828c:	dfc00315 	stw	ra,12(sp)
    8290:	000907c0 	call	907c <_malloc_r>
    8294:	0021883a 	mov	r16,zero
    8298:	880d883a 	mov	r6,r17
    829c:	000b883a 	mov	r5,zero
    82a0:	10000626 	beq	r2,zero,82bc <__sfmoreglue+0x4c>
    82a4:	11000304 	addi	r4,r2,12
    82a8:	14800115 	stw	r18,4(r2)
    82ac:	10000015 	stw	zero,0(r2)
    82b0:	11000215 	stw	r4,8(r2)
    82b4:	1021883a 	mov	r16,r2
    82b8:	0009a200 	call	9a20 <memset>
    82bc:	8005883a 	mov	r2,r16
    82c0:	dfc00317 	ldw	ra,12(sp)
    82c4:	dc800217 	ldw	r18,8(sp)
    82c8:	dc400117 	ldw	r17,4(sp)
    82cc:	dc000017 	ldw	r16,0(sp)
    82d0:	dec00404 	addi	sp,sp,16
    82d4:	f800283a 	ret

000082d8 <__sfp>:
    82d8:	defffd04 	addi	sp,sp,-12
    82dc:	00800074 	movhi	r2,1
    82e0:	108fea04 	addi	r2,r2,16296
    82e4:	dc000015 	stw	r16,0(sp)
    82e8:	14000017 	ldw	r16,0(r2)
    82ec:	dc400115 	stw	r17,4(sp)
    82f0:	dfc00215 	stw	ra,8(sp)
    82f4:	80800e17 	ldw	r2,56(r16)
    82f8:	2023883a 	mov	r17,r4
    82fc:	10002626 	beq	r2,zero,8398 <__sfp+0xc0>
    8300:	8400b804 	addi	r16,r16,736
    8304:	80800117 	ldw	r2,4(r16)
    8308:	81000217 	ldw	r4,8(r16)
    830c:	10ffffc4 	addi	r3,r2,-1
    8310:	18000916 	blt	r3,zero,8338 <__sfp+0x60>
    8314:	2080030f 	ldh	r2,12(r4)
    8318:	10000b26 	beq	r2,zero,8348 <__sfp+0x70>
    831c:	017fffc4 	movi	r5,-1
    8320:	00000206 	br	832c <__sfp+0x54>
    8324:	2080030f 	ldh	r2,12(r4)
    8328:	10000726 	beq	r2,zero,8348 <__sfp+0x70>
    832c:	18ffffc4 	addi	r3,r3,-1
    8330:	21001704 	addi	r4,r4,92
    8334:	197ffb1e 	bne	r3,r5,8324 <__sfp+0x4c>
    8338:	80800017 	ldw	r2,0(r16)
    833c:	10001926 	beq	r2,zero,83a4 <__sfp+0xcc>
    8340:	1021883a 	mov	r16,r2
    8344:	003fef06 	br	8304 <__sfp+0x2c>
    8348:	00bfffc4 	movi	r2,-1
    834c:	00c00044 	movi	r3,1
    8350:	2080038d 	sth	r2,14(r4)
    8354:	20c0030d 	sth	r3,12(r4)
    8358:	20000015 	stw	zero,0(r4)
    835c:	20000215 	stw	zero,8(r4)
    8360:	20000115 	stw	zero,4(r4)
    8364:	20000415 	stw	zero,16(r4)
    8368:	20000515 	stw	zero,20(r4)
    836c:	20000615 	stw	zero,24(r4)
    8370:	20000c15 	stw	zero,48(r4)
    8374:	20000d15 	stw	zero,52(r4)
    8378:	20001115 	stw	zero,68(r4)
    837c:	20001215 	stw	zero,72(r4)
    8380:	2005883a 	mov	r2,r4
    8384:	dfc00217 	ldw	ra,8(sp)
    8388:	dc400117 	ldw	r17,4(sp)
    838c:	dc000017 	ldw	r16,0(sp)
    8390:	dec00304 	addi	sp,sp,12
    8394:	f800283a 	ret
    8398:	8009883a 	mov	r4,r16
    839c:	00081700 	call	8170 <__sinit>
    83a0:	003fd706 	br	8300 <__sfp+0x28>
    83a4:	8809883a 	mov	r4,r17
    83a8:	01400104 	movi	r5,4
    83ac:	00082700 	call	8270 <__sfmoreglue>
    83b0:	80800015 	stw	r2,0(r16)
    83b4:	103fe21e 	bne	r2,zero,8340 <__sfp+0x68>
    83b8:	00800304 	movi	r2,12
    83bc:	0009883a 	mov	r4,zero
    83c0:	88800015 	stw	r2,0(r17)
    83c4:	003fee06 	br	8380 <__sfp+0xa8>

000083c8 <_malloc_trim_r>:
    83c8:	defffb04 	addi	sp,sp,-20
    83cc:	dcc00315 	stw	r19,12(sp)
    83d0:	04c00074 	movhi	r19,1
    83d4:	9cca1d04 	addi	r19,r19,10356
    83d8:	dc800215 	stw	r18,8(sp)
    83dc:	dc400115 	stw	r17,4(sp)
    83e0:	dc000015 	stw	r16,0(sp)
    83e4:	2823883a 	mov	r17,r5
    83e8:	2025883a 	mov	r18,r4
    83ec:	dfc00415 	stw	ra,16(sp)
    83f0:	000e1840 	call	e184 <__malloc_lock>
    83f4:	98800217 	ldw	r2,8(r19)
    83f8:	9009883a 	mov	r4,r18
    83fc:	000b883a 	mov	r5,zero
    8400:	10c00117 	ldw	r3,4(r2)
    8404:	00bfff04 	movi	r2,-4
    8408:	18a0703a 	and	r16,r3,r2
    840c:	8463c83a 	sub	r17,r16,r17
    8410:	8c43fbc4 	addi	r17,r17,4079
    8414:	8822d33a 	srli	r17,r17,12
    8418:	0083ffc4 	movi	r2,4095
    841c:	8c7fffc4 	addi	r17,r17,-1
    8420:	8822933a 	slli	r17,r17,12
    8424:	1440060e 	bge	r2,r17,8440 <_malloc_trim_r+0x78>
    8428:	000b1100 	call	b110 <_sbrk_r>
    842c:	98c00217 	ldw	r3,8(r19)
    8430:	9009883a 	mov	r4,r18
    8434:	044bc83a 	sub	r5,zero,r17
    8438:	80c7883a 	add	r3,r16,r3
    843c:	10c00926 	beq	r2,r3,8464 <_malloc_trim_r+0x9c>
    8440:	000e1a40 	call	e1a4 <__malloc_unlock>
    8444:	0005883a 	mov	r2,zero
    8448:	dfc00417 	ldw	ra,16(sp)
    844c:	dcc00317 	ldw	r19,12(sp)
    8450:	dc800217 	ldw	r18,8(sp)
    8454:	dc400117 	ldw	r17,4(sp)
    8458:	dc000017 	ldw	r16,0(sp)
    845c:	dec00504 	addi	sp,sp,20
    8460:	f800283a 	ret
    8464:	9009883a 	mov	r4,r18
    8468:	000b1100 	call	b110 <_sbrk_r>
    846c:	844dc83a 	sub	r6,r16,r17
    8470:	00ffffc4 	movi	r3,-1
    8474:	9009883a 	mov	r4,r18
    8478:	000b883a 	mov	r5,zero
    847c:	01c00074 	movhi	r7,1
    8480:	39d6ee04 	addi	r7,r7,23480
    8484:	31800054 	ori	r6,r6,1
    8488:	10c00926 	beq	r2,r3,84b0 <_malloc_trim_r+0xe8>
    848c:	38800017 	ldw	r2,0(r7)
    8490:	98c00217 	ldw	r3,8(r19)
    8494:	9009883a 	mov	r4,r18
    8498:	1445c83a 	sub	r2,r2,r17
    849c:	38800015 	stw	r2,0(r7)
    84a0:	19800115 	stw	r6,4(r3)
    84a4:	000e1a40 	call	e1a4 <__malloc_unlock>
    84a8:	00800044 	movi	r2,1
    84ac:	003fe606 	br	8448 <_malloc_trim_r+0x80>
    84b0:	000b1100 	call	b110 <_sbrk_r>
    84b4:	99800217 	ldw	r6,8(r19)
    84b8:	100f883a 	mov	r7,r2
    84bc:	9009883a 	mov	r4,r18
    84c0:	1187c83a 	sub	r3,r2,r6
    84c4:	008003c4 	movi	r2,15
    84c8:	19400054 	ori	r5,r3,1
    84cc:	10ffdc0e 	bge	r2,r3,8440 <_malloc_trim_r+0x78>
    84d0:	00800074 	movhi	r2,1
    84d4:	108fee04 	addi	r2,r2,16312
    84d8:	10c00017 	ldw	r3,0(r2)
    84dc:	00800074 	movhi	r2,1
    84e0:	1096ee04 	addi	r2,r2,23480
    84e4:	31400115 	stw	r5,4(r6)
    84e8:	38c7c83a 	sub	r3,r7,r3
    84ec:	10c00015 	stw	r3,0(r2)
    84f0:	003fd306 	br	8440 <_malloc_trim_r+0x78>

000084f4 <_free_r>:
    84f4:	defffd04 	addi	sp,sp,-12
    84f8:	dc400115 	stw	r17,4(sp)
    84fc:	dc000015 	stw	r16,0(sp)
    8500:	dfc00215 	stw	ra,8(sp)
    8504:	2821883a 	mov	r16,r5
    8508:	2023883a 	mov	r17,r4
    850c:	28005a26 	beq	r5,zero,8678 <_free_r+0x184>
    8510:	000e1840 	call	e184 <__malloc_lock>
    8514:	823ffe04 	addi	r8,r16,-8
    8518:	41400117 	ldw	r5,4(r8)
    851c:	00bfff84 	movi	r2,-2
    8520:	02800074 	movhi	r10,1
    8524:	528a1d04 	addi	r10,r10,10356
    8528:	288e703a 	and	r7,r5,r2
    852c:	41cd883a 	add	r6,r8,r7
    8530:	30c00117 	ldw	r3,4(r6)
    8534:	51000217 	ldw	r4,8(r10)
    8538:	00bfff04 	movi	r2,-4
    853c:	1892703a 	and	r9,r3,r2
    8540:	5017883a 	mov	r11,r10
    8544:	31006726 	beq	r6,r4,86e4 <_free_r+0x1f0>
    8548:	2880004c 	andi	r2,r5,1
    854c:	1005003a 	cmpeq	r2,r2,zero
    8550:	32400115 	stw	r9,4(r6)
    8554:	10001a1e 	bne	r2,zero,85c0 <_free_r+0xcc>
    8558:	000b883a 	mov	r5,zero
    855c:	3247883a 	add	r3,r6,r9
    8560:	18800117 	ldw	r2,4(r3)
    8564:	1080004c 	andi	r2,r2,1
    8568:	1000231e 	bne	r2,zero,85f8 <_free_r+0x104>
    856c:	280ac03a 	cmpne	r5,r5,zero
    8570:	3a4f883a 	add	r7,r7,r9
    8574:	2800451e 	bne	r5,zero,868c <_free_r+0x198>
    8578:	31000217 	ldw	r4,8(r6)
    857c:	00800074 	movhi	r2,1
    8580:	108a1f04 	addi	r2,r2,10364
    8584:	20807b26 	beq	r4,r2,8774 <_free_r+0x280>
    8588:	30800317 	ldw	r2,12(r6)
    858c:	3a07883a 	add	r3,r7,r8
    8590:	19c00015 	stw	r7,0(r3)
    8594:	11000215 	stw	r4,8(r2)
    8598:	20800315 	stw	r2,12(r4)
    859c:	38800054 	ori	r2,r7,1
    85a0:	40800115 	stw	r2,4(r8)
    85a4:	28001a26 	beq	r5,zero,8610 <_free_r+0x11c>
    85a8:	8809883a 	mov	r4,r17
    85ac:	dfc00217 	ldw	ra,8(sp)
    85b0:	dc400117 	ldw	r17,4(sp)
    85b4:	dc000017 	ldw	r16,0(sp)
    85b8:	dec00304 	addi	sp,sp,12
    85bc:	000e1a41 	jmpi	e1a4 <__malloc_unlock>
    85c0:	80bffe17 	ldw	r2,-8(r16)
    85c4:	50c00204 	addi	r3,r10,8
    85c8:	4091c83a 	sub	r8,r8,r2
    85cc:	41000217 	ldw	r4,8(r8)
    85d0:	388f883a 	add	r7,r7,r2
    85d4:	20c06126 	beq	r4,r3,875c <_free_r+0x268>
    85d8:	40800317 	ldw	r2,12(r8)
    85dc:	3247883a 	add	r3,r6,r9
    85e0:	000b883a 	mov	r5,zero
    85e4:	11000215 	stw	r4,8(r2)
    85e8:	20800315 	stw	r2,12(r4)
    85ec:	18800117 	ldw	r2,4(r3)
    85f0:	1080004c 	andi	r2,r2,1
    85f4:	103fdd26 	beq	r2,zero,856c <_free_r+0x78>
    85f8:	38800054 	ori	r2,r7,1
    85fc:	3a07883a 	add	r3,r7,r8
    8600:	280ac03a 	cmpne	r5,r5,zero
    8604:	40800115 	stw	r2,4(r8)
    8608:	19c00015 	stw	r7,0(r3)
    860c:	283fe61e 	bne	r5,zero,85a8 <_free_r+0xb4>
    8610:	00807fc4 	movi	r2,511
    8614:	11c01f2e 	bgeu	r2,r7,8694 <_free_r+0x1a0>
    8618:	3806d27a 	srli	r3,r7,9
    861c:	1800481e 	bne	r3,zero,8740 <_free_r+0x24c>
    8620:	3804d0fa 	srli	r2,r7,3
    8624:	100690fa 	slli	r3,r2,3
    8628:	1acd883a 	add	r6,r3,r11
    862c:	31400217 	ldw	r5,8(r6)
    8630:	31405926 	beq	r6,r5,8798 <_free_r+0x2a4>
    8634:	28800117 	ldw	r2,4(r5)
    8638:	00ffff04 	movi	r3,-4
    863c:	10c4703a 	and	r2,r2,r3
    8640:	3880022e 	bgeu	r7,r2,864c <_free_r+0x158>
    8644:	29400217 	ldw	r5,8(r5)
    8648:	317ffa1e 	bne	r6,r5,8634 <_free_r+0x140>
    864c:	29800317 	ldw	r6,12(r5)
    8650:	41800315 	stw	r6,12(r8)
    8654:	41400215 	stw	r5,8(r8)
    8658:	8809883a 	mov	r4,r17
    865c:	2a000315 	stw	r8,12(r5)
    8660:	32000215 	stw	r8,8(r6)
    8664:	dfc00217 	ldw	ra,8(sp)
    8668:	dc400117 	ldw	r17,4(sp)
    866c:	dc000017 	ldw	r16,0(sp)
    8670:	dec00304 	addi	sp,sp,12
    8674:	000e1a41 	jmpi	e1a4 <__malloc_unlock>
    8678:	dfc00217 	ldw	ra,8(sp)
    867c:	dc400117 	ldw	r17,4(sp)
    8680:	dc000017 	ldw	r16,0(sp)
    8684:	dec00304 	addi	sp,sp,12
    8688:	f800283a 	ret
    868c:	31000217 	ldw	r4,8(r6)
    8690:	003fbd06 	br	8588 <_free_r+0x94>
    8694:	3806d0fa 	srli	r3,r7,3
    8698:	00800044 	movi	r2,1
    869c:	51400117 	ldw	r5,4(r10)
    86a0:	180890fa 	slli	r4,r3,3
    86a4:	1807d0ba 	srai	r3,r3,2
    86a8:	22c9883a 	add	r4,r4,r11
    86ac:	21800217 	ldw	r6,8(r4)
    86b0:	10c4983a 	sll	r2,r2,r3
    86b4:	41000315 	stw	r4,12(r8)
    86b8:	41800215 	stw	r6,8(r8)
    86bc:	288ab03a 	or	r5,r5,r2
    86c0:	22000215 	stw	r8,8(r4)
    86c4:	8809883a 	mov	r4,r17
    86c8:	51400115 	stw	r5,4(r10)
    86cc:	32000315 	stw	r8,12(r6)
    86d0:	dfc00217 	ldw	ra,8(sp)
    86d4:	dc400117 	ldw	r17,4(sp)
    86d8:	dc000017 	ldw	r16,0(sp)
    86dc:	dec00304 	addi	sp,sp,12
    86e0:	000e1a41 	jmpi	e1a4 <__malloc_unlock>
    86e4:	2880004c 	andi	r2,r5,1
    86e8:	3a4d883a 	add	r6,r7,r9
    86ec:	1000071e 	bne	r2,zero,870c <_free_r+0x218>
    86f0:	80bffe17 	ldw	r2,-8(r16)
    86f4:	4091c83a 	sub	r8,r8,r2
    86f8:	41000317 	ldw	r4,12(r8)
    86fc:	40c00217 	ldw	r3,8(r8)
    8700:	308d883a 	add	r6,r6,r2
    8704:	20c00215 	stw	r3,8(r4)
    8708:	19000315 	stw	r4,12(r3)
    870c:	00800074 	movhi	r2,1
    8710:	108fed04 	addi	r2,r2,16308
    8714:	11000017 	ldw	r4,0(r2)
    8718:	30c00054 	ori	r3,r6,1
    871c:	52000215 	stw	r8,8(r10)
    8720:	40c00115 	stw	r3,4(r8)
    8724:	313fa036 	bltu	r6,r4,85a8 <_free_r+0xb4>
    8728:	00800074 	movhi	r2,1
    872c:	1096e404 	addi	r2,r2,23440
    8730:	11400017 	ldw	r5,0(r2)
    8734:	8809883a 	mov	r4,r17
    8738:	00083c80 	call	83c8 <_malloc_trim_r>
    873c:	003f9a06 	br	85a8 <_free_r+0xb4>
    8740:	00800104 	movi	r2,4
    8744:	10c0072e 	bgeu	r2,r3,8764 <_free_r+0x270>
    8748:	00800504 	movi	r2,20
    874c:	10c01936 	bltu	r2,r3,87b4 <_free_r+0x2c0>
    8750:	188016c4 	addi	r2,r3,91
    8754:	100690fa 	slli	r3,r2,3
    8758:	003fb306 	br	8628 <_free_r+0x134>
    875c:	01400044 	movi	r5,1
    8760:	003f7e06 	br	855c <_free_r+0x68>
    8764:	3804d1ba 	srli	r2,r7,6
    8768:	10800e04 	addi	r2,r2,56
    876c:	100690fa 	slli	r3,r2,3
    8770:	003fad06 	br	8628 <_free_r+0x134>
    8774:	22000315 	stw	r8,12(r4)
    8778:	22000215 	stw	r8,8(r4)
    877c:	3a05883a 	add	r2,r7,r8
    8780:	38c00054 	ori	r3,r7,1
    8784:	11c00015 	stw	r7,0(r2)
    8788:	41000215 	stw	r4,8(r8)
    878c:	40c00115 	stw	r3,4(r8)
    8790:	41000315 	stw	r4,12(r8)
    8794:	003f8406 	br	85a8 <_free_r+0xb4>
    8798:	1005d0ba 	srai	r2,r2,2
    879c:	00c00044 	movi	r3,1
    87a0:	51000117 	ldw	r4,4(r10)
    87a4:	1886983a 	sll	r3,r3,r2
    87a8:	20c8b03a 	or	r4,r4,r3
    87ac:	51000115 	stw	r4,4(r10)
    87b0:	003fa706 	br	8650 <_free_r+0x15c>
    87b4:	00801504 	movi	r2,84
    87b8:	10c00436 	bltu	r2,r3,87cc <_free_r+0x2d8>
    87bc:	3804d33a 	srli	r2,r7,12
    87c0:	10801b84 	addi	r2,r2,110
    87c4:	100690fa 	slli	r3,r2,3
    87c8:	003f9706 	br	8628 <_free_r+0x134>
    87cc:	00805504 	movi	r2,340
    87d0:	10c00436 	bltu	r2,r3,87e4 <_free_r+0x2f0>
    87d4:	3804d3fa 	srli	r2,r7,15
    87d8:	10801dc4 	addi	r2,r2,119
    87dc:	100690fa 	slli	r3,r2,3
    87e0:	003f9106 	br	8628 <_free_r+0x134>
    87e4:	00815504 	movi	r2,1364
    87e8:	10c0032e 	bgeu	r2,r3,87f8 <_free_r+0x304>
    87ec:	00801f84 	movi	r2,126
    87f0:	00c0fc04 	movi	r3,1008
    87f4:	003f8c06 	br	8628 <_free_r+0x134>
    87f8:	3804d4ba 	srli	r2,r7,18
    87fc:	10801f04 	addi	r2,r2,124
    8800:	100690fa 	slli	r3,r2,3
    8804:	003f8806 	br	8628 <_free_r+0x134>

00008808 <__sfvwrite_r>:
    8808:	30800217 	ldw	r2,8(r6)
    880c:	defff504 	addi	sp,sp,-44
    8810:	df000915 	stw	fp,36(sp)
    8814:	dd800715 	stw	r22,28(sp)
    8818:	dc800315 	stw	r18,12(sp)
    881c:	dfc00a15 	stw	ra,40(sp)
    8820:	ddc00815 	stw	r23,32(sp)
    8824:	dd400615 	stw	r21,24(sp)
    8828:	dd000515 	stw	r20,20(sp)
    882c:	dcc00415 	stw	r19,16(sp)
    8830:	dc400215 	stw	r17,8(sp)
    8834:	dc000115 	stw	r16,4(sp)
    8838:	302d883a 	mov	r22,r6
    883c:	2039883a 	mov	fp,r4
    8840:	2825883a 	mov	r18,r5
    8844:	10001c26 	beq	r2,zero,88b8 <__sfvwrite_r+0xb0>
    8848:	29c0030b 	ldhu	r7,12(r5)
    884c:	3880020c 	andi	r2,r7,8
    8850:	10002726 	beq	r2,zero,88f0 <__sfvwrite_r+0xe8>
    8854:	28800417 	ldw	r2,16(r5)
    8858:	10002526 	beq	r2,zero,88f0 <__sfvwrite_r+0xe8>
    885c:	3880008c 	andi	r2,r7,2
    8860:	b5400017 	ldw	r21,0(r22)
    8864:	10002826 	beq	r2,zero,8908 <__sfvwrite_r+0x100>
    8868:	0021883a 	mov	r16,zero
    886c:	0023883a 	mov	r17,zero
    8870:	880d883a 	mov	r6,r17
    8874:	e009883a 	mov	r4,fp
    8878:	00810004 	movi	r2,1024
    887c:	80006e26 	beq	r16,zero,8a38 <__sfvwrite_r+0x230>
    8880:	800f883a 	mov	r7,r16
    8884:	91400717 	ldw	r5,28(r18)
    8888:	1400012e 	bgeu	r2,r16,8890 <__sfvwrite_r+0x88>
    888c:	100f883a 	mov	r7,r2
    8890:	90c00917 	ldw	r3,36(r18)
    8894:	183ee83a 	callr	r3
    8898:	1007883a 	mov	r3,r2
    889c:	80a1c83a 	sub	r16,r16,r2
    88a0:	88a3883a 	add	r17,r17,r2
    88a4:	00806d0e 	bge	zero,r2,8a5c <__sfvwrite_r+0x254>
    88a8:	b0800217 	ldw	r2,8(r22)
    88ac:	10c5c83a 	sub	r2,r2,r3
    88b0:	b0800215 	stw	r2,8(r22)
    88b4:	103fee1e 	bne	r2,zero,8870 <__sfvwrite_r+0x68>
    88b8:	0009883a 	mov	r4,zero
    88bc:	2005883a 	mov	r2,r4
    88c0:	dfc00a17 	ldw	ra,40(sp)
    88c4:	df000917 	ldw	fp,36(sp)
    88c8:	ddc00817 	ldw	r23,32(sp)
    88cc:	dd800717 	ldw	r22,28(sp)
    88d0:	dd400617 	ldw	r21,24(sp)
    88d4:	dd000517 	ldw	r20,20(sp)
    88d8:	dcc00417 	ldw	r19,16(sp)
    88dc:	dc800317 	ldw	r18,12(sp)
    88e0:	dc400217 	ldw	r17,8(sp)
    88e4:	dc000117 	ldw	r16,4(sp)
    88e8:	dec00b04 	addi	sp,sp,44
    88ec:	f800283a 	ret
    88f0:	00065d00 	call	65d0 <__swsetup_r>
    88f4:	1000e41e 	bne	r2,zero,8c88 <__sfvwrite_r+0x480>
    88f8:	91c0030b 	ldhu	r7,12(r18)
    88fc:	b5400017 	ldw	r21,0(r22)
    8900:	3880008c 	andi	r2,r7,2
    8904:	103fd81e 	bne	r2,zero,8868 <__sfvwrite_r+0x60>
    8908:	3880004c 	andi	r2,r7,1
    890c:	1005003a 	cmpeq	r2,r2,zero
    8910:	10005726 	beq	r2,zero,8a70 <__sfvwrite_r+0x268>
    8914:	0029883a 	mov	r20,zero
    8918:	002f883a 	mov	r23,zero
    891c:	a0004226 	beq	r20,zero,8a28 <__sfvwrite_r+0x220>
    8920:	3880800c 	andi	r2,r7,512
    8924:	94000217 	ldw	r16,8(r18)
    8928:	10008b26 	beq	r2,zero,8b58 <__sfvwrite_r+0x350>
    892c:	800d883a 	mov	r6,r16
    8930:	a400a536 	bltu	r20,r16,8bc8 <__sfvwrite_r+0x3c0>
    8934:	3881200c 	andi	r2,r7,1152
    8938:	10002726 	beq	r2,zero,89d8 <__sfvwrite_r+0x1d0>
    893c:	90800517 	ldw	r2,20(r18)
    8940:	92000417 	ldw	r8,16(r18)
    8944:	91400017 	ldw	r5,0(r18)
    8948:	1087883a 	add	r3,r2,r2
    894c:	1887883a 	add	r3,r3,r2
    8950:	1808d7fa 	srli	r4,r3,31
    8954:	2a21c83a 	sub	r16,r5,r8
    8958:	80800044 	addi	r2,r16,1
    895c:	20c9883a 	add	r4,r4,r3
    8960:	2027d07a 	srai	r19,r4,1
    8964:	a085883a 	add	r2,r20,r2
    8968:	980d883a 	mov	r6,r19
    896c:	9880022e 	bgeu	r19,r2,8978 <__sfvwrite_r+0x170>
    8970:	1027883a 	mov	r19,r2
    8974:	100d883a 	mov	r6,r2
    8978:	3881000c 	andi	r2,r7,1024
    897c:	1000b826 	beq	r2,zero,8c60 <__sfvwrite_r+0x458>
    8980:	300b883a 	mov	r5,r6
    8984:	e009883a 	mov	r4,fp
    8988:	000907c0 	call	907c <_malloc_r>
    898c:	10003126 	beq	r2,zero,8a54 <__sfvwrite_r+0x24c>
    8990:	91400417 	ldw	r5,16(r18)
    8994:	1009883a 	mov	r4,r2
    8998:	800d883a 	mov	r6,r16
    899c:	1023883a 	mov	r17,r2
    89a0:	00098a00 	call	98a0 <memcpy>
    89a4:	90c0030b 	ldhu	r3,12(r18)
    89a8:	00beffc4 	movi	r2,-1025
    89ac:	1886703a 	and	r3,r3,r2
    89b0:	18c02014 	ori	r3,r3,128
    89b4:	90c0030d 	sth	r3,12(r18)
    89b8:	9c07c83a 	sub	r3,r19,r16
    89bc:	8c05883a 	add	r2,r17,r16
    89c0:	a00d883a 	mov	r6,r20
    89c4:	a021883a 	mov	r16,r20
    89c8:	90800015 	stw	r2,0(r18)
    89cc:	90c00215 	stw	r3,8(r18)
    89d0:	94400415 	stw	r17,16(r18)
    89d4:	94c00515 	stw	r19,20(r18)
    89d8:	91000017 	ldw	r4,0(r18)
    89dc:	b80b883a 	mov	r5,r23
    89e0:	a023883a 	mov	r17,r20
    89e4:	00099400 	call	9940 <memmove>
    89e8:	90c00217 	ldw	r3,8(r18)
    89ec:	90800017 	ldw	r2,0(r18)
    89f0:	a027883a 	mov	r19,r20
    89f4:	1c07c83a 	sub	r3,r3,r16
    89f8:	1405883a 	add	r2,r2,r16
    89fc:	90c00215 	stw	r3,8(r18)
    8a00:	a021883a 	mov	r16,r20
    8a04:	90800015 	stw	r2,0(r18)
    8a08:	b0800217 	ldw	r2,8(r22)
    8a0c:	1405c83a 	sub	r2,r2,r16
    8a10:	b0800215 	stw	r2,8(r22)
    8a14:	103fa826 	beq	r2,zero,88b8 <__sfvwrite_r+0xb0>
    8a18:	a469c83a 	sub	r20,r20,r17
    8a1c:	91c0030b 	ldhu	r7,12(r18)
    8a20:	bcef883a 	add	r23,r23,r19
    8a24:	a03fbe1e 	bne	r20,zero,8920 <__sfvwrite_r+0x118>
    8a28:	adc00017 	ldw	r23,0(r21)
    8a2c:	ad000117 	ldw	r20,4(r21)
    8a30:	ad400204 	addi	r21,r21,8
    8a34:	003fb906 	br	891c <__sfvwrite_r+0x114>
    8a38:	ac400017 	ldw	r17,0(r21)
    8a3c:	ac000117 	ldw	r16,4(r21)
    8a40:	ad400204 	addi	r21,r21,8
    8a44:	003f8a06 	br	8870 <__sfvwrite_r+0x68>
    8a48:	91400417 	ldw	r5,16(r18)
    8a4c:	e009883a 	mov	r4,fp
    8a50:	00084f40 	call	84f4 <_free_r>
    8a54:	00800304 	movi	r2,12
    8a58:	e0800015 	stw	r2,0(fp)
    8a5c:	9080030b 	ldhu	r2,12(r18)
    8a60:	013fffc4 	movi	r4,-1
    8a64:	10801014 	ori	r2,r2,64
    8a68:	9080030d 	sth	r2,12(r18)
    8a6c:	003f9306 	br	88bc <__sfvwrite_r+0xb4>
    8a70:	0027883a 	mov	r19,zero
    8a74:	002f883a 	mov	r23,zero
    8a78:	d8000015 	stw	zero,0(sp)
    8a7c:	0029883a 	mov	r20,zero
    8a80:	98001e26 	beq	r19,zero,8afc <__sfvwrite_r+0x2f4>
    8a84:	d8c00017 	ldw	r3,0(sp)
    8a88:	1804c03a 	cmpne	r2,r3,zero
    8a8c:	10005e26 	beq	r2,zero,8c08 <__sfvwrite_r+0x400>
    8a90:	9821883a 	mov	r16,r19
    8a94:	a4c0012e 	bgeu	r20,r19,8a9c <__sfvwrite_r+0x294>
    8a98:	a021883a 	mov	r16,r20
    8a9c:	91000017 	ldw	r4,0(r18)
    8aa0:	90800417 	ldw	r2,16(r18)
    8aa4:	91800217 	ldw	r6,8(r18)
    8aa8:	91c00517 	ldw	r7,20(r18)
    8aac:	1100022e 	bgeu	r2,r4,8ab8 <__sfvwrite_r+0x2b0>
    8ab0:	31e3883a 	add	r17,r6,r7
    8ab4:	8c001616 	blt	r17,r16,8b10 <__sfvwrite_r+0x308>
    8ab8:	81c03816 	blt	r16,r7,8b9c <__sfvwrite_r+0x394>
    8abc:	90c00917 	ldw	r3,36(r18)
    8ac0:	91400717 	ldw	r5,28(r18)
    8ac4:	e009883a 	mov	r4,fp
    8ac8:	b80d883a 	mov	r6,r23
    8acc:	183ee83a 	callr	r3
    8ad0:	1023883a 	mov	r17,r2
    8ad4:	00bfe10e 	bge	zero,r2,8a5c <__sfvwrite_r+0x254>
    8ad8:	a469c83a 	sub	r20,r20,r17
    8adc:	a0001826 	beq	r20,zero,8b40 <__sfvwrite_r+0x338>
    8ae0:	b0800217 	ldw	r2,8(r22)
    8ae4:	1445c83a 	sub	r2,r2,r17
    8ae8:	b0800215 	stw	r2,8(r22)
    8aec:	103f7226 	beq	r2,zero,88b8 <__sfvwrite_r+0xb0>
    8af0:	9c67c83a 	sub	r19,r19,r17
    8af4:	bc6f883a 	add	r23,r23,r17
    8af8:	983fe21e 	bne	r19,zero,8a84 <__sfvwrite_r+0x27c>
    8afc:	adc00017 	ldw	r23,0(r21)
    8b00:	acc00117 	ldw	r19,4(r21)
    8b04:	ad400204 	addi	r21,r21,8
    8b08:	d8000015 	stw	zero,0(sp)
    8b0c:	003fdc06 	br	8a80 <__sfvwrite_r+0x278>
    8b10:	b80b883a 	mov	r5,r23
    8b14:	880d883a 	mov	r6,r17
    8b18:	00099400 	call	9940 <memmove>
    8b1c:	90c00017 	ldw	r3,0(r18)
    8b20:	e009883a 	mov	r4,fp
    8b24:	900b883a 	mov	r5,r18
    8b28:	1c47883a 	add	r3,r3,r17
    8b2c:	90c00015 	stw	r3,0(r18)
    8b30:	0007ed80 	call	7ed8 <_fflush_r>
    8b34:	103fc91e 	bne	r2,zero,8a5c <__sfvwrite_r+0x254>
    8b38:	a469c83a 	sub	r20,r20,r17
    8b3c:	a03fe81e 	bne	r20,zero,8ae0 <__sfvwrite_r+0x2d8>
    8b40:	e009883a 	mov	r4,fp
    8b44:	900b883a 	mov	r5,r18
    8b48:	0007ed80 	call	7ed8 <_fflush_r>
    8b4c:	103fc31e 	bne	r2,zero,8a5c <__sfvwrite_r+0x254>
    8b50:	d8000015 	stw	zero,0(sp)
    8b54:	003fe206 	br	8ae0 <__sfvwrite_r+0x2d8>
    8b58:	91000017 	ldw	r4,0(r18)
    8b5c:	90800417 	ldw	r2,16(r18)
    8b60:	1100022e 	bgeu	r2,r4,8b6c <__sfvwrite_r+0x364>
    8b64:	8023883a 	mov	r17,r16
    8b68:	85003136 	bltu	r16,r20,8c30 <__sfvwrite_r+0x428>
    8b6c:	91c00517 	ldw	r7,20(r18)
    8b70:	a1c01836 	bltu	r20,r7,8bd4 <__sfvwrite_r+0x3cc>
    8b74:	90c00917 	ldw	r3,36(r18)
    8b78:	91400717 	ldw	r5,28(r18)
    8b7c:	e009883a 	mov	r4,fp
    8b80:	b80d883a 	mov	r6,r23
    8b84:	183ee83a 	callr	r3
    8b88:	1021883a 	mov	r16,r2
    8b8c:	00bfb30e 	bge	zero,r2,8a5c <__sfvwrite_r+0x254>
    8b90:	1023883a 	mov	r17,r2
    8b94:	1027883a 	mov	r19,r2
    8b98:	003f9b06 	br	8a08 <__sfvwrite_r+0x200>
    8b9c:	b80b883a 	mov	r5,r23
    8ba0:	800d883a 	mov	r6,r16
    8ba4:	00099400 	call	9940 <memmove>
    8ba8:	90c00217 	ldw	r3,8(r18)
    8bac:	90800017 	ldw	r2,0(r18)
    8bb0:	8023883a 	mov	r17,r16
    8bb4:	1c07c83a 	sub	r3,r3,r16
    8bb8:	1405883a 	add	r2,r2,r16
    8bbc:	90c00215 	stw	r3,8(r18)
    8bc0:	90800015 	stw	r2,0(r18)
    8bc4:	003fc406 	br	8ad8 <__sfvwrite_r+0x2d0>
    8bc8:	a00d883a 	mov	r6,r20
    8bcc:	a021883a 	mov	r16,r20
    8bd0:	003f8106 	br	89d8 <__sfvwrite_r+0x1d0>
    8bd4:	b80b883a 	mov	r5,r23
    8bd8:	a00d883a 	mov	r6,r20
    8bdc:	00099400 	call	9940 <memmove>
    8be0:	90c00217 	ldw	r3,8(r18)
    8be4:	90800017 	ldw	r2,0(r18)
    8be8:	a021883a 	mov	r16,r20
    8bec:	1d07c83a 	sub	r3,r3,r20
    8bf0:	1505883a 	add	r2,r2,r20
    8bf4:	a023883a 	mov	r17,r20
    8bf8:	a027883a 	mov	r19,r20
    8bfc:	90c00215 	stw	r3,8(r18)
    8c00:	90800015 	stw	r2,0(r18)
    8c04:	003f8006 	br	8a08 <__sfvwrite_r+0x200>
    8c08:	b809883a 	mov	r4,r23
    8c0c:	01400284 	movi	r5,10
    8c10:	980d883a 	mov	r6,r19
    8c14:	00097bc0 	call	97bc <memchr>
    8c18:	10001726 	beq	r2,zero,8c78 <__sfvwrite_r+0x470>
    8c1c:	15c5c83a 	sub	r2,r2,r23
    8c20:	15000044 	addi	r20,r2,1
    8c24:	00800044 	movi	r2,1
    8c28:	d8800015 	stw	r2,0(sp)
    8c2c:	003f9806 	br	8a90 <__sfvwrite_r+0x288>
    8c30:	b80b883a 	mov	r5,r23
    8c34:	800d883a 	mov	r6,r16
    8c38:	00099400 	call	9940 <memmove>
    8c3c:	90c00017 	ldw	r3,0(r18)
    8c40:	e009883a 	mov	r4,fp
    8c44:	900b883a 	mov	r5,r18
    8c48:	1c07883a 	add	r3,r3,r16
    8c4c:	90c00015 	stw	r3,0(r18)
    8c50:	8027883a 	mov	r19,r16
    8c54:	0007ed80 	call	7ed8 <_fflush_r>
    8c58:	103f6b26 	beq	r2,zero,8a08 <__sfvwrite_r+0x200>
    8c5c:	003f7f06 	br	8a5c <__sfvwrite_r+0x254>
    8c60:	400b883a 	mov	r5,r8
    8c64:	e009883a 	mov	r4,fp
    8c68:	000aaac0 	call	aaac <_realloc_r>
    8c6c:	103f7626 	beq	r2,zero,8a48 <__sfvwrite_r+0x240>
    8c70:	1023883a 	mov	r17,r2
    8c74:	003f5006 	br	89b8 <__sfvwrite_r+0x1b0>
    8c78:	00c00044 	movi	r3,1
    8c7c:	9d000044 	addi	r20,r19,1
    8c80:	d8c00015 	stw	r3,0(sp)
    8c84:	003f8206 	br	8a90 <__sfvwrite_r+0x288>
    8c88:	9080030b 	ldhu	r2,12(r18)
    8c8c:	00c00244 	movi	r3,9
    8c90:	013fffc4 	movi	r4,-1
    8c94:	10801014 	ori	r2,r2,64
    8c98:	9080030d 	sth	r2,12(r18)
    8c9c:	e0c00015 	stw	r3,0(fp)
    8ca0:	003f0606 	br	88bc <__sfvwrite_r+0xb4>

00008ca4 <_fwalk_reent>:
    8ca4:	defff704 	addi	sp,sp,-36
    8ca8:	dcc00315 	stw	r19,12(sp)
    8cac:	24c0b804 	addi	r19,r4,736
    8cb0:	dd800615 	stw	r22,24(sp)
    8cb4:	dd400515 	stw	r21,20(sp)
    8cb8:	dfc00815 	stw	ra,32(sp)
    8cbc:	ddc00715 	stw	r23,28(sp)
    8cc0:	dd000415 	stw	r20,16(sp)
    8cc4:	dc800215 	stw	r18,8(sp)
    8cc8:	dc400115 	stw	r17,4(sp)
    8ccc:	dc000015 	stw	r16,0(sp)
    8cd0:	202b883a 	mov	r21,r4
    8cd4:	282d883a 	mov	r22,r5
    8cd8:	00081600 	call	8160 <__sfp_lock_acquire>
    8cdc:	98002126 	beq	r19,zero,8d64 <_fwalk_reent+0xc0>
    8ce0:	002f883a 	mov	r23,zero
    8ce4:	9c800117 	ldw	r18,4(r19)
    8ce8:	9c000217 	ldw	r16,8(r19)
    8cec:	90bfffc4 	addi	r2,r18,-1
    8cf0:	10000d16 	blt	r2,zero,8d28 <_fwalk_reent+0x84>
    8cf4:	0023883a 	mov	r17,zero
    8cf8:	053fffc4 	movi	r20,-1
    8cfc:	8080030f 	ldh	r2,12(r16)
    8d00:	8c400044 	addi	r17,r17,1
    8d04:	10000626 	beq	r2,zero,8d20 <_fwalk_reent+0x7c>
    8d08:	8080038f 	ldh	r2,14(r16)
    8d0c:	800b883a 	mov	r5,r16
    8d10:	a809883a 	mov	r4,r21
    8d14:	15000226 	beq	r2,r20,8d20 <_fwalk_reent+0x7c>
    8d18:	b03ee83a 	callr	r22
    8d1c:	b8aeb03a 	or	r23,r23,r2
    8d20:	84001704 	addi	r16,r16,92
    8d24:	947ff51e 	bne	r18,r17,8cfc <_fwalk_reent+0x58>
    8d28:	9cc00017 	ldw	r19,0(r19)
    8d2c:	983fed1e 	bne	r19,zero,8ce4 <_fwalk_reent+0x40>
    8d30:	00081640 	call	8164 <__sfp_lock_release>
    8d34:	b805883a 	mov	r2,r23
    8d38:	dfc00817 	ldw	ra,32(sp)
    8d3c:	ddc00717 	ldw	r23,28(sp)
    8d40:	dd800617 	ldw	r22,24(sp)
    8d44:	dd400517 	ldw	r21,20(sp)
    8d48:	dd000417 	ldw	r20,16(sp)
    8d4c:	dcc00317 	ldw	r19,12(sp)
    8d50:	dc800217 	ldw	r18,8(sp)
    8d54:	dc400117 	ldw	r17,4(sp)
    8d58:	dc000017 	ldw	r16,0(sp)
    8d5c:	dec00904 	addi	sp,sp,36
    8d60:	f800283a 	ret
    8d64:	002f883a 	mov	r23,zero
    8d68:	003ff106 	br	8d30 <_fwalk_reent+0x8c>

00008d6c <_fwalk>:
    8d6c:	defff804 	addi	sp,sp,-32
    8d70:	dcc00315 	stw	r19,12(sp)
    8d74:	24c0b804 	addi	r19,r4,736
    8d78:	dd400515 	stw	r21,20(sp)
    8d7c:	dfc00715 	stw	ra,28(sp)
    8d80:	dd800615 	stw	r22,24(sp)
    8d84:	dd000415 	stw	r20,16(sp)
    8d88:	dc800215 	stw	r18,8(sp)
    8d8c:	dc400115 	stw	r17,4(sp)
    8d90:	dc000015 	stw	r16,0(sp)
    8d94:	282b883a 	mov	r21,r5
    8d98:	00081600 	call	8160 <__sfp_lock_acquire>
    8d9c:	98001f26 	beq	r19,zero,8e1c <_fwalk+0xb0>
    8da0:	002d883a 	mov	r22,zero
    8da4:	9c800117 	ldw	r18,4(r19)
    8da8:	9c000217 	ldw	r16,8(r19)
    8dac:	90bfffc4 	addi	r2,r18,-1
    8db0:	10000c16 	blt	r2,zero,8de4 <_fwalk+0x78>
    8db4:	0023883a 	mov	r17,zero
    8db8:	053fffc4 	movi	r20,-1
    8dbc:	8080030f 	ldh	r2,12(r16)
    8dc0:	8c400044 	addi	r17,r17,1
    8dc4:	10000526 	beq	r2,zero,8ddc <_fwalk+0x70>
    8dc8:	8080038f 	ldh	r2,14(r16)
    8dcc:	8009883a 	mov	r4,r16
    8dd0:	15000226 	beq	r2,r20,8ddc <_fwalk+0x70>
    8dd4:	a83ee83a 	callr	r21
    8dd8:	b0acb03a 	or	r22,r22,r2
    8ddc:	84001704 	addi	r16,r16,92
    8de0:	947ff61e 	bne	r18,r17,8dbc <_fwalk+0x50>
    8de4:	9cc00017 	ldw	r19,0(r19)
    8de8:	983fee1e 	bne	r19,zero,8da4 <_fwalk+0x38>
    8dec:	00081640 	call	8164 <__sfp_lock_release>
    8df0:	b005883a 	mov	r2,r22
    8df4:	dfc00717 	ldw	ra,28(sp)
    8df8:	dd800617 	ldw	r22,24(sp)
    8dfc:	dd400517 	ldw	r21,20(sp)
    8e00:	dd000417 	ldw	r20,16(sp)
    8e04:	dcc00317 	ldw	r19,12(sp)
    8e08:	dc800217 	ldw	r18,8(sp)
    8e0c:	dc400117 	ldw	r17,4(sp)
    8e10:	dc000017 	ldw	r16,0(sp)
    8e14:	dec00804 	addi	sp,sp,32
    8e18:	f800283a 	ret
    8e1c:	002d883a 	mov	r22,zero
    8e20:	003ff206 	br	8dec <_fwalk+0x80>

00008e24 <__locale_charset>:
    8e24:	d0a00317 	ldw	r2,-32756(gp)
    8e28:	f800283a 	ret

00008e2c <_localeconv_r>:
    8e2c:	00800074 	movhi	r2,1
    8e30:	1087cd04 	addi	r2,r2,7988
    8e34:	f800283a 	ret

00008e38 <localeconv>:
    8e38:	00800074 	movhi	r2,1
    8e3c:	108fe904 	addi	r2,r2,16292
    8e40:	11000017 	ldw	r4,0(r2)
    8e44:	0008e2c1 	jmpi	8e2c <_localeconv_r>

00008e48 <_setlocale_r>:
    8e48:	defffc04 	addi	sp,sp,-16
    8e4c:	00c00074 	movhi	r3,1
    8e50:	18c7c804 	addi	r3,r3,7968
    8e54:	dc800215 	stw	r18,8(sp)
    8e58:	dc400115 	stw	r17,4(sp)
    8e5c:	dc000015 	stw	r16,0(sp)
    8e60:	2023883a 	mov	r17,r4
    8e64:	2825883a 	mov	r18,r5
    8e68:	dfc00315 	stw	ra,12(sp)
    8e6c:	3021883a 	mov	r16,r6
    8e70:	3009883a 	mov	r4,r6
    8e74:	180b883a 	mov	r5,r3
    8e78:	30000926 	beq	r6,zero,8ea0 <_setlocale_r+0x58>
    8e7c:	000b2cc0 	call	b2cc <strcmp>
    8e80:	8009883a 	mov	r4,r16
    8e84:	01400074 	movhi	r5,1
    8e88:	2947b304 	addi	r5,r5,7884
    8e8c:	10000b1e 	bne	r2,zero,8ebc <_setlocale_r+0x74>
    8e90:	8c000d15 	stw	r16,52(r17)
    8e94:	8c800c15 	stw	r18,48(r17)
    8e98:	00c00074 	movhi	r3,1
    8e9c:	18c7c804 	addi	r3,r3,7968
    8ea0:	1805883a 	mov	r2,r3
    8ea4:	dfc00317 	ldw	ra,12(sp)
    8ea8:	dc800217 	ldw	r18,8(sp)
    8eac:	dc400117 	ldw	r17,4(sp)
    8eb0:	dc000017 	ldw	r16,0(sp)
    8eb4:	dec00404 	addi	sp,sp,16
    8eb8:	f800283a 	ret
    8ebc:	000b2cc0 	call	b2cc <strcmp>
    8ec0:	0007883a 	mov	r3,zero
    8ec4:	103ff226 	beq	r2,zero,8e90 <_setlocale_r+0x48>
    8ec8:	003ff506 	br	8ea0 <_setlocale_r+0x58>

00008ecc <setlocale>:
    8ecc:	01800074 	movhi	r6,1
    8ed0:	318fe904 	addi	r6,r6,16292
    8ed4:	2007883a 	mov	r3,r4
    8ed8:	31000017 	ldw	r4,0(r6)
    8edc:	280d883a 	mov	r6,r5
    8ee0:	180b883a 	mov	r5,r3
    8ee4:	0008e481 	jmpi	8e48 <_setlocale_r>

00008ee8 <__smakebuf_r>:
    8ee8:	2880030b 	ldhu	r2,12(r5)
    8eec:	deffed04 	addi	sp,sp,-76
    8ef0:	dc401015 	stw	r17,64(sp)
    8ef4:	1080008c 	andi	r2,r2,2
    8ef8:	dc000f15 	stw	r16,60(sp)
    8efc:	dfc01215 	stw	ra,72(sp)
    8f00:	dc801115 	stw	r18,68(sp)
    8f04:	2821883a 	mov	r16,r5
    8f08:	2023883a 	mov	r17,r4
    8f0c:	10000b26 	beq	r2,zero,8f3c <__smakebuf_r+0x54>
    8f10:	28c010c4 	addi	r3,r5,67
    8f14:	00800044 	movi	r2,1
    8f18:	28800515 	stw	r2,20(r5)
    8f1c:	28c00415 	stw	r3,16(r5)
    8f20:	28c00015 	stw	r3,0(r5)
    8f24:	dfc01217 	ldw	ra,72(sp)
    8f28:	dc801117 	ldw	r18,68(sp)
    8f2c:	dc401017 	ldw	r17,64(sp)
    8f30:	dc000f17 	ldw	r16,60(sp)
    8f34:	dec01304 	addi	sp,sp,76
    8f38:	f800283a 	ret
    8f3c:	2940038f 	ldh	r5,14(r5)
    8f40:	28002116 	blt	r5,zero,8fc8 <__smakebuf_r+0xe0>
    8f44:	d80d883a 	mov	r6,sp
    8f48:	000b6480 	call	b648 <_fstat_r>
    8f4c:	10001e16 	blt	r2,zero,8fc8 <__smakebuf_r+0xe0>
    8f50:	d8800117 	ldw	r2,4(sp)
    8f54:	00e00014 	movui	r3,32768
    8f58:	113c000c 	andi	r4,r2,61440
    8f5c:	20c03126 	beq	r4,r3,9024 <__smakebuf_r+0x13c>
    8f60:	8080030b 	ldhu	r2,12(r16)
    8f64:	00c80004 	movi	r3,8192
    8f68:	10820014 	ori	r2,r2,2048
    8f6c:	8080030d 	sth	r2,12(r16)
    8f70:	20c01e26 	beq	r4,r3,8fec <__smakebuf_r+0x104>
    8f74:	04810004 	movi	r18,1024
    8f78:	8809883a 	mov	r4,r17
    8f7c:	900b883a 	mov	r5,r18
    8f80:	000907c0 	call	907c <_malloc_r>
    8f84:	1009883a 	mov	r4,r2
    8f88:	10003126 	beq	r2,zero,9050 <__smakebuf_r+0x168>
    8f8c:	80c0030b 	ldhu	r3,12(r16)
    8f90:	00800074 	movhi	r2,1
    8f94:	10a09504 	addi	r2,r2,-32172
    8f98:	88800f15 	stw	r2,60(r17)
    8f9c:	18c02014 	ori	r3,r3,128
    8fa0:	84800515 	stw	r18,20(r16)
    8fa4:	80c0030d 	sth	r3,12(r16)
    8fa8:	81000415 	stw	r4,16(r16)
    8fac:	81000015 	stw	r4,0(r16)
    8fb0:	dfc01217 	ldw	ra,72(sp)
    8fb4:	dc801117 	ldw	r18,68(sp)
    8fb8:	dc401017 	ldw	r17,64(sp)
    8fbc:	dc000f17 	ldw	r16,60(sp)
    8fc0:	dec01304 	addi	sp,sp,76
    8fc4:	f800283a 	ret
    8fc8:	80c0030b 	ldhu	r3,12(r16)
    8fcc:	1880200c 	andi	r2,r3,128
    8fd0:	10000426 	beq	r2,zero,8fe4 <__smakebuf_r+0xfc>
    8fd4:	04801004 	movi	r18,64
    8fd8:	18820014 	ori	r2,r3,2048
    8fdc:	8080030d 	sth	r2,12(r16)
    8fe0:	003fe506 	br	8f78 <__smakebuf_r+0x90>
    8fe4:	04810004 	movi	r18,1024
    8fe8:	003ffb06 	br	8fd8 <__smakebuf_r+0xf0>
    8fec:	8140038f 	ldh	r5,14(r16)
    8ff0:	8809883a 	mov	r4,r17
    8ff4:	000b6bc0 	call	b6bc <_isatty_r>
    8ff8:	103fde26 	beq	r2,zero,8f74 <__smakebuf_r+0x8c>
    8ffc:	8080030b 	ldhu	r2,12(r16)
    9000:	80c010c4 	addi	r3,r16,67
    9004:	04810004 	movi	r18,1024
    9008:	10800054 	ori	r2,r2,1
    900c:	8080030d 	sth	r2,12(r16)
    9010:	00800044 	movi	r2,1
    9014:	80c00415 	stw	r3,16(r16)
    9018:	80800515 	stw	r2,20(r16)
    901c:	80c00015 	stw	r3,0(r16)
    9020:	003fd506 	br	8f78 <__smakebuf_r+0x90>
    9024:	80c00a17 	ldw	r3,40(r16)
    9028:	00800074 	movhi	r2,1
    902c:	10ac6204 	addi	r2,r2,-20088
    9030:	18bfcb1e 	bne	r3,r2,8f60 <__smakebuf_r+0x78>
    9034:	8080030b 	ldhu	r2,12(r16)
    9038:	00c10004 	movi	r3,1024
    903c:	1825883a 	mov	r18,r3
    9040:	10c4b03a 	or	r2,r2,r3
    9044:	8080030d 	sth	r2,12(r16)
    9048:	80c01315 	stw	r3,76(r16)
    904c:	003fca06 	br	8f78 <__smakebuf_r+0x90>
    9050:	8100030b 	ldhu	r4,12(r16)
    9054:	2080800c 	andi	r2,r4,512
    9058:	103fb21e 	bne	r2,zero,8f24 <__smakebuf_r+0x3c>
    905c:	80c010c4 	addi	r3,r16,67
    9060:	21000094 	ori	r4,r4,2
    9064:	00800044 	movi	r2,1
    9068:	80800515 	stw	r2,20(r16)
    906c:	8100030d 	sth	r4,12(r16)
    9070:	80c00415 	stw	r3,16(r16)
    9074:	80c00015 	stw	r3,0(r16)
    9078:	003faa06 	br	8f24 <__smakebuf_r+0x3c>

0000907c <_malloc_r>:
    907c:	defff604 	addi	sp,sp,-40
    9080:	28c002c4 	addi	r3,r5,11
    9084:	00800584 	movi	r2,22
    9088:	dc800215 	stw	r18,8(sp)
    908c:	dfc00915 	stw	ra,36(sp)
    9090:	df000815 	stw	fp,32(sp)
    9094:	ddc00715 	stw	r23,28(sp)
    9098:	dd800615 	stw	r22,24(sp)
    909c:	dd400515 	stw	r21,20(sp)
    90a0:	dd000415 	stw	r20,16(sp)
    90a4:	dcc00315 	stw	r19,12(sp)
    90a8:	dc400115 	stw	r17,4(sp)
    90ac:	dc000015 	stw	r16,0(sp)
    90b0:	2025883a 	mov	r18,r4
    90b4:	10c01236 	bltu	r2,r3,9100 <_malloc_r+0x84>
    90b8:	04400404 	movi	r17,16
    90bc:	8940142e 	bgeu	r17,r5,9110 <_malloc_r+0x94>
    90c0:	00800304 	movi	r2,12
    90c4:	0007883a 	mov	r3,zero
    90c8:	90800015 	stw	r2,0(r18)
    90cc:	1805883a 	mov	r2,r3
    90d0:	dfc00917 	ldw	ra,36(sp)
    90d4:	df000817 	ldw	fp,32(sp)
    90d8:	ddc00717 	ldw	r23,28(sp)
    90dc:	dd800617 	ldw	r22,24(sp)
    90e0:	dd400517 	ldw	r21,20(sp)
    90e4:	dd000417 	ldw	r20,16(sp)
    90e8:	dcc00317 	ldw	r19,12(sp)
    90ec:	dc800217 	ldw	r18,8(sp)
    90f0:	dc400117 	ldw	r17,4(sp)
    90f4:	dc000017 	ldw	r16,0(sp)
    90f8:	dec00a04 	addi	sp,sp,40
    90fc:	f800283a 	ret
    9100:	00bffe04 	movi	r2,-8
    9104:	18a2703a 	and	r17,r3,r2
    9108:	883fed16 	blt	r17,zero,90c0 <_malloc_r+0x44>
    910c:	897fec36 	bltu	r17,r5,90c0 <_malloc_r+0x44>
    9110:	9009883a 	mov	r4,r18
    9114:	000e1840 	call	e184 <__malloc_lock>
    9118:	00807dc4 	movi	r2,503
    911c:	14402b2e 	bgeu	r2,r17,91cc <_malloc_r+0x150>
    9120:	8806d27a 	srli	r3,r17,9
    9124:	18003f1e 	bne	r3,zero,9224 <_malloc_r+0x1a8>
    9128:	880cd0fa 	srli	r6,r17,3
    912c:	300490fa 	slli	r2,r6,3
    9130:	02c00074 	movhi	r11,1
    9134:	5aca1d04 	addi	r11,r11,10356
    9138:	12cb883a 	add	r5,r2,r11
    913c:	2c000317 	ldw	r16,12(r5)
    9140:	580f883a 	mov	r7,r11
    9144:	2c00041e 	bne	r5,r16,9158 <_malloc_r+0xdc>
    9148:	00000a06 	br	9174 <_malloc_r+0xf8>
    914c:	1800860e 	bge	r3,zero,9368 <_malloc_r+0x2ec>
    9150:	84000317 	ldw	r16,12(r16)
    9154:	2c000726 	beq	r5,r16,9174 <_malloc_r+0xf8>
    9158:	80800117 	ldw	r2,4(r16)
    915c:	00ffff04 	movi	r3,-4
    9160:	10c8703a 	and	r4,r2,r3
    9164:	2447c83a 	sub	r3,r4,r17
    9168:	008003c4 	movi	r2,15
    916c:	10fff70e 	bge	r2,r3,914c <_malloc_r+0xd0>
    9170:	31bfffc4 	addi	r6,r6,-1
    9174:	32400044 	addi	r9,r6,1
    9178:	02800074 	movhi	r10,1
    917c:	528a1f04 	addi	r10,r10,10364
    9180:	54000217 	ldw	r16,8(r10)
    9184:	8280a026 	beq	r16,r10,9408 <_malloc_r+0x38c>
    9188:	80800117 	ldw	r2,4(r16)
    918c:	00ffff04 	movi	r3,-4
    9190:	10ca703a 	and	r5,r2,r3
    9194:	2c4dc83a 	sub	r6,r5,r17
    9198:	008003c4 	movi	r2,15
    919c:	11808316 	blt	r2,r6,93ac <_malloc_r+0x330>
    91a0:	52800315 	stw	r10,12(r10)
    91a4:	52800215 	stw	r10,8(r10)
    91a8:	30002916 	blt	r6,zero,9250 <_malloc_r+0x1d4>
    91ac:	8147883a 	add	r3,r16,r5
    91b0:	18800117 	ldw	r2,4(r3)
    91b4:	9009883a 	mov	r4,r18
    91b8:	10800054 	ori	r2,r2,1
    91bc:	18800115 	stw	r2,4(r3)
    91c0:	000e1a40 	call	e1a4 <__malloc_unlock>
    91c4:	80c00204 	addi	r3,r16,8
    91c8:	003fc006 	br	90cc <_malloc_r+0x50>
    91cc:	02c00074 	movhi	r11,1
    91d0:	5aca1d04 	addi	r11,r11,10356
    91d4:	8ac5883a 	add	r2,r17,r11
    91d8:	14000317 	ldw	r16,12(r2)
    91dc:	580f883a 	mov	r7,r11
    91e0:	8806d0fa 	srli	r3,r17,3
    91e4:	14006c26 	beq	r2,r16,9398 <_malloc_r+0x31c>
    91e8:	80c00117 	ldw	r3,4(r16)
    91ec:	00bfff04 	movi	r2,-4
    91f0:	81800317 	ldw	r6,12(r16)
    91f4:	1886703a 	and	r3,r3,r2
    91f8:	80c7883a 	add	r3,r16,r3
    91fc:	18800117 	ldw	r2,4(r3)
    9200:	81400217 	ldw	r5,8(r16)
    9204:	9009883a 	mov	r4,r18
    9208:	10800054 	ori	r2,r2,1
    920c:	18800115 	stw	r2,4(r3)
    9210:	31400215 	stw	r5,8(r6)
    9214:	29800315 	stw	r6,12(r5)
    9218:	000e1a40 	call	e1a4 <__malloc_unlock>
    921c:	80c00204 	addi	r3,r16,8
    9220:	003faa06 	br	90cc <_malloc_r+0x50>
    9224:	00800104 	movi	r2,4
    9228:	10c0052e 	bgeu	r2,r3,9240 <_malloc_r+0x1c4>
    922c:	00800504 	movi	r2,20
    9230:	10c07836 	bltu	r2,r3,9414 <_malloc_r+0x398>
    9234:	198016c4 	addi	r6,r3,91
    9238:	300490fa 	slli	r2,r6,3
    923c:	003fbc06 	br	9130 <_malloc_r+0xb4>
    9240:	8804d1ba 	srli	r2,r17,6
    9244:	11800e04 	addi	r6,r2,56
    9248:	300490fa 	slli	r2,r6,3
    924c:	003fb806 	br	9130 <_malloc_r+0xb4>
    9250:	00807fc4 	movi	r2,511
    9254:	1140bb36 	bltu	r2,r5,9544 <_malloc_r+0x4c8>
    9258:	2806d0fa 	srli	r3,r5,3
    925c:	573ffe04 	addi	fp,r10,-8
    9260:	00800044 	movi	r2,1
    9264:	180890fa 	slli	r4,r3,3
    9268:	1807d0ba 	srai	r3,r3,2
    926c:	e1c00117 	ldw	r7,4(fp)
    9270:	5909883a 	add	r4,r11,r4
    9274:	21400217 	ldw	r5,8(r4)
    9278:	10c4983a 	sll	r2,r2,r3
    927c:	81000315 	stw	r4,12(r16)
    9280:	81400215 	stw	r5,8(r16)
    9284:	388eb03a 	or	r7,r7,r2
    9288:	2c000315 	stw	r16,12(r5)
    928c:	24000215 	stw	r16,8(r4)
    9290:	e1c00115 	stw	r7,4(fp)
    9294:	4807883a 	mov	r3,r9
    9298:	4800cd16 	blt	r9,zero,95d0 <_malloc_r+0x554>
    929c:	1807d0ba 	srai	r3,r3,2
    92a0:	00800044 	movi	r2,1
    92a4:	10c8983a 	sll	r4,r2,r3
    92a8:	39004436 	bltu	r7,r4,93bc <_malloc_r+0x340>
    92ac:	21c4703a 	and	r2,r4,r7
    92b0:	10000a1e 	bne	r2,zero,92dc <_malloc_r+0x260>
    92b4:	2109883a 	add	r4,r4,r4
    92b8:	00bfff04 	movi	r2,-4
    92bc:	4884703a 	and	r2,r9,r2
    92c0:	3906703a 	and	r3,r7,r4
    92c4:	12400104 	addi	r9,r2,4
    92c8:	1800041e 	bne	r3,zero,92dc <_malloc_r+0x260>
    92cc:	2109883a 	add	r4,r4,r4
    92d0:	3904703a 	and	r2,r7,r4
    92d4:	4a400104 	addi	r9,r9,4
    92d8:	103ffc26 	beq	r2,zero,92cc <_malloc_r+0x250>
    92dc:	480490fa 	slli	r2,r9,3
    92e0:	4819883a 	mov	r12,r9
    92e4:	023fff04 	movi	r8,-4
    92e8:	589b883a 	add	r13,r11,r2
    92ec:	6807883a 	mov	r3,r13
    92f0:	014003c4 	movi	r5,15
    92f4:	1c000317 	ldw	r16,12(r3)
    92f8:	1c00041e 	bne	r3,r16,930c <_malloc_r+0x290>
    92fc:	0000a706 	br	959c <_malloc_r+0x520>
    9300:	3000ab0e 	bge	r6,zero,95b0 <_malloc_r+0x534>
    9304:	84000317 	ldw	r16,12(r16)
    9308:	1c00a426 	beq	r3,r16,959c <_malloc_r+0x520>
    930c:	80800117 	ldw	r2,4(r16)
    9310:	1204703a 	and	r2,r2,r8
    9314:	144dc83a 	sub	r6,r2,r17
    9318:	29bff90e 	bge	r5,r6,9300 <_malloc_r+0x284>
    931c:	81000317 	ldw	r4,12(r16)
    9320:	80c00217 	ldw	r3,8(r16)
    9324:	89400054 	ori	r5,r17,1
    9328:	8445883a 	add	r2,r16,r17
    932c:	20c00215 	stw	r3,8(r4)
    9330:	19000315 	stw	r4,12(r3)
    9334:	81400115 	stw	r5,4(r16)
    9338:	1187883a 	add	r3,r2,r6
    933c:	31000054 	ori	r4,r6,1
    9340:	50800315 	stw	r2,12(r10)
    9344:	50800215 	stw	r2,8(r10)
    9348:	19800015 	stw	r6,0(r3)
    934c:	11000115 	stw	r4,4(r2)
    9350:	12800215 	stw	r10,8(r2)
    9354:	12800315 	stw	r10,12(r2)
    9358:	9009883a 	mov	r4,r18
    935c:	000e1a40 	call	e1a4 <__malloc_unlock>
    9360:	80c00204 	addi	r3,r16,8
    9364:	003f5906 	br	90cc <_malloc_r+0x50>
    9368:	8109883a 	add	r4,r16,r4
    936c:	20800117 	ldw	r2,4(r4)
    9370:	80c00217 	ldw	r3,8(r16)
    9374:	81400317 	ldw	r5,12(r16)
    9378:	10800054 	ori	r2,r2,1
    937c:	20800115 	stw	r2,4(r4)
    9380:	28c00215 	stw	r3,8(r5)
    9384:	19400315 	stw	r5,12(r3)
    9388:	9009883a 	mov	r4,r18
    938c:	000e1a40 	call	e1a4 <__malloc_unlock>
    9390:	80c00204 	addi	r3,r16,8
    9394:	003f4d06 	br	90cc <_malloc_r+0x50>
    9398:	80800204 	addi	r2,r16,8
    939c:	14000317 	ldw	r16,12(r2)
    93a0:	143f911e 	bne	r2,r16,91e8 <_malloc_r+0x16c>
    93a4:	1a400084 	addi	r9,r3,2
    93a8:	003f7306 	br	9178 <_malloc_r+0xfc>
    93ac:	88c00054 	ori	r3,r17,1
    93b0:	8445883a 	add	r2,r16,r17
    93b4:	80c00115 	stw	r3,4(r16)
    93b8:	003fdf06 	br	9338 <_malloc_r+0x2bc>
    93bc:	e4000217 	ldw	r16,8(fp)
    93c0:	00bfff04 	movi	r2,-4
    93c4:	80c00117 	ldw	r3,4(r16)
    93c8:	802d883a 	mov	r22,r16
    93cc:	18aa703a 	and	r21,r3,r2
    93d0:	ac401636 	bltu	r21,r17,942c <_malloc_r+0x3b0>
    93d4:	ac49c83a 	sub	r4,r21,r17
    93d8:	008003c4 	movi	r2,15
    93dc:	1100130e 	bge	r2,r4,942c <_malloc_r+0x3b0>
    93e0:	88800054 	ori	r2,r17,1
    93e4:	8447883a 	add	r3,r16,r17
    93e8:	80800115 	stw	r2,4(r16)
    93ec:	20800054 	ori	r2,r4,1
    93f0:	18800115 	stw	r2,4(r3)
    93f4:	e0c00215 	stw	r3,8(fp)
    93f8:	9009883a 	mov	r4,r18
    93fc:	000e1a40 	call	e1a4 <__malloc_unlock>
    9400:	80c00204 	addi	r3,r16,8
    9404:	003f3106 	br	90cc <_malloc_r+0x50>
    9408:	39c00117 	ldw	r7,4(r7)
    940c:	573ffe04 	addi	fp,r10,-8
    9410:	003fa006 	br	9294 <_malloc_r+0x218>
    9414:	00801504 	movi	r2,84
    9418:	10c06736 	bltu	r2,r3,95b8 <_malloc_r+0x53c>
    941c:	8804d33a 	srli	r2,r17,12
    9420:	11801b84 	addi	r6,r2,110
    9424:	300490fa 	slli	r2,r6,3
    9428:	003f4106 	br	9130 <_malloc_r+0xb4>
    942c:	d0a6fb17 	ldw	r2,-25620(gp)
    9430:	d0e00517 	ldw	r3,-32748(gp)
    9434:	053fffc4 	movi	r20,-1
    9438:	10800404 	addi	r2,r2,16
    943c:	88a7883a 	add	r19,r17,r2
    9440:	1d000326 	beq	r3,r20,9450 <_malloc_r+0x3d4>
    9444:	98c3ffc4 	addi	r3,r19,4095
    9448:	00bc0004 	movi	r2,-4096
    944c:	18a6703a 	and	r19,r3,r2
    9450:	9009883a 	mov	r4,r18
    9454:	980b883a 	mov	r5,r19
    9458:	000b1100 	call	b110 <_sbrk_r>
    945c:	1009883a 	mov	r4,r2
    9460:	15000426 	beq	r2,r20,9474 <_malloc_r+0x3f8>
    9464:	854b883a 	add	r5,r16,r21
    9468:	1029883a 	mov	r20,r2
    946c:	11405a2e 	bgeu	r2,r5,95d8 <_malloc_r+0x55c>
    9470:	87000c26 	beq	r16,fp,94a4 <_malloc_r+0x428>
    9474:	e4000217 	ldw	r16,8(fp)
    9478:	80c00117 	ldw	r3,4(r16)
    947c:	00bfff04 	movi	r2,-4
    9480:	1884703a 	and	r2,r3,r2
    9484:	14400336 	bltu	r2,r17,9494 <_malloc_r+0x418>
    9488:	1449c83a 	sub	r4,r2,r17
    948c:	008003c4 	movi	r2,15
    9490:	113fd316 	blt	r2,r4,93e0 <_malloc_r+0x364>
    9494:	9009883a 	mov	r4,r18
    9498:	000e1a40 	call	e1a4 <__malloc_unlock>
    949c:	0007883a 	mov	r3,zero
    94a0:	003f0a06 	br	90cc <_malloc_r+0x50>
    94a4:	05c00074 	movhi	r23,1
    94a8:	bdd6ee04 	addi	r23,r23,23480
    94ac:	b8800017 	ldw	r2,0(r23)
    94b0:	988d883a 	add	r6,r19,r2
    94b4:	b9800015 	stw	r6,0(r23)
    94b8:	d0e00517 	ldw	r3,-32748(gp)
    94bc:	00bfffc4 	movi	r2,-1
    94c0:	18808e26 	beq	r3,r2,96fc <_malloc_r+0x680>
    94c4:	2145c83a 	sub	r2,r4,r5
    94c8:	3085883a 	add	r2,r6,r2
    94cc:	b8800015 	stw	r2,0(r23)
    94d0:	20c001cc 	andi	r3,r4,7
    94d4:	18005f1e 	bne	r3,zero,9654 <_malloc_r+0x5d8>
    94d8:	000b883a 	mov	r5,zero
    94dc:	a4c5883a 	add	r2,r20,r19
    94e0:	1083ffcc 	andi	r2,r2,4095
    94e4:	00c40004 	movi	r3,4096
    94e8:	1887c83a 	sub	r3,r3,r2
    94ec:	28e7883a 	add	r19,r5,r3
    94f0:	9009883a 	mov	r4,r18
    94f4:	980b883a 	mov	r5,r19
    94f8:	000b1100 	call	b110 <_sbrk_r>
    94fc:	1007883a 	mov	r3,r2
    9500:	00bfffc4 	movi	r2,-1
    9504:	18807a26 	beq	r3,r2,96f0 <_malloc_r+0x674>
    9508:	1d05c83a 	sub	r2,r3,r20
    950c:	9885883a 	add	r2,r19,r2
    9510:	10c00054 	ori	r3,r2,1
    9514:	b8800017 	ldw	r2,0(r23)
    9518:	a021883a 	mov	r16,r20
    951c:	a0c00115 	stw	r3,4(r20)
    9520:	9885883a 	add	r2,r19,r2
    9524:	b8800015 	stw	r2,0(r23)
    9528:	e5000215 	stw	r20,8(fp)
    952c:	b7003626 	beq	r22,fp,9608 <_malloc_r+0x58c>
    9530:	018003c4 	movi	r6,15
    9534:	35404b36 	bltu	r6,r21,9664 <_malloc_r+0x5e8>
    9538:	00800044 	movi	r2,1
    953c:	a0800115 	stw	r2,4(r20)
    9540:	003fcd06 	br	9478 <_malloc_r+0x3fc>
    9544:	2808d27a 	srli	r4,r5,9
    9548:	2000371e 	bne	r4,zero,9628 <_malloc_r+0x5ac>
    954c:	2808d0fa 	srli	r4,r5,3
    9550:	200690fa 	slli	r3,r4,3
    9554:	1ad1883a 	add	r8,r3,r11
    9558:	41800217 	ldw	r6,8(r8)
    955c:	41805b26 	beq	r8,r6,96cc <_malloc_r+0x650>
    9560:	30800117 	ldw	r2,4(r6)
    9564:	00ffff04 	movi	r3,-4
    9568:	10c4703a 	and	r2,r2,r3
    956c:	2880022e 	bgeu	r5,r2,9578 <_malloc_r+0x4fc>
    9570:	31800217 	ldw	r6,8(r6)
    9574:	41bffa1e 	bne	r8,r6,9560 <_malloc_r+0x4e4>
    9578:	32000317 	ldw	r8,12(r6)
    957c:	39c00117 	ldw	r7,4(r7)
    9580:	82000315 	stw	r8,12(r16)
    9584:	81800215 	stw	r6,8(r16)
    9588:	07000074 	movhi	fp,1
    958c:	e70a1d04 	addi	fp,fp,10356
    9590:	34000315 	stw	r16,12(r6)
    9594:	44000215 	stw	r16,8(r8)
    9598:	003f3e06 	br	9294 <_malloc_r+0x218>
    959c:	63000044 	addi	r12,r12,1
    95a0:	608000cc 	andi	r2,r12,3
    95a4:	10005d26 	beq	r2,zero,971c <_malloc_r+0x6a0>
    95a8:	18c00204 	addi	r3,r3,8
    95ac:	003f5106 	br	92f4 <_malloc_r+0x278>
    95b0:	8089883a 	add	r4,r16,r2
    95b4:	003f6d06 	br	936c <_malloc_r+0x2f0>
    95b8:	00805504 	movi	r2,340
    95bc:	10c02036 	bltu	r2,r3,9640 <_malloc_r+0x5c4>
    95c0:	8804d3fa 	srli	r2,r17,15
    95c4:	11801dc4 	addi	r6,r2,119
    95c8:	300490fa 	slli	r2,r6,3
    95cc:	003ed806 	br	9130 <_malloc_r+0xb4>
    95d0:	48c000c4 	addi	r3,r9,3
    95d4:	003f3106 	br	929c <_malloc_r+0x220>
    95d8:	05c00074 	movhi	r23,1
    95dc:	bdd6ee04 	addi	r23,r23,23480
    95e0:	b8800017 	ldw	r2,0(r23)
    95e4:	988d883a 	add	r6,r19,r2
    95e8:	b9800015 	stw	r6,0(r23)
    95ec:	293fb21e 	bne	r5,r4,94b8 <_malloc_r+0x43c>
    95f0:	2083ffcc 	andi	r2,r4,4095
    95f4:	103fb01e 	bne	r2,zero,94b8 <_malloc_r+0x43c>
    95f8:	e4000217 	ldw	r16,8(fp)
    95fc:	9d45883a 	add	r2,r19,r21
    9600:	10800054 	ori	r2,r2,1
    9604:	80800115 	stw	r2,4(r16)
    9608:	b8c00017 	ldw	r3,0(r23)
    960c:	d0a6fc17 	ldw	r2,-25616(gp)
    9610:	10c0012e 	bgeu	r2,r3,9618 <_malloc_r+0x59c>
    9614:	d0e6fc15 	stw	r3,-25616(gp)
    9618:	d0a6fd17 	ldw	r2,-25612(gp)
    961c:	10ff962e 	bgeu	r2,r3,9478 <_malloc_r+0x3fc>
    9620:	d0e6fd15 	stw	r3,-25612(gp)
    9624:	003f9406 	br	9478 <_malloc_r+0x3fc>
    9628:	00800104 	movi	r2,4
    962c:	11001e36 	bltu	r2,r4,96a8 <_malloc_r+0x62c>
    9630:	2804d1ba 	srli	r2,r5,6
    9634:	11000e04 	addi	r4,r2,56
    9638:	200690fa 	slli	r3,r4,3
    963c:	003fc506 	br	9554 <_malloc_r+0x4d8>
    9640:	00815504 	movi	r2,1364
    9644:	10c01d2e 	bgeu	r2,r3,96bc <_malloc_r+0x640>
    9648:	01801f84 	movi	r6,126
    964c:	0080fc04 	movi	r2,1008
    9650:	003eb706 	br	9130 <_malloc_r+0xb4>
    9654:	00800204 	movi	r2,8
    9658:	10cbc83a 	sub	r5,r2,r3
    965c:	2169883a 	add	r20,r4,r5
    9660:	003f9e06 	br	94dc <_malloc_r+0x460>
    9664:	00bffe04 	movi	r2,-8
    9668:	a93ffd04 	addi	r4,r21,-12
    966c:	2088703a 	and	r4,r4,r2
    9670:	b10b883a 	add	r5,r22,r4
    9674:	00c00144 	movi	r3,5
    9678:	28c00215 	stw	r3,8(r5)
    967c:	28c00115 	stw	r3,4(r5)
    9680:	b0800117 	ldw	r2,4(r22)
    9684:	1080004c 	andi	r2,r2,1
    9688:	2084b03a 	or	r2,r4,r2
    968c:	b0800115 	stw	r2,4(r22)
    9690:	313fdd2e 	bgeu	r6,r4,9608 <_malloc_r+0x58c>
    9694:	b1400204 	addi	r5,r22,8
    9698:	9009883a 	mov	r4,r18
    969c:	00084f40 	call	84f4 <_free_r>
    96a0:	e4000217 	ldw	r16,8(fp)
    96a4:	003fd806 	br	9608 <_malloc_r+0x58c>
    96a8:	00800504 	movi	r2,20
    96ac:	11001536 	bltu	r2,r4,9704 <_malloc_r+0x688>
    96b0:	210016c4 	addi	r4,r4,91
    96b4:	200690fa 	slli	r3,r4,3
    96b8:	003fa606 	br	9554 <_malloc_r+0x4d8>
    96bc:	8804d4ba 	srli	r2,r17,18
    96c0:	11801f04 	addi	r6,r2,124
    96c4:	300490fa 	slli	r2,r6,3
    96c8:	003e9906 	br	9130 <_malloc_r+0xb4>
    96cc:	2009d0ba 	srai	r4,r4,2
    96d0:	01400074 	movhi	r5,1
    96d4:	294a1d04 	addi	r5,r5,10356
    96d8:	00c00044 	movi	r3,1
    96dc:	28800117 	ldw	r2,4(r5)
    96e0:	1906983a 	sll	r3,r3,r4
    96e4:	10c4b03a 	or	r2,r2,r3
    96e8:	28800115 	stw	r2,4(r5)
    96ec:	003fa306 	br	957c <_malloc_r+0x500>
    96f0:	0027883a 	mov	r19,zero
    96f4:	00c00044 	movi	r3,1
    96f8:	003f8606 	br	9514 <_malloc_r+0x498>
    96fc:	d1200515 	stw	r4,-32748(gp)
    9700:	003f7306 	br	94d0 <_malloc_r+0x454>
    9704:	00801504 	movi	r2,84
    9708:	11001936 	bltu	r2,r4,9770 <_malloc_r+0x6f4>
    970c:	2804d33a 	srli	r2,r5,12
    9710:	11001b84 	addi	r4,r2,110
    9714:	200690fa 	slli	r3,r4,3
    9718:	003f8e06 	br	9554 <_malloc_r+0x4d8>
    971c:	480b883a 	mov	r5,r9
    9720:	6807883a 	mov	r3,r13
    9724:	288000cc 	andi	r2,r5,3
    9728:	18fffe04 	addi	r3,r3,-8
    972c:	297fffc4 	addi	r5,r5,-1
    9730:	10001526 	beq	r2,zero,9788 <_malloc_r+0x70c>
    9734:	18800217 	ldw	r2,8(r3)
    9738:	10fffa26 	beq	r2,r3,9724 <_malloc_r+0x6a8>
    973c:	2109883a 	add	r4,r4,r4
    9740:	393f1e36 	bltu	r7,r4,93bc <_malloc_r+0x340>
    9744:	203f1d26 	beq	r4,zero,93bc <_malloc_r+0x340>
    9748:	21c4703a 	and	r2,r4,r7
    974c:	10000226 	beq	r2,zero,9758 <_malloc_r+0x6dc>
    9750:	6013883a 	mov	r9,r12
    9754:	003ee106 	br	92dc <_malloc_r+0x260>
    9758:	2109883a 	add	r4,r4,r4
    975c:	3904703a 	and	r2,r7,r4
    9760:	63000104 	addi	r12,r12,4
    9764:	103ffc26 	beq	r2,zero,9758 <_malloc_r+0x6dc>
    9768:	6013883a 	mov	r9,r12
    976c:	003edb06 	br	92dc <_malloc_r+0x260>
    9770:	00805504 	movi	r2,340
    9774:	11000836 	bltu	r2,r4,9798 <_malloc_r+0x71c>
    9778:	2804d3fa 	srli	r2,r5,15
    977c:	11001dc4 	addi	r4,r2,119
    9780:	200690fa 	slli	r3,r4,3
    9784:	003f7306 	br	9554 <_malloc_r+0x4d8>
    9788:	0104303a 	nor	r2,zero,r4
    978c:	388e703a 	and	r7,r7,r2
    9790:	e1c00115 	stw	r7,4(fp)
    9794:	003fe906 	br	973c <_malloc_r+0x6c0>
    9798:	00815504 	movi	r2,1364
    979c:	1100032e 	bgeu	r2,r4,97ac <_malloc_r+0x730>
    97a0:	01001f84 	movi	r4,126
    97a4:	00c0fc04 	movi	r3,1008
    97a8:	003f6a06 	br	9554 <_malloc_r+0x4d8>
    97ac:	2804d4ba 	srli	r2,r5,18
    97b0:	11001f04 	addi	r4,r2,124
    97b4:	200690fa 	slli	r3,r4,3
    97b8:	003f6606 	br	9554 <_malloc_r+0x4d8>

000097bc <memchr>:
    97bc:	008000c4 	movi	r2,3
    97c0:	29403fcc 	andi	r5,r5,255
    97c4:	2007883a 	mov	r3,r4
    97c8:	1180022e 	bgeu	r2,r6,97d4 <memchr+0x18>
    97cc:	2084703a 	and	r2,r4,r2
    97d0:	10000b26 	beq	r2,zero,9800 <memchr+0x44>
    97d4:	313fffc4 	addi	r4,r6,-1
    97d8:	3000051e 	bne	r6,zero,97f0 <memchr+0x34>
    97dc:	00002c06 	br	9890 <memchr+0xd4>
    97e0:	213fffc4 	addi	r4,r4,-1
    97e4:	00bfffc4 	movi	r2,-1
    97e8:	18c00044 	addi	r3,r3,1
    97ec:	20802826 	beq	r4,r2,9890 <memchr+0xd4>
    97f0:	18800003 	ldbu	r2,0(r3)
    97f4:	28bffa1e 	bne	r5,r2,97e0 <memchr+0x24>
    97f8:	1805883a 	mov	r2,r3
    97fc:	f800283a 	ret
    9800:	0011883a 	mov	r8,zero
    9804:	0007883a 	mov	r3,zero
    9808:	01c00104 	movi	r7,4
    980c:	4004923a 	slli	r2,r8,8
    9810:	18c00044 	addi	r3,r3,1
    9814:	1151883a 	add	r8,r2,r5
    9818:	19fffc1e 	bne	r3,r7,980c <memchr+0x50>
    981c:	02bfbff4 	movhi	r10,65279
    9820:	52bfbfc4 	addi	r10,r10,-257
    9824:	02602074 	movhi	r9,32897
    9828:	4a602004 	addi	r9,r9,-32640
    982c:	02c000c4 	movi	r11,3
    9830:	20800017 	ldw	r2,0(r4)
    9834:	31bfff04 	addi	r6,r6,-4
    9838:	200f883a 	mov	r7,r4
    983c:	1204f03a 	xor	r2,r2,r8
    9840:	1287883a 	add	r3,r2,r10
    9844:	1a46703a 	and	r3,r3,r9
    9848:	0084303a 	nor	r2,zero,r2
    984c:	10c4703a 	and	r2,r2,r3
    9850:	10000b26 	beq	r2,zero,9880 <memchr+0xc4>
    9854:	20800003 	ldbu	r2,0(r4)
    9858:	28800f26 	beq	r5,r2,9898 <memchr+0xdc>
    985c:	20800043 	ldbu	r2,1(r4)
    9860:	21c00044 	addi	r7,r4,1
    9864:	28800c26 	beq	r5,r2,9898 <memchr+0xdc>
    9868:	20800083 	ldbu	r2,2(r4)
    986c:	21c00084 	addi	r7,r4,2
    9870:	28800926 	beq	r5,r2,9898 <memchr+0xdc>
    9874:	208000c3 	ldbu	r2,3(r4)
    9878:	21c000c4 	addi	r7,r4,3
    987c:	28800626 	beq	r5,r2,9898 <memchr+0xdc>
    9880:	21000104 	addi	r4,r4,4
    9884:	59bfea36 	bltu	r11,r6,9830 <memchr+0x74>
    9888:	2007883a 	mov	r3,r4
    988c:	003fd106 	br	97d4 <memchr+0x18>
    9890:	0005883a 	mov	r2,zero
    9894:	f800283a 	ret
    9898:	3805883a 	mov	r2,r7
    989c:	f800283a 	ret

000098a0 <memcpy>:
    98a0:	01c003c4 	movi	r7,15
    98a4:	2007883a 	mov	r3,r4
    98a8:	3980032e 	bgeu	r7,r6,98b8 <memcpy+0x18>
    98ac:	2904b03a 	or	r2,r5,r4
    98b0:	108000cc 	andi	r2,r2,3
    98b4:	10000926 	beq	r2,zero,98dc <memcpy+0x3c>
    98b8:	30000626 	beq	r6,zero,98d4 <memcpy+0x34>
    98bc:	30cd883a 	add	r6,r6,r3
    98c0:	28800003 	ldbu	r2,0(r5)
    98c4:	29400044 	addi	r5,r5,1
    98c8:	18800005 	stb	r2,0(r3)
    98cc:	18c00044 	addi	r3,r3,1
    98d0:	30fffb1e 	bne	r6,r3,98c0 <memcpy+0x20>
    98d4:	2005883a 	mov	r2,r4
    98d8:	f800283a 	ret
    98dc:	3811883a 	mov	r8,r7
    98e0:	200f883a 	mov	r7,r4
    98e4:	28c00017 	ldw	r3,0(r5)
    98e8:	31bffc04 	addi	r6,r6,-16
    98ec:	38c00015 	stw	r3,0(r7)
    98f0:	28800117 	ldw	r2,4(r5)
    98f4:	38800115 	stw	r2,4(r7)
    98f8:	28c00217 	ldw	r3,8(r5)
    98fc:	38c00215 	stw	r3,8(r7)
    9900:	28800317 	ldw	r2,12(r5)
    9904:	29400404 	addi	r5,r5,16
    9908:	38800315 	stw	r2,12(r7)
    990c:	39c00404 	addi	r7,r7,16
    9910:	41bff436 	bltu	r8,r6,98e4 <memcpy+0x44>
    9914:	008000c4 	movi	r2,3
    9918:	1180072e 	bgeu	r2,r6,9938 <memcpy+0x98>
    991c:	1007883a 	mov	r3,r2
    9920:	28800017 	ldw	r2,0(r5)
    9924:	31bfff04 	addi	r6,r6,-4
    9928:	29400104 	addi	r5,r5,4
    992c:	38800015 	stw	r2,0(r7)
    9930:	39c00104 	addi	r7,r7,4
    9934:	19bffa36 	bltu	r3,r6,9920 <memcpy+0x80>
    9938:	3807883a 	mov	r3,r7
    993c:	003fde06 	br	98b8 <memcpy+0x18>

00009940 <memmove>:
    9940:	2807883a 	mov	r3,r5
    9944:	2011883a 	mov	r8,r4
    9948:	29000c2e 	bgeu	r5,r4,997c <memmove+0x3c>
    994c:	298f883a 	add	r7,r5,r6
    9950:	21c00a2e 	bgeu	r4,r7,997c <memmove+0x3c>
    9954:	30000726 	beq	r6,zero,9974 <memmove+0x34>
    9958:	2187883a 	add	r3,r4,r6
    995c:	198dc83a 	sub	r6,r3,r6
    9960:	39ffffc4 	addi	r7,r7,-1
    9964:	38800003 	ldbu	r2,0(r7)
    9968:	18ffffc4 	addi	r3,r3,-1
    996c:	18800005 	stb	r2,0(r3)
    9970:	19bffb1e 	bne	r3,r6,9960 <memmove+0x20>
    9974:	2005883a 	mov	r2,r4
    9978:	f800283a 	ret
    997c:	01c003c4 	movi	r7,15
    9980:	39800a36 	bltu	r7,r6,99ac <memmove+0x6c>
    9984:	303ffb26 	beq	r6,zero,9974 <memmove+0x34>
    9988:	400f883a 	mov	r7,r8
    998c:	320d883a 	add	r6,r6,r8
    9990:	28800003 	ldbu	r2,0(r5)
    9994:	29400044 	addi	r5,r5,1
    9998:	38800005 	stb	r2,0(r7)
    999c:	39c00044 	addi	r7,r7,1
    99a0:	39bffb1e 	bne	r7,r6,9990 <memmove+0x50>
    99a4:	2005883a 	mov	r2,r4
    99a8:	f800283a 	ret
    99ac:	1904b03a 	or	r2,r3,r4
    99b0:	108000cc 	andi	r2,r2,3
    99b4:	103ff31e 	bne	r2,zero,9984 <memmove+0x44>
    99b8:	3811883a 	mov	r8,r7
    99bc:	180b883a 	mov	r5,r3
    99c0:	200f883a 	mov	r7,r4
    99c4:	28c00017 	ldw	r3,0(r5)
    99c8:	31bffc04 	addi	r6,r6,-16
    99cc:	38c00015 	stw	r3,0(r7)
    99d0:	28800117 	ldw	r2,4(r5)
    99d4:	38800115 	stw	r2,4(r7)
    99d8:	28c00217 	ldw	r3,8(r5)
    99dc:	38c00215 	stw	r3,8(r7)
    99e0:	28800317 	ldw	r2,12(r5)
    99e4:	29400404 	addi	r5,r5,16
    99e8:	38800315 	stw	r2,12(r7)
    99ec:	39c00404 	addi	r7,r7,16
    99f0:	41bff436 	bltu	r8,r6,99c4 <memmove+0x84>
    99f4:	008000c4 	movi	r2,3
    99f8:	1180072e 	bgeu	r2,r6,9a18 <memmove+0xd8>
    99fc:	1007883a 	mov	r3,r2
    9a00:	28800017 	ldw	r2,0(r5)
    9a04:	31bfff04 	addi	r6,r6,-4
    9a08:	29400104 	addi	r5,r5,4
    9a0c:	38800015 	stw	r2,0(r7)
    9a10:	39c00104 	addi	r7,r7,4
    9a14:	19bffa36 	bltu	r3,r6,9a00 <memmove+0xc0>
    9a18:	3811883a 	mov	r8,r7
    9a1c:	003fd906 	br	9984 <memmove+0x44>

00009a20 <memset>:
    9a20:	008000c4 	movi	r2,3
    9a24:	29403fcc 	andi	r5,r5,255
    9a28:	2007883a 	mov	r3,r4
    9a2c:	1180022e 	bgeu	r2,r6,9a38 <memset+0x18>
    9a30:	2084703a 	and	r2,r4,r2
    9a34:	10000826 	beq	r2,zero,9a58 <memset+0x38>
    9a38:	30000526 	beq	r6,zero,9a50 <memset+0x30>
    9a3c:	2805883a 	mov	r2,r5
    9a40:	30cd883a 	add	r6,r6,r3
    9a44:	18800005 	stb	r2,0(r3)
    9a48:	18c00044 	addi	r3,r3,1
    9a4c:	19bffd1e 	bne	r3,r6,9a44 <memset+0x24>
    9a50:	2005883a 	mov	r2,r4
    9a54:	f800283a 	ret
    9a58:	2804923a 	slli	r2,r5,8
    9a5c:	020003c4 	movi	r8,15
    9a60:	200f883a 	mov	r7,r4
    9a64:	2884b03a 	or	r2,r5,r2
    9a68:	1006943a 	slli	r3,r2,16
    9a6c:	10c6b03a 	or	r3,r2,r3
    9a70:	41800a2e 	bgeu	r8,r6,9a9c <memset+0x7c>
    9a74:	4005883a 	mov	r2,r8
    9a78:	31bffc04 	addi	r6,r6,-16
    9a7c:	38c00015 	stw	r3,0(r7)
    9a80:	38c00115 	stw	r3,4(r7)
    9a84:	38c00215 	stw	r3,8(r7)
    9a88:	38c00315 	stw	r3,12(r7)
    9a8c:	39c00404 	addi	r7,r7,16
    9a90:	11bff936 	bltu	r2,r6,9a78 <memset+0x58>
    9a94:	008000c4 	movi	r2,3
    9a98:	1180052e 	bgeu	r2,r6,9ab0 <memset+0x90>
    9a9c:	31bfff04 	addi	r6,r6,-4
    9aa0:	008000c4 	movi	r2,3
    9aa4:	38c00015 	stw	r3,0(r7)
    9aa8:	39c00104 	addi	r7,r7,4
    9aac:	11bffb36 	bltu	r2,r6,9a9c <memset+0x7c>
    9ab0:	3807883a 	mov	r3,r7
    9ab4:	003fe006 	br	9a38 <memset+0x18>

00009ab8 <_Bfree>:
    9ab8:	28000826 	beq	r5,zero,9adc <_Bfree+0x24>
    9abc:	28800117 	ldw	r2,4(r5)
    9ac0:	21001317 	ldw	r4,76(r4)
    9ac4:	1085883a 	add	r2,r2,r2
    9ac8:	1085883a 	add	r2,r2,r2
    9acc:	1105883a 	add	r2,r2,r4
    9ad0:	10c00017 	ldw	r3,0(r2)
    9ad4:	28c00015 	stw	r3,0(r5)
    9ad8:	11400015 	stw	r5,0(r2)
    9adc:	f800283a 	ret

00009ae0 <__hi0bits>:
    9ae0:	20bfffec 	andhi	r2,r4,65535
    9ae4:	10001426 	beq	r2,zero,9b38 <__hi0bits+0x58>
    9ae8:	0007883a 	mov	r3,zero
    9aec:	20bfc02c 	andhi	r2,r4,65280
    9af0:	1000021e 	bne	r2,zero,9afc <__hi0bits+0x1c>
    9af4:	2008923a 	slli	r4,r4,8
    9af8:	18c00204 	addi	r3,r3,8
    9afc:	20bc002c 	andhi	r2,r4,61440
    9b00:	1000021e 	bne	r2,zero,9b0c <__hi0bits+0x2c>
    9b04:	2008913a 	slli	r4,r4,4
    9b08:	18c00104 	addi	r3,r3,4
    9b0c:	20b0002c 	andhi	r2,r4,49152
    9b10:	1000031e 	bne	r2,zero,9b20 <__hi0bits+0x40>
    9b14:	2105883a 	add	r2,r4,r4
    9b18:	18c00084 	addi	r3,r3,2
    9b1c:	1089883a 	add	r4,r2,r2
    9b20:	20000316 	blt	r4,zero,9b30 <__hi0bits+0x50>
    9b24:	2090002c 	andhi	r2,r4,16384
    9b28:	10000626 	beq	r2,zero,9b44 <__hi0bits+0x64>
    9b2c:	18c00044 	addi	r3,r3,1
    9b30:	1805883a 	mov	r2,r3
    9b34:	f800283a 	ret
    9b38:	2008943a 	slli	r4,r4,16
    9b3c:	00c00404 	movi	r3,16
    9b40:	003fea06 	br	9aec <__hi0bits+0xc>
    9b44:	00c00804 	movi	r3,32
    9b48:	1805883a 	mov	r2,r3
    9b4c:	f800283a 	ret

00009b50 <__lo0bits>:
    9b50:	20c00017 	ldw	r3,0(r4)
    9b54:	188001cc 	andi	r2,r3,7
    9b58:	10000a26 	beq	r2,zero,9b84 <__lo0bits+0x34>
    9b5c:	1880004c 	andi	r2,r3,1
    9b60:	1005003a 	cmpeq	r2,r2,zero
    9b64:	10002126 	beq	r2,zero,9bec <__lo0bits+0x9c>
    9b68:	1880008c 	andi	r2,r3,2
    9b6c:	1000251e 	bne	r2,zero,9c04 <__lo0bits+0xb4>
    9b70:	1804d0ba 	srli	r2,r3,2
    9b74:	01400084 	movi	r5,2
    9b78:	20800015 	stw	r2,0(r4)
    9b7c:	2805883a 	mov	r2,r5
    9b80:	f800283a 	ret
    9b84:	18bfffcc 	andi	r2,r3,65535
    9b88:	10001526 	beq	r2,zero,9be0 <__lo0bits+0x90>
    9b8c:	000b883a 	mov	r5,zero
    9b90:	18803fcc 	andi	r2,r3,255
    9b94:	1000021e 	bne	r2,zero,9ba0 <__lo0bits+0x50>
    9b98:	1806d23a 	srli	r3,r3,8
    9b9c:	29400204 	addi	r5,r5,8
    9ba0:	188003cc 	andi	r2,r3,15
    9ba4:	1000021e 	bne	r2,zero,9bb0 <__lo0bits+0x60>
    9ba8:	1806d13a 	srli	r3,r3,4
    9bac:	29400104 	addi	r5,r5,4
    9bb0:	188000cc 	andi	r2,r3,3
    9bb4:	1000021e 	bne	r2,zero,9bc0 <__lo0bits+0x70>
    9bb8:	1806d0ba 	srli	r3,r3,2
    9bbc:	29400084 	addi	r5,r5,2
    9bc0:	1880004c 	andi	r2,r3,1
    9bc4:	1000031e 	bne	r2,zero,9bd4 <__lo0bits+0x84>
    9bc8:	1806d07a 	srli	r3,r3,1
    9bcc:	18000a26 	beq	r3,zero,9bf8 <__lo0bits+0xa8>
    9bd0:	29400044 	addi	r5,r5,1
    9bd4:	2805883a 	mov	r2,r5
    9bd8:	20c00015 	stw	r3,0(r4)
    9bdc:	f800283a 	ret
    9be0:	1806d43a 	srli	r3,r3,16
    9be4:	01400404 	movi	r5,16
    9be8:	003fe906 	br	9b90 <__lo0bits+0x40>
    9bec:	000b883a 	mov	r5,zero
    9bf0:	2805883a 	mov	r2,r5
    9bf4:	f800283a 	ret
    9bf8:	01400804 	movi	r5,32
    9bfc:	2805883a 	mov	r2,r5
    9c00:	f800283a 	ret
    9c04:	1804d07a 	srli	r2,r3,1
    9c08:	01400044 	movi	r5,1
    9c0c:	20800015 	stw	r2,0(r4)
    9c10:	003fda06 	br	9b7c <__lo0bits+0x2c>

00009c14 <__mcmp>:
    9c14:	20800417 	ldw	r2,16(r4)
    9c18:	28c00417 	ldw	r3,16(r5)
    9c1c:	10cfc83a 	sub	r7,r2,r3
    9c20:	38000c1e 	bne	r7,zero,9c54 <__mcmp+0x40>
    9c24:	18c5883a 	add	r2,r3,r3
    9c28:	1085883a 	add	r2,r2,r2
    9c2c:	10c00504 	addi	r3,r2,20
    9c30:	21000504 	addi	r4,r4,20
    9c34:	28cb883a 	add	r5,r5,r3
    9c38:	2085883a 	add	r2,r4,r2
    9c3c:	10bfff04 	addi	r2,r2,-4
    9c40:	297fff04 	addi	r5,r5,-4
    9c44:	11800017 	ldw	r6,0(r2)
    9c48:	28c00017 	ldw	r3,0(r5)
    9c4c:	30c0031e 	bne	r6,r3,9c5c <__mcmp+0x48>
    9c50:	20bffa36 	bltu	r4,r2,9c3c <__mcmp+0x28>
    9c54:	3805883a 	mov	r2,r7
    9c58:	f800283a 	ret
    9c5c:	30c00336 	bltu	r6,r3,9c6c <__mcmp+0x58>
    9c60:	01c00044 	movi	r7,1
    9c64:	3805883a 	mov	r2,r7
    9c68:	f800283a 	ret
    9c6c:	01ffffc4 	movi	r7,-1
    9c70:	003ff806 	br	9c54 <__mcmp+0x40>

00009c74 <__ulp>:
    9c74:	295ffc2c 	andhi	r5,r5,32752
    9c78:	013f3034 	movhi	r4,64704
    9c7c:	290b883a 	add	r5,r5,r4
    9c80:	0145c83a 	sub	r2,zero,r5
    9c84:	1007d53a 	srai	r3,r2,20
    9c88:	000d883a 	mov	r6,zero
    9c8c:	0140040e 	bge	zero,r5,9ca0 <__ulp+0x2c>
    9c90:	280f883a 	mov	r7,r5
    9c94:	3807883a 	mov	r3,r7
    9c98:	3005883a 	mov	r2,r6
    9c9c:	f800283a 	ret
    9ca0:	008004c4 	movi	r2,19
    9ca4:	193ffb04 	addi	r4,r3,-20
    9ca8:	10c00c0e 	bge	r2,r3,9cdc <__ulp+0x68>
    9cac:	008007c4 	movi	r2,31
    9cb0:	1107c83a 	sub	r3,r2,r4
    9cb4:	00800784 	movi	r2,30
    9cb8:	01400044 	movi	r5,1
    9cbc:	11000216 	blt	r2,r4,9cc8 <__ulp+0x54>
    9cc0:	00800044 	movi	r2,1
    9cc4:	10ca983a 	sll	r5,r2,r3
    9cc8:	000f883a 	mov	r7,zero
    9ccc:	280d883a 	mov	r6,r5
    9cd0:	3807883a 	mov	r3,r7
    9cd4:	3005883a 	mov	r2,r6
    9cd8:	f800283a 	ret
    9cdc:	00800234 	movhi	r2,8
    9ce0:	10cfd83a 	sra	r7,r2,r3
    9ce4:	000d883a 	mov	r6,zero
    9ce8:	3005883a 	mov	r2,r6
    9cec:	3807883a 	mov	r3,r7
    9cf0:	f800283a 	ret

00009cf4 <__b2d>:
    9cf4:	20800417 	ldw	r2,16(r4)
    9cf8:	defff904 	addi	sp,sp,-28
    9cfc:	dd000415 	stw	r20,16(sp)
    9d00:	1085883a 	add	r2,r2,r2
    9d04:	25000504 	addi	r20,r4,20
    9d08:	1085883a 	add	r2,r2,r2
    9d0c:	dc000015 	stw	r16,0(sp)
    9d10:	a0a1883a 	add	r16,r20,r2
    9d14:	dd400515 	stw	r21,20(sp)
    9d18:	857fff17 	ldw	r21,-4(r16)
    9d1c:	dc400115 	stw	r17,4(sp)
    9d20:	dfc00615 	stw	ra,24(sp)
    9d24:	a809883a 	mov	r4,r21
    9d28:	2823883a 	mov	r17,r5
    9d2c:	dcc00315 	stw	r19,12(sp)
    9d30:	dc800215 	stw	r18,8(sp)
    9d34:	0009ae00 	call	9ae0 <__hi0bits>
    9d38:	100b883a 	mov	r5,r2
    9d3c:	00800804 	movi	r2,32
    9d40:	1145c83a 	sub	r2,r2,r5
    9d44:	88800015 	stw	r2,0(r17)
    9d48:	00800284 	movi	r2,10
    9d4c:	80ffff04 	addi	r3,r16,-4
    9d50:	11401416 	blt	r2,r5,9da4 <__b2d+0xb0>
    9d54:	008002c4 	movi	r2,11
    9d58:	1149c83a 	sub	r4,r2,r5
    9d5c:	a0c02736 	bltu	r20,r3,9dfc <__b2d+0x108>
    9d60:	000d883a 	mov	r6,zero
    9d64:	28800544 	addi	r2,r5,21
    9d68:	a906d83a 	srl	r3,r21,r4
    9d6c:	a884983a 	sll	r2,r21,r2
    9d70:	1ccffc34 	orhi	r19,r3,16368
    9d74:	11a4b03a 	or	r18,r2,r6
    9d78:	9005883a 	mov	r2,r18
    9d7c:	9807883a 	mov	r3,r19
    9d80:	dfc00617 	ldw	ra,24(sp)
    9d84:	dd400517 	ldw	r21,20(sp)
    9d88:	dd000417 	ldw	r20,16(sp)
    9d8c:	dcc00317 	ldw	r19,12(sp)
    9d90:	dc800217 	ldw	r18,8(sp)
    9d94:	dc400117 	ldw	r17,4(sp)
    9d98:	dc000017 	ldw	r16,0(sp)
    9d9c:	dec00704 	addi	sp,sp,28
    9da0:	f800283a 	ret
    9da4:	a0c00e36 	bltu	r20,r3,9de0 <__b2d+0xec>
    9da8:	293ffd44 	addi	r4,r5,-11
    9dac:	000d883a 	mov	r6,zero
    9db0:	20000f26 	beq	r4,zero,9df0 <__b2d+0xfc>
    9db4:	00800804 	movi	r2,32
    9db8:	110bc83a 	sub	r5,r2,r4
    9dbc:	a0c01236 	bltu	r20,r3,9e08 <__b2d+0x114>
    9dc0:	000f883a 	mov	r7,zero
    9dc4:	a904983a 	sll	r2,r21,r4
    9dc8:	3146d83a 	srl	r3,r6,r5
    9dcc:	3108983a 	sll	r4,r6,r4
    9dd0:	108ffc34 	orhi	r2,r2,16368
    9dd4:	18a6b03a 	or	r19,r3,r2
    9dd8:	3924b03a 	or	r18,r7,r4
    9ddc:	003fe606 	br	9d78 <__b2d+0x84>
    9de0:	293ffd44 	addi	r4,r5,-11
    9de4:	81bffe17 	ldw	r6,-8(r16)
    9de8:	80fffe04 	addi	r3,r16,-8
    9dec:	203ff11e 	bne	r4,zero,9db4 <__b2d+0xc0>
    9df0:	accffc34 	orhi	r19,r21,16368
    9df4:	3025883a 	mov	r18,r6
    9df8:	003fdf06 	br	9d78 <__b2d+0x84>
    9dfc:	18bfff17 	ldw	r2,-4(r3)
    9e00:	110cd83a 	srl	r6,r2,r4
    9e04:	003fd706 	br	9d64 <__b2d+0x70>
    9e08:	18bfff17 	ldw	r2,-4(r3)
    9e0c:	114ed83a 	srl	r7,r2,r5
    9e10:	003fec06 	br	9dc4 <__b2d+0xd0>

00009e14 <__ratio>:
    9e14:	defff904 	addi	sp,sp,-28
    9e18:	dc400215 	stw	r17,8(sp)
    9e1c:	2823883a 	mov	r17,r5
    9e20:	d80b883a 	mov	r5,sp
    9e24:	dfc00615 	stw	ra,24(sp)
    9e28:	dd000515 	stw	r20,20(sp)
    9e2c:	dcc00415 	stw	r19,16(sp)
    9e30:	dc800315 	stw	r18,12(sp)
    9e34:	2025883a 	mov	r18,r4
    9e38:	0009cf40 	call	9cf4 <__b2d>
    9e3c:	8809883a 	mov	r4,r17
    9e40:	d9400104 	addi	r5,sp,4
    9e44:	1027883a 	mov	r19,r2
    9e48:	1829883a 	mov	r20,r3
    9e4c:	0009cf40 	call	9cf4 <__b2d>
    9e50:	89000417 	ldw	r4,16(r17)
    9e54:	91c00417 	ldw	r7,16(r18)
    9e58:	d9800117 	ldw	r6,4(sp)
    9e5c:	180b883a 	mov	r5,r3
    9e60:	390fc83a 	sub	r7,r7,r4
    9e64:	1009883a 	mov	r4,r2
    9e68:	d8800017 	ldw	r2,0(sp)
    9e6c:	380e917a 	slli	r7,r7,5
    9e70:	2011883a 	mov	r8,r4
    9e74:	1185c83a 	sub	r2,r2,r6
    9e78:	11c5883a 	add	r2,r2,r7
    9e7c:	1006953a 	slli	r3,r2,20
    9e80:	2813883a 	mov	r9,r5
    9e84:	00800d0e 	bge	zero,r2,9ebc <__ratio+0xa8>
    9e88:	1d29883a 	add	r20,r3,r20
    9e8c:	a00b883a 	mov	r5,r20
    9e90:	480f883a 	mov	r7,r9
    9e94:	9809883a 	mov	r4,r19
    9e98:	400d883a 	mov	r6,r8
    9e9c:	000cc700 	call	cc70 <__divdf3>
    9ea0:	dfc00617 	ldw	ra,24(sp)
    9ea4:	dd000517 	ldw	r20,20(sp)
    9ea8:	dcc00417 	ldw	r19,16(sp)
    9eac:	dc800317 	ldw	r18,12(sp)
    9eb0:	dc400217 	ldw	r17,8(sp)
    9eb4:	dec00704 	addi	sp,sp,28
    9eb8:	f800283a 	ret
    9ebc:	28d3c83a 	sub	r9,r5,r3
    9ec0:	003ff206 	br	9e8c <__ratio+0x78>

00009ec4 <_mprec_log10>:
    9ec4:	defffe04 	addi	sp,sp,-8
    9ec8:	008005c4 	movi	r2,23
    9ecc:	dc000015 	stw	r16,0(sp)
    9ed0:	dfc00115 	stw	ra,4(sp)
    9ed4:	2021883a 	mov	r16,r4
    9ed8:	11000c16 	blt	r2,r4,9f0c <_mprec_log10+0x48>
    9edc:	200490fa 	slli	r2,r4,3
    9ee0:	00c00074 	movhi	r3,1
    9ee4:	18c7d904 	addi	r3,r3,8036
    9ee8:	10c5883a 	add	r2,r2,r3
    9eec:	12400117 	ldw	r9,4(r2)
    9ef0:	12000017 	ldw	r8,0(r2)
    9ef4:	4807883a 	mov	r3,r9
    9ef8:	4005883a 	mov	r2,r8
    9efc:	dfc00117 	ldw	ra,4(sp)
    9f00:	dc000017 	ldw	r16,0(sp)
    9f04:	dec00204 	addi	sp,sp,8
    9f08:	f800283a 	ret
    9f0c:	0011883a 	mov	r8,zero
    9f10:	024ffc34 	movhi	r9,16368
    9f14:	0005883a 	mov	r2,zero
    9f18:	00d00934 	movhi	r3,16420
    9f1c:	480b883a 	mov	r5,r9
    9f20:	4009883a 	mov	r4,r8
    9f24:	180f883a 	mov	r7,r3
    9f28:	100d883a 	mov	r6,r2
    9f2c:	000c8ac0 	call	c8ac <__muldf3>
    9f30:	843fffc4 	addi	r16,r16,-1
    9f34:	1011883a 	mov	r8,r2
    9f38:	1813883a 	mov	r9,r3
    9f3c:	803ff51e 	bne	r16,zero,9f14 <_mprec_log10+0x50>
    9f40:	4005883a 	mov	r2,r8
    9f44:	4807883a 	mov	r3,r9
    9f48:	dfc00117 	ldw	ra,4(sp)
    9f4c:	dc000017 	ldw	r16,0(sp)
    9f50:	dec00204 	addi	sp,sp,8
    9f54:	f800283a 	ret

00009f58 <__copybits>:
    9f58:	297fffc4 	addi	r5,r5,-1
    9f5c:	30800417 	ldw	r2,16(r6)
    9f60:	280bd17a 	srai	r5,r5,5
    9f64:	31800504 	addi	r6,r6,20
    9f68:	1085883a 	add	r2,r2,r2
    9f6c:	294b883a 	add	r5,r5,r5
    9f70:	294b883a 	add	r5,r5,r5
    9f74:	1085883a 	add	r2,r2,r2
    9f78:	290b883a 	add	r5,r5,r4
    9f7c:	3087883a 	add	r3,r6,r2
    9f80:	29400104 	addi	r5,r5,4
    9f84:	30c0052e 	bgeu	r6,r3,9f9c <__copybits+0x44>
    9f88:	30800017 	ldw	r2,0(r6)
    9f8c:	31800104 	addi	r6,r6,4
    9f90:	20800015 	stw	r2,0(r4)
    9f94:	21000104 	addi	r4,r4,4
    9f98:	30fffb36 	bltu	r6,r3,9f88 <__copybits+0x30>
    9f9c:	2140032e 	bgeu	r4,r5,9fac <__copybits+0x54>
    9fa0:	20000015 	stw	zero,0(r4)
    9fa4:	21000104 	addi	r4,r4,4
    9fa8:	217ffd36 	bltu	r4,r5,9fa0 <__copybits+0x48>
    9fac:	f800283a 	ret

00009fb0 <__any_on>:
    9fb0:	20800417 	ldw	r2,16(r4)
    9fb4:	2807d17a 	srai	r3,r5,5
    9fb8:	21000504 	addi	r4,r4,20
    9fbc:	10c00d0e 	bge	r2,r3,9ff4 <__any_on+0x44>
    9fc0:	1085883a 	add	r2,r2,r2
    9fc4:	1085883a 	add	r2,r2,r2
    9fc8:	208d883a 	add	r6,r4,r2
    9fcc:	2180182e 	bgeu	r4,r6,a030 <__any_on+0x80>
    9fd0:	30bfff17 	ldw	r2,-4(r6)
    9fd4:	30ffff04 	addi	r3,r6,-4
    9fd8:	1000041e 	bne	r2,zero,9fec <__any_on+0x3c>
    9fdc:	20c0142e 	bgeu	r4,r3,a030 <__any_on+0x80>
    9fe0:	18ffff04 	addi	r3,r3,-4
    9fe4:	18800017 	ldw	r2,0(r3)
    9fe8:	103ffc26 	beq	r2,zero,9fdc <__any_on+0x2c>
    9fec:	00800044 	movi	r2,1
    9ff0:	f800283a 	ret
    9ff4:	18800a0e 	bge	r3,r2,a020 <__any_on+0x70>
    9ff8:	294007cc 	andi	r5,r5,31
    9ffc:	28000826 	beq	r5,zero,a020 <__any_on+0x70>
    a000:	18c5883a 	add	r2,r3,r3
    a004:	1085883a 	add	r2,r2,r2
    a008:	208d883a 	add	r6,r4,r2
    a00c:	30c00017 	ldw	r3,0(r6)
    a010:	1944d83a 	srl	r2,r3,r5
    a014:	1144983a 	sll	r2,r2,r5
    a018:	18bff41e 	bne	r3,r2,9fec <__any_on+0x3c>
    a01c:	003feb06 	br	9fcc <__any_on+0x1c>
    a020:	18c5883a 	add	r2,r3,r3
    a024:	1085883a 	add	r2,r2,r2
    a028:	208d883a 	add	r6,r4,r2
    a02c:	003fe706 	br	9fcc <__any_on+0x1c>
    a030:	0005883a 	mov	r2,zero
    a034:	f800283a 	ret

0000a038 <_Balloc>:
    a038:	20c01317 	ldw	r3,76(r4)
    a03c:	defffb04 	addi	sp,sp,-20
    a040:	dcc00315 	stw	r19,12(sp)
    a044:	dc800215 	stw	r18,8(sp)
    a048:	dfc00415 	stw	ra,16(sp)
    a04c:	2825883a 	mov	r18,r5
    a050:	dc400115 	stw	r17,4(sp)
    a054:	dc000015 	stw	r16,0(sp)
    a058:	2027883a 	mov	r19,r4
    a05c:	01800404 	movi	r6,16
    a060:	01400104 	movi	r5,4
    a064:	18001726 	beq	r3,zero,a0c4 <_Balloc+0x8c>
    a068:	01400044 	movi	r5,1
    a06c:	9485883a 	add	r2,r18,r18
    a070:	2ca2983a 	sll	r17,r5,r18
    a074:	1085883a 	add	r2,r2,r2
    a078:	10c7883a 	add	r3,r2,r3
    a07c:	1c000017 	ldw	r16,0(r3)
    a080:	8c4d883a 	add	r6,r17,r17
    a084:	318d883a 	add	r6,r6,r6
    a088:	9809883a 	mov	r4,r19
    a08c:	31800504 	addi	r6,r6,20
    a090:	80001226 	beq	r16,zero,a0dc <_Balloc+0xa4>
    a094:	80800017 	ldw	r2,0(r16)
    a098:	18800015 	stw	r2,0(r3)
    a09c:	80000415 	stw	zero,16(r16)
    a0a0:	80000315 	stw	zero,12(r16)
    a0a4:	8005883a 	mov	r2,r16
    a0a8:	dfc00417 	ldw	ra,16(sp)
    a0ac:	dcc00317 	ldw	r19,12(sp)
    a0b0:	dc800217 	ldw	r18,8(sp)
    a0b4:	dc400117 	ldw	r17,4(sp)
    a0b8:	dc000017 	ldw	r16,0(sp)
    a0bc:	dec00504 	addi	sp,sp,20
    a0c0:	f800283a 	ret
    a0c4:	000b4000 	call	b400 <_calloc_r>
    a0c8:	1007883a 	mov	r3,r2
    a0cc:	0021883a 	mov	r16,zero
    a0d0:	98801315 	stw	r2,76(r19)
    a0d4:	103fe41e 	bne	r2,zero,a068 <_Balloc+0x30>
    a0d8:	003ff206 	br	a0a4 <_Balloc+0x6c>
    a0dc:	000b4000 	call	b400 <_calloc_r>
    a0e0:	103ff026 	beq	r2,zero,a0a4 <_Balloc+0x6c>
    a0e4:	1021883a 	mov	r16,r2
    a0e8:	14800115 	stw	r18,4(r2)
    a0ec:	14400215 	stw	r17,8(r2)
    a0f0:	003fea06 	br	a09c <_Balloc+0x64>

0000a0f4 <__d2b>:
    a0f4:	defff504 	addi	sp,sp,-44
    a0f8:	dcc00515 	stw	r19,20(sp)
    a0fc:	04c00044 	movi	r19,1
    a100:	dc000215 	stw	r16,8(sp)
    a104:	2821883a 	mov	r16,r5
    a108:	980b883a 	mov	r5,r19
    a10c:	ddc00915 	stw	r23,36(sp)
    a110:	dd800815 	stw	r22,32(sp)
    a114:	dd400715 	stw	r21,28(sp)
    a118:	dd000615 	stw	r20,24(sp)
    a11c:	dc800415 	stw	r18,16(sp)
    a120:	dc400315 	stw	r17,12(sp)
    a124:	dfc00a15 	stw	ra,40(sp)
    a128:	3023883a 	mov	r17,r6
    a12c:	382d883a 	mov	r22,r7
    a130:	ddc00b17 	ldw	r23,44(sp)
    a134:	000a0380 	call	a038 <_Balloc>
    a138:	1025883a 	mov	r18,r2
    a13c:	00a00034 	movhi	r2,32768
    a140:	10bfffc4 	addi	r2,r2,-1
    a144:	8888703a 	and	r4,r17,r2
    a148:	202ad53a 	srli	r21,r4,20
    a14c:	00800434 	movhi	r2,16
    a150:	10bfffc4 	addi	r2,r2,-1
    a154:	8886703a 	and	r3,r17,r2
    a158:	a829003a 	cmpeq	r20,r21,zero
    a15c:	800b883a 	mov	r5,r16
    a160:	d8c00115 	stw	r3,4(sp)
    a164:	94000504 	addi	r16,r18,20
    a168:	a000021e 	bne	r20,zero,a174 <__d2b+0x80>
    a16c:	18c00434 	orhi	r3,r3,16
    a170:	d8c00115 	stw	r3,4(sp)
    a174:	28002726 	beq	r5,zero,a214 <__d2b+0x120>
    a178:	d809883a 	mov	r4,sp
    a17c:	d9400015 	stw	r5,0(sp)
    a180:	0009b500 	call	9b50 <__lo0bits>
    a184:	100d883a 	mov	r6,r2
    a188:	10003526 	beq	r2,zero,a260 <__d2b+0x16c>
    a18c:	d8c00117 	ldw	r3,4(sp)
    a190:	00800804 	movi	r2,32
    a194:	1185c83a 	sub	r2,r2,r6
    a198:	d9000017 	ldw	r4,0(sp)
    a19c:	1886983a 	sll	r3,r3,r2
    a1a0:	1906b03a 	or	r3,r3,r4
    a1a4:	90c00515 	stw	r3,20(r18)
    a1a8:	d8c00117 	ldw	r3,4(sp)
    a1ac:	1986d83a 	srl	r3,r3,r6
    a1b0:	d8c00115 	stw	r3,4(sp)
    a1b4:	180b003a 	cmpeq	r5,r3,zero
    a1b8:	00800084 	movi	r2,2
    a1bc:	114bc83a 	sub	r5,r2,r5
    a1c0:	80c00115 	stw	r3,4(r16)
    a1c4:	91400415 	stw	r5,16(r18)
    a1c8:	a0001a1e 	bne	r20,zero,a234 <__d2b+0x140>
    a1cc:	3545883a 	add	r2,r6,r21
    a1d0:	10bef344 	addi	r2,r2,-1075
    a1d4:	00c00d44 	movi	r3,53
    a1d8:	b0800015 	stw	r2,0(r22)
    a1dc:	1987c83a 	sub	r3,r3,r6
    a1e0:	b8c00015 	stw	r3,0(r23)
    a1e4:	9005883a 	mov	r2,r18
    a1e8:	dfc00a17 	ldw	ra,40(sp)
    a1ec:	ddc00917 	ldw	r23,36(sp)
    a1f0:	dd800817 	ldw	r22,32(sp)
    a1f4:	dd400717 	ldw	r21,28(sp)
    a1f8:	dd000617 	ldw	r20,24(sp)
    a1fc:	dcc00517 	ldw	r19,20(sp)
    a200:	dc800417 	ldw	r18,16(sp)
    a204:	dc400317 	ldw	r17,12(sp)
    a208:	dc000217 	ldw	r16,8(sp)
    a20c:	dec00b04 	addi	sp,sp,44
    a210:	f800283a 	ret
    a214:	d9000104 	addi	r4,sp,4
    a218:	0009b500 	call	9b50 <__lo0bits>
    a21c:	11800804 	addi	r6,r2,32
    a220:	d8800117 	ldw	r2,4(sp)
    a224:	94c00415 	stw	r19,16(r18)
    a228:	980b883a 	mov	r5,r19
    a22c:	90800515 	stw	r2,20(r18)
    a230:	a03fe626 	beq	r20,zero,a1cc <__d2b+0xd8>
    a234:	2945883a 	add	r2,r5,r5
    a238:	1085883a 	add	r2,r2,r2
    a23c:	1405883a 	add	r2,r2,r16
    a240:	113fff17 	ldw	r4,-4(r2)
    a244:	30fef384 	addi	r3,r6,-1074
    a248:	2820917a 	slli	r16,r5,5
    a24c:	b0c00015 	stw	r3,0(r22)
    a250:	0009ae00 	call	9ae0 <__hi0bits>
    a254:	80a1c83a 	sub	r16,r16,r2
    a258:	bc000015 	stw	r16,0(r23)
    a25c:	003fe106 	br	a1e4 <__d2b+0xf0>
    a260:	d8800017 	ldw	r2,0(sp)
    a264:	90800515 	stw	r2,20(r18)
    a268:	d8c00117 	ldw	r3,4(sp)
    a26c:	003fd106 	br	a1b4 <__d2b+0xc0>

0000a270 <__mdiff>:
    a270:	defffb04 	addi	sp,sp,-20
    a274:	dc000015 	stw	r16,0(sp)
    a278:	2821883a 	mov	r16,r5
    a27c:	dc800215 	stw	r18,8(sp)
    a280:	300b883a 	mov	r5,r6
    a284:	2025883a 	mov	r18,r4
    a288:	8009883a 	mov	r4,r16
    a28c:	dc400115 	stw	r17,4(sp)
    a290:	dfc00415 	stw	ra,16(sp)
    a294:	dcc00315 	stw	r19,12(sp)
    a298:	3023883a 	mov	r17,r6
    a29c:	0009c140 	call	9c14 <__mcmp>
    a2a0:	10004226 	beq	r2,zero,a3ac <__mdiff+0x13c>
    a2a4:	10005016 	blt	r2,zero,a3e8 <__mdiff+0x178>
    a2a8:	0027883a 	mov	r19,zero
    a2ac:	81400117 	ldw	r5,4(r16)
    a2b0:	9009883a 	mov	r4,r18
    a2b4:	000a0380 	call	a038 <_Balloc>
    a2b8:	1019883a 	mov	r12,r2
    a2bc:	82800417 	ldw	r10,16(r16)
    a2c0:	88800417 	ldw	r2,16(r17)
    a2c4:	81800504 	addi	r6,r16,20
    a2c8:	5287883a 	add	r3,r10,r10
    a2cc:	1085883a 	add	r2,r2,r2
    a2d0:	18c7883a 	add	r3,r3,r3
    a2d4:	1085883a 	add	r2,r2,r2
    a2d8:	8a000504 	addi	r8,r17,20
    a2dc:	64c00315 	stw	r19,12(r12)
    a2e0:	30db883a 	add	r13,r6,r3
    a2e4:	4097883a 	add	r11,r8,r2
    a2e8:	61c00504 	addi	r7,r12,20
    a2ec:	0013883a 	mov	r9,zero
    a2f0:	31000017 	ldw	r4,0(r6)
    a2f4:	41400017 	ldw	r5,0(r8)
    a2f8:	42000104 	addi	r8,r8,4
    a2fc:	20bfffcc 	andi	r2,r4,65535
    a300:	28ffffcc 	andi	r3,r5,65535
    a304:	10c5c83a 	sub	r2,r2,r3
    a308:	1245883a 	add	r2,r2,r9
    a30c:	2008d43a 	srli	r4,r4,16
    a310:	280ad43a 	srli	r5,r5,16
    a314:	1007d43a 	srai	r3,r2,16
    a318:	3880000d 	sth	r2,0(r7)
    a31c:	2149c83a 	sub	r4,r4,r5
    a320:	20c9883a 	add	r4,r4,r3
    a324:	3900008d 	sth	r4,2(r7)
    a328:	31800104 	addi	r6,r6,4
    a32c:	39c00104 	addi	r7,r7,4
    a330:	2013d43a 	srai	r9,r4,16
    a334:	42ffee36 	bltu	r8,r11,a2f0 <__mdiff+0x80>
    a338:	33400c2e 	bgeu	r6,r13,a36c <__mdiff+0xfc>
    a33c:	30800017 	ldw	r2,0(r6)
    a340:	31800104 	addi	r6,r6,4
    a344:	10ffffcc 	andi	r3,r2,65535
    a348:	1a47883a 	add	r3,r3,r9
    a34c:	1004d43a 	srli	r2,r2,16
    a350:	1809d43a 	srai	r4,r3,16
    a354:	38c0000d 	sth	r3,0(r7)
    a358:	1105883a 	add	r2,r2,r4
    a35c:	3880008d 	sth	r2,2(r7)
    a360:	1013d43a 	srai	r9,r2,16
    a364:	39c00104 	addi	r7,r7,4
    a368:	337ff436 	bltu	r6,r13,a33c <__mdiff+0xcc>
    a36c:	38bfff17 	ldw	r2,-4(r7)
    a370:	38ffff04 	addi	r3,r7,-4
    a374:	1000041e 	bne	r2,zero,a388 <__mdiff+0x118>
    a378:	18ffff04 	addi	r3,r3,-4
    a37c:	18800017 	ldw	r2,0(r3)
    a380:	52bfffc4 	addi	r10,r10,-1
    a384:	103ffc26 	beq	r2,zero,a378 <__mdiff+0x108>
    a388:	6005883a 	mov	r2,r12
    a38c:	62800415 	stw	r10,16(r12)
    a390:	dfc00417 	ldw	ra,16(sp)
    a394:	dcc00317 	ldw	r19,12(sp)
    a398:	dc800217 	ldw	r18,8(sp)
    a39c:	dc400117 	ldw	r17,4(sp)
    a3a0:	dc000017 	ldw	r16,0(sp)
    a3a4:	dec00504 	addi	sp,sp,20
    a3a8:	f800283a 	ret
    a3ac:	9009883a 	mov	r4,r18
    a3b0:	000b883a 	mov	r5,zero
    a3b4:	000a0380 	call	a038 <_Balloc>
    a3b8:	1019883a 	mov	r12,r2
    a3bc:	00800044 	movi	r2,1
    a3c0:	60800415 	stw	r2,16(r12)
    a3c4:	6005883a 	mov	r2,r12
    a3c8:	60000515 	stw	zero,20(r12)
    a3cc:	dfc00417 	ldw	ra,16(sp)
    a3d0:	dcc00317 	ldw	r19,12(sp)
    a3d4:	dc800217 	ldw	r18,8(sp)
    a3d8:	dc400117 	ldw	r17,4(sp)
    a3dc:	dc000017 	ldw	r16,0(sp)
    a3e0:	dec00504 	addi	sp,sp,20
    a3e4:	f800283a 	ret
    a3e8:	880d883a 	mov	r6,r17
    a3ec:	04c00044 	movi	r19,1
    a3f0:	8023883a 	mov	r17,r16
    a3f4:	3021883a 	mov	r16,r6
    a3f8:	003fac06 	br	a2ac <__mdiff+0x3c>

0000a3fc <__lshift>:
    a3fc:	defff904 	addi	sp,sp,-28
    a400:	28800417 	ldw	r2,16(r5)
    a404:	dc000015 	stw	r16,0(sp)
    a408:	3021d17a 	srai	r16,r6,5
    a40c:	28c00217 	ldw	r3,8(r5)
    a410:	10800044 	addi	r2,r2,1
    a414:	dc400115 	stw	r17,4(sp)
    a418:	80a3883a 	add	r17,r16,r2
    a41c:	dd400515 	stw	r21,20(sp)
    a420:	dd000415 	stw	r20,16(sp)
    a424:	dc800215 	stw	r18,8(sp)
    a428:	dfc00615 	stw	ra,24(sp)
    a42c:	2825883a 	mov	r18,r5
    a430:	dcc00315 	stw	r19,12(sp)
    a434:	3029883a 	mov	r20,r6
    a438:	202b883a 	mov	r21,r4
    a43c:	29400117 	ldw	r5,4(r5)
    a440:	1c40030e 	bge	r3,r17,a450 <__lshift+0x54>
    a444:	18c7883a 	add	r3,r3,r3
    a448:	29400044 	addi	r5,r5,1
    a44c:	1c7ffd16 	blt	r3,r17,a444 <__lshift+0x48>
    a450:	a809883a 	mov	r4,r21
    a454:	000a0380 	call	a038 <_Balloc>
    a458:	1027883a 	mov	r19,r2
    a45c:	11400504 	addi	r5,r2,20
    a460:	0400090e 	bge	zero,r16,a488 <__lshift+0x8c>
    a464:	2805883a 	mov	r2,r5
    a468:	0007883a 	mov	r3,zero
    a46c:	18c00044 	addi	r3,r3,1
    a470:	10000015 	stw	zero,0(r2)
    a474:	10800104 	addi	r2,r2,4
    a478:	80fffc1e 	bne	r16,r3,a46c <__lshift+0x70>
    a47c:	8405883a 	add	r2,r16,r16
    a480:	1085883a 	add	r2,r2,r2
    a484:	288b883a 	add	r5,r5,r2
    a488:	90800417 	ldw	r2,16(r18)
    a48c:	91000504 	addi	r4,r18,20
    a490:	a18007cc 	andi	r6,r20,31
    a494:	1085883a 	add	r2,r2,r2
    a498:	1085883a 	add	r2,r2,r2
    a49c:	208f883a 	add	r7,r4,r2
    a4a0:	30001e26 	beq	r6,zero,a51c <__lshift+0x120>
    a4a4:	00800804 	movi	r2,32
    a4a8:	1191c83a 	sub	r8,r2,r6
    a4ac:	0007883a 	mov	r3,zero
    a4b0:	20800017 	ldw	r2,0(r4)
    a4b4:	1184983a 	sll	r2,r2,r6
    a4b8:	1884b03a 	or	r2,r3,r2
    a4bc:	28800015 	stw	r2,0(r5)
    a4c0:	20c00017 	ldw	r3,0(r4)
    a4c4:	21000104 	addi	r4,r4,4
    a4c8:	29400104 	addi	r5,r5,4
    a4cc:	1a06d83a 	srl	r3,r3,r8
    a4d0:	21fff736 	bltu	r4,r7,a4b0 <__lshift+0xb4>
    a4d4:	28c00015 	stw	r3,0(r5)
    a4d8:	18000126 	beq	r3,zero,a4e0 <__lshift+0xe4>
    a4dc:	8c400044 	addi	r17,r17,1
    a4e0:	88bfffc4 	addi	r2,r17,-1
    a4e4:	98800415 	stw	r2,16(r19)
    a4e8:	a809883a 	mov	r4,r21
    a4ec:	900b883a 	mov	r5,r18
    a4f0:	0009ab80 	call	9ab8 <_Bfree>
    a4f4:	9805883a 	mov	r2,r19
    a4f8:	dfc00617 	ldw	ra,24(sp)
    a4fc:	dd400517 	ldw	r21,20(sp)
    a500:	dd000417 	ldw	r20,16(sp)
    a504:	dcc00317 	ldw	r19,12(sp)
    a508:	dc800217 	ldw	r18,8(sp)
    a50c:	dc400117 	ldw	r17,4(sp)
    a510:	dc000017 	ldw	r16,0(sp)
    a514:	dec00704 	addi	sp,sp,28
    a518:	f800283a 	ret
    a51c:	20800017 	ldw	r2,0(r4)
    a520:	21000104 	addi	r4,r4,4
    a524:	28800015 	stw	r2,0(r5)
    a528:	29400104 	addi	r5,r5,4
    a52c:	21ffec2e 	bgeu	r4,r7,a4e0 <__lshift+0xe4>
    a530:	20800017 	ldw	r2,0(r4)
    a534:	21000104 	addi	r4,r4,4
    a538:	28800015 	stw	r2,0(r5)
    a53c:	29400104 	addi	r5,r5,4
    a540:	21fff636 	bltu	r4,r7,a51c <__lshift+0x120>
    a544:	003fe606 	br	a4e0 <__lshift+0xe4>

0000a548 <__multiply>:
    a548:	defff904 	addi	sp,sp,-28
    a54c:	dcc00315 	stw	r19,12(sp)
    a550:	dc800215 	stw	r18,8(sp)
    a554:	2cc00417 	ldw	r19,16(r5)
    a558:	34800417 	ldw	r18,16(r6)
    a55c:	dd000415 	stw	r20,16(sp)
    a560:	dc400115 	stw	r17,4(sp)
    a564:	dfc00615 	stw	ra,24(sp)
    a568:	dd400515 	stw	r21,20(sp)
    a56c:	dc000015 	stw	r16,0(sp)
    a570:	2823883a 	mov	r17,r5
    a574:	3029883a 	mov	r20,r6
    a578:	9c80040e 	bge	r19,r18,a58c <__multiply+0x44>
    a57c:	9027883a 	mov	r19,r18
    a580:	2c800417 	ldw	r18,16(r5)
    a584:	2829883a 	mov	r20,r5
    a588:	3023883a 	mov	r17,r6
    a58c:	88800217 	ldw	r2,8(r17)
    a590:	9ca1883a 	add	r16,r19,r18
    a594:	89400117 	ldw	r5,4(r17)
    a598:	1400010e 	bge	r2,r16,a5a0 <__multiply+0x58>
    a59c:	29400044 	addi	r5,r5,1
    a5a0:	000a0380 	call	a038 <_Balloc>
    a5a4:	102b883a 	mov	r21,r2
    a5a8:	8405883a 	add	r2,r16,r16
    a5ac:	1085883a 	add	r2,r2,r2
    a5b0:	a9000504 	addi	r4,r21,20
    a5b4:	209d883a 	add	r14,r4,r2
    a5b8:	2380042e 	bgeu	r4,r14,a5cc <__multiply+0x84>
    a5bc:	2005883a 	mov	r2,r4
    a5c0:	10000015 	stw	zero,0(r2)
    a5c4:	10800104 	addi	r2,r2,4
    a5c8:	13bffd36 	bltu	r2,r14,a5c0 <__multiply+0x78>
    a5cc:	9485883a 	add	r2,r18,r18
    a5d0:	9cc7883a 	add	r3,r19,r19
    a5d4:	a1800504 	addi	r6,r20,20
    a5d8:	1085883a 	add	r2,r2,r2
    a5dc:	8b400504 	addi	r13,r17,20
    a5e0:	18c7883a 	add	r3,r3,r3
    a5e4:	309f883a 	add	r15,r6,r2
    a5e8:	68d7883a 	add	r11,r13,r3
    a5ec:	33c03b2e 	bgeu	r6,r15,a6dc <__multiply+0x194>
    a5f0:	2019883a 	mov	r12,r4
    a5f4:	30800017 	ldw	r2,0(r6)
    a5f8:	127fffcc 	andi	r9,r2,65535
    a5fc:	48001826 	beq	r9,zero,a660 <__multiply+0x118>
    a600:	6811883a 	mov	r8,r13
    a604:	600f883a 	mov	r7,r12
    a608:	0015883a 	mov	r10,zero
    a60c:	40c00017 	ldw	r3,0(r8)
    a610:	39400017 	ldw	r5,0(r7)
    a614:	42000104 	addi	r8,r8,4
    a618:	193fffcc 	andi	r4,r3,65535
    a61c:	4909383a 	mul	r4,r9,r4
    a620:	1806d43a 	srli	r3,r3,16
    a624:	28bfffcc 	andi	r2,r5,65535
    a628:	5085883a 	add	r2,r10,r2
    a62c:	2089883a 	add	r4,r4,r2
    a630:	48c7383a 	mul	r3,r9,r3
    a634:	280ad43a 	srli	r5,r5,16
    a638:	2004d43a 	srli	r2,r4,16
    a63c:	3900000d 	sth	r4,0(r7)
    a640:	1947883a 	add	r3,r3,r5
    a644:	10c5883a 	add	r2,r2,r3
    a648:	3880008d 	sth	r2,2(r7)
    a64c:	1014d43a 	srli	r10,r2,16
    a650:	39c00104 	addi	r7,r7,4
    a654:	42ffed36 	bltu	r8,r11,a60c <__multiply+0xc4>
    a658:	3a800015 	stw	r10,0(r7)
    a65c:	30800017 	ldw	r2,0(r6)
    a660:	1012d43a 	srli	r9,r2,16
    a664:	48001926 	beq	r9,zero,a6cc <__multiply+0x184>
    a668:	60800017 	ldw	r2,0(r12)
    a66c:	6811883a 	mov	r8,r13
    a670:	600f883a 	mov	r7,r12
    a674:	0015883a 	mov	r10,zero
    a678:	100b883a 	mov	r5,r2
    a67c:	41000017 	ldw	r4,0(r8)
    a680:	2806d43a 	srli	r3,r5,16
    a684:	3880000d 	sth	r2,0(r7)
    a688:	20bfffcc 	andi	r2,r4,65535
    a68c:	4885383a 	mul	r2,r9,r2
    a690:	50c7883a 	add	r3,r10,r3
    a694:	2008d43a 	srli	r4,r4,16
    a698:	10c5883a 	add	r2,r2,r3
    a69c:	3880008d 	sth	r2,2(r7)
    a6a0:	39c00104 	addi	r7,r7,4
    a6a4:	39400017 	ldw	r5,0(r7)
    a6a8:	4909383a 	mul	r4,r9,r4
    a6ac:	1004d43a 	srli	r2,r2,16
    a6b0:	28ffffcc 	andi	r3,r5,65535
    a6b4:	20c9883a 	add	r4,r4,r3
    a6b8:	1105883a 	add	r2,r2,r4
    a6bc:	42000104 	addi	r8,r8,4
    a6c0:	1014d43a 	srli	r10,r2,16
    a6c4:	42ffed36 	bltu	r8,r11,a67c <__multiply+0x134>
    a6c8:	38800015 	stw	r2,0(r7)
    a6cc:	31800104 	addi	r6,r6,4
    a6d0:	33c0022e 	bgeu	r6,r15,a6dc <__multiply+0x194>
    a6d4:	63000104 	addi	r12,r12,4
    a6d8:	003fc606 	br	a5f4 <__multiply+0xac>
    a6dc:	0400090e 	bge	zero,r16,a704 <__multiply+0x1bc>
    a6e0:	70bfff17 	ldw	r2,-4(r14)
    a6e4:	70ffff04 	addi	r3,r14,-4
    a6e8:	10000326 	beq	r2,zero,a6f8 <__multiply+0x1b0>
    a6ec:	00000506 	br	a704 <__multiply+0x1bc>
    a6f0:	18800017 	ldw	r2,0(r3)
    a6f4:	1000031e 	bne	r2,zero,a704 <__multiply+0x1bc>
    a6f8:	843fffc4 	addi	r16,r16,-1
    a6fc:	18ffff04 	addi	r3,r3,-4
    a700:	803ffb1e 	bne	r16,zero,a6f0 <__multiply+0x1a8>
    a704:	a805883a 	mov	r2,r21
    a708:	ac000415 	stw	r16,16(r21)
    a70c:	dfc00617 	ldw	ra,24(sp)
    a710:	dd400517 	ldw	r21,20(sp)
    a714:	dd000417 	ldw	r20,16(sp)
    a718:	dcc00317 	ldw	r19,12(sp)
    a71c:	dc800217 	ldw	r18,8(sp)
    a720:	dc400117 	ldw	r17,4(sp)
    a724:	dc000017 	ldw	r16,0(sp)
    a728:	dec00704 	addi	sp,sp,28
    a72c:	f800283a 	ret

0000a730 <__i2b>:
    a730:	defffd04 	addi	sp,sp,-12
    a734:	dc000015 	stw	r16,0(sp)
    a738:	04000044 	movi	r16,1
    a73c:	dc800115 	stw	r18,4(sp)
    a740:	2825883a 	mov	r18,r5
    a744:	800b883a 	mov	r5,r16
    a748:	dfc00215 	stw	ra,8(sp)
    a74c:	000a0380 	call	a038 <_Balloc>
    a750:	14000415 	stw	r16,16(r2)
    a754:	14800515 	stw	r18,20(r2)
    a758:	dfc00217 	ldw	ra,8(sp)
    a75c:	dc800117 	ldw	r18,4(sp)
    a760:	dc000017 	ldw	r16,0(sp)
    a764:	dec00304 	addi	sp,sp,12
    a768:	f800283a 	ret

0000a76c <__multadd>:
    a76c:	defffa04 	addi	sp,sp,-24
    a770:	dc800215 	stw	r18,8(sp)
    a774:	2c800417 	ldw	r18,16(r5)
    a778:	dd000415 	stw	r20,16(sp)
    a77c:	dcc00315 	stw	r19,12(sp)
    a780:	dc000015 	stw	r16,0(sp)
    a784:	dfc00515 	stw	ra,20(sp)
    a788:	3821883a 	mov	r16,r7
    a78c:	dc400115 	stw	r17,4(sp)
    a790:	2827883a 	mov	r19,r5
    a794:	2029883a 	mov	r20,r4
    a798:	2a000504 	addi	r8,r5,20
    a79c:	000f883a 	mov	r7,zero
    a7a0:	40800017 	ldw	r2,0(r8)
    a7a4:	39c00044 	addi	r7,r7,1
    a7a8:	10ffffcc 	andi	r3,r2,65535
    a7ac:	1987383a 	mul	r3,r3,r6
    a7b0:	1004d43a 	srli	r2,r2,16
    a7b4:	1c07883a 	add	r3,r3,r16
    a7b8:	180ad43a 	srli	r5,r3,16
    a7bc:	1185383a 	mul	r2,r2,r6
    a7c0:	18ffffcc 	andi	r3,r3,65535
    a7c4:	1145883a 	add	r2,r2,r5
    a7c8:	1008943a 	slli	r4,r2,16
    a7cc:	1020d43a 	srli	r16,r2,16
    a7d0:	20c9883a 	add	r4,r4,r3
    a7d4:	41000015 	stw	r4,0(r8)
    a7d8:	42000104 	addi	r8,r8,4
    a7dc:	3cbff016 	blt	r7,r18,a7a0 <__multadd+0x34>
    a7e0:	80000826 	beq	r16,zero,a804 <__multadd+0x98>
    a7e4:	98800217 	ldw	r2,8(r19)
    a7e8:	90800f0e 	bge	r18,r2,a828 <__multadd+0xbc>
    a7ec:	9485883a 	add	r2,r18,r18
    a7f0:	1085883a 	add	r2,r2,r2
    a7f4:	14c5883a 	add	r2,r2,r19
    a7f8:	90c00044 	addi	r3,r18,1
    a7fc:	14000515 	stw	r16,20(r2)
    a800:	98c00415 	stw	r3,16(r19)
    a804:	9805883a 	mov	r2,r19
    a808:	dfc00517 	ldw	ra,20(sp)
    a80c:	dd000417 	ldw	r20,16(sp)
    a810:	dcc00317 	ldw	r19,12(sp)
    a814:	dc800217 	ldw	r18,8(sp)
    a818:	dc400117 	ldw	r17,4(sp)
    a81c:	dc000017 	ldw	r16,0(sp)
    a820:	dec00604 	addi	sp,sp,24
    a824:	f800283a 	ret
    a828:	99400117 	ldw	r5,4(r19)
    a82c:	a009883a 	mov	r4,r20
    a830:	29400044 	addi	r5,r5,1
    a834:	000a0380 	call	a038 <_Balloc>
    a838:	99800417 	ldw	r6,16(r19)
    a83c:	99400304 	addi	r5,r19,12
    a840:	11000304 	addi	r4,r2,12
    a844:	318d883a 	add	r6,r6,r6
    a848:	318d883a 	add	r6,r6,r6
    a84c:	31800204 	addi	r6,r6,8
    a850:	1023883a 	mov	r17,r2
    a854:	00098a00 	call	98a0 <memcpy>
    a858:	980b883a 	mov	r5,r19
    a85c:	a009883a 	mov	r4,r20
    a860:	0009ab80 	call	9ab8 <_Bfree>
    a864:	8827883a 	mov	r19,r17
    a868:	003fe006 	br	a7ec <__multadd+0x80>

0000a86c <__pow5mult>:
    a86c:	defffa04 	addi	sp,sp,-24
    a870:	308000cc 	andi	r2,r6,3
    a874:	dd000415 	stw	r20,16(sp)
    a878:	dcc00315 	stw	r19,12(sp)
    a87c:	dc000015 	stw	r16,0(sp)
    a880:	dfc00515 	stw	ra,20(sp)
    a884:	dc800215 	stw	r18,8(sp)
    a888:	dc400115 	stw	r17,4(sp)
    a88c:	3021883a 	mov	r16,r6
    a890:	2027883a 	mov	r19,r4
    a894:	2829883a 	mov	r20,r5
    a898:	10002b1e 	bne	r2,zero,a948 <__pow5mult+0xdc>
    a89c:	8025d0ba 	srai	r18,r16,2
    a8a0:	90001b26 	beq	r18,zero,a910 <__pow5mult+0xa4>
    a8a4:	9c001217 	ldw	r16,72(r19)
    a8a8:	8000081e 	bne	r16,zero,a8cc <__pow5mult+0x60>
    a8ac:	00003006 	br	a970 <__pow5mult+0x104>
    a8b0:	800b883a 	mov	r5,r16
    a8b4:	800d883a 	mov	r6,r16
    a8b8:	9809883a 	mov	r4,r19
    a8bc:	90001426 	beq	r18,zero,a910 <__pow5mult+0xa4>
    a8c0:	80800017 	ldw	r2,0(r16)
    a8c4:	10001b26 	beq	r2,zero,a934 <__pow5mult+0xc8>
    a8c8:	1021883a 	mov	r16,r2
    a8cc:	9080004c 	andi	r2,r18,1
    a8d0:	1005003a 	cmpeq	r2,r2,zero
    a8d4:	9025d07a 	srai	r18,r18,1
    a8d8:	800d883a 	mov	r6,r16
    a8dc:	9809883a 	mov	r4,r19
    a8e0:	a00b883a 	mov	r5,r20
    a8e4:	103ff21e 	bne	r2,zero,a8b0 <__pow5mult+0x44>
    a8e8:	000a5480 	call	a548 <__multiply>
    a8ec:	a00b883a 	mov	r5,r20
    a8f0:	9809883a 	mov	r4,r19
    a8f4:	1023883a 	mov	r17,r2
    a8f8:	0009ab80 	call	9ab8 <_Bfree>
    a8fc:	8829883a 	mov	r20,r17
    a900:	800b883a 	mov	r5,r16
    a904:	800d883a 	mov	r6,r16
    a908:	9809883a 	mov	r4,r19
    a90c:	903fec1e 	bne	r18,zero,a8c0 <__pow5mult+0x54>
    a910:	a005883a 	mov	r2,r20
    a914:	dfc00517 	ldw	ra,20(sp)
    a918:	dd000417 	ldw	r20,16(sp)
    a91c:	dcc00317 	ldw	r19,12(sp)
    a920:	dc800217 	ldw	r18,8(sp)
    a924:	dc400117 	ldw	r17,4(sp)
    a928:	dc000017 	ldw	r16,0(sp)
    a92c:	dec00604 	addi	sp,sp,24
    a930:	f800283a 	ret
    a934:	000a5480 	call	a548 <__multiply>
    a938:	80800015 	stw	r2,0(r16)
    a93c:	1021883a 	mov	r16,r2
    a940:	10000015 	stw	zero,0(r2)
    a944:	003fe106 	br	a8cc <__pow5mult+0x60>
    a948:	1085883a 	add	r2,r2,r2
    a94c:	00c00074 	movhi	r3,1
    a950:	18c81f04 	addi	r3,r3,8316
    a954:	1085883a 	add	r2,r2,r2
    a958:	10c5883a 	add	r2,r2,r3
    a95c:	11bfff17 	ldw	r6,-4(r2)
    a960:	000f883a 	mov	r7,zero
    a964:	000a76c0 	call	a76c <__multadd>
    a968:	1029883a 	mov	r20,r2
    a96c:	003fcb06 	br	a89c <__pow5mult+0x30>
    a970:	9809883a 	mov	r4,r19
    a974:	01409c44 	movi	r5,625
    a978:	000a7300 	call	a730 <__i2b>
    a97c:	98801215 	stw	r2,72(r19)
    a980:	1021883a 	mov	r16,r2
    a984:	10000015 	stw	zero,0(r2)
    a988:	003fd006 	br	a8cc <__pow5mult+0x60>

0000a98c <__s2b>:
    a98c:	defff904 	addi	sp,sp,-28
    a990:	dcc00315 	stw	r19,12(sp)
    a994:	dc800215 	stw	r18,8(sp)
    a998:	2827883a 	mov	r19,r5
    a99c:	2025883a 	mov	r18,r4
    a9a0:	01400244 	movi	r5,9
    a9a4:	39000204 	addi	r4,r7,8
    a9a8:	dd000415 	stw	r20,16(sp)
    a9ac:	dc400115 	stw	r17,4(sp)
    a9b0:	dfc00615 	stw	ra,24(sp)
    a9b4:	dd400515 	stw	r21,20(sp)
    a9b8:	dc000015 	stw	r16,0(sp)
    a9bc:	3829883a 	mov	r20,r7
    a9c0:	3023883a 	mov	r17,r6
    a9c4:	00044380 	call	4438 <__divsi3>
    a9c8:	00c00044 	movi	r3,1
    a9cc:	1880350e 	bge	r3,r2,aaa4 <__s2b+0x118>
    a9d0:	000b883a 	mov	r5,zero
    a9d4:	18c7883a 	add	r3,r3,r3
    a9d8:	29400044 	addi	r5,r5,1
    a9dc:	18bffd16 	blt	r3,r2,a9d4 <__s2b+0x48>
    a9e0:	9009883a 	mov	r4,r18
    a9e4:	000a0380 	call	a038 <_Balloc>
    a9e8:	1011883a 	mov	r8,r2
    a9ec:	d8800717 	ldw	r2,28(sp)
    a9f0:	00c00044 	movi	r3,1
    a9f4:	01800244 	movi	r6,9
    a9f8:	40800515 	stw	r2,20(r8)
    a9fc:	40c00415 	stw	r3,16(r8)
    aa00:	3440260e 	bge	r6,r17,aa9c <__s2b+0x110>
    aa04:	3021883a 	mov	r16,r6
    aa08:	99ab883a 	add	r21,r19,r6
    aa0c:	9c05883a 	add	r2,r19,r16
    aa10:	11c00007 	ldb	r7,0(r2)
    aa14:	400b883a 	mov	r5,r8
    aa18:	9009883a 	mov	r4,r18
    aa1c:	39fff404 	addi	r7,r7,-48
    aa20:	01800284 	movi	r6,10
    aa24:	000a76c0 	call	a76c <__multadd>
    aa28:	84000044 	addi	r16,r16,1
    aa2c:	1011883a 	mov	r8,r2
    aa30:	8c3ff61e 	bne	r17,r16,aa0c <__s2b+0x80>
    aa34:	ac45883a 	add	r2,r21,r17
    aa38:	117ffe04 	addi	r5,r2,-8
    aa3c:	880d883a 	mov	r6,r17
    aa40:	35000c0e 	bge	r6,r20,aa74 <__s2b+0xe8>
    aa44:	a185c83a 	sub	r2,r20,r6
    aa48:	2821883a 	mov	r16,r5
    aa4c:	28a3883a 	add	r17,r5,r2
    aa50:	81c00007 	ldb	r7,0(r16)
    aa54:	400b883a 	mov	r5,r8
    aa58:	9009883a 	mov	r4,r18
    aa5c:	39fff404 	addi	r7,r7,-48
    aa60:	01800284 	movi	r6,10
    aa64:	000a76c0 	call	a76c <__multadd>
    aa68:	84000044 	addi	r16,r16,1
    aa6c:	1011883a 	mov	r8,r2
    aa70:	847ff71e 	bne	r16,r17,aa50 <__s2b+0xc4>
    aa74:	4005883a 	mov	r2,r8
    aa78:	dfc00617 	ldw	ra,24(sp)
    aa7c:	dd400517 	ldw	r21,20(sp)
    aa80:	dd000417 	ldw	r20,16(sp)
    aa84:	dcc00317 	ldw	r19,12(sp)
    aa88:	dc800217 	ldw	r18,8(sp)
    aa8c:	dc400117 	ldw	r17,4(sp)
    aa90:	dc000017 	ldw	r16,0(sp)
    aa94:	dec00704 	addi	sp,sp,28
    aa98:	f800283a 	ret
    aa9c:	99400284 	addi	r5,r19,10
    aaa0:	003fe706 	br	aa40 <__s2b+0xb4>
    aaa4:	000b883a 	mov	r5,zero
    aaa8:	003fcd06 	br	a9e0 <__s2b+0x54>

0000aaac <_realloc_r>:
    aaac:	defff404 	addi	sp,sp,-48
    aab0:	dd800815 	stw	r22,32(sp)
    aab4:	dc800415 	stw	r18,16(sp)
    aab8:	dc400315 	stw	r17,12(sp)
    aabc:	dfc00b15 	stw	ra,44(sp)
    aac0:	df000a15 	stw	fp,40(sp)
    aac4:	ddc00915 	stw	r23,36(sp)
    aac8:	dd400715 	stw	r21,28(sp)
    aacc:	dd000615 	stw	r20,24(sp)
    aad0:	dcc00515 	stw	r19,20(sp)
    aad4:	dc000215 	stw	r16,8(sp)
    aad8:	2825883a 	mov	r18,r5
    aadc:	3023883a 	mov	r17,r6
    aae0:	202d883a 	mov	r22,r4
    aae4:	2800c926 	beq	r5,zero,ae0c <_realloc_r+0x360>
    aae8:	000e1840 	call	e184 <__malloc_lock>
    aaec:	943ffe04 	addi	r16,r18,-8
    aaf0:	88c002c4 	addi	r3,r17,11
    aaf4:	00800584 	movi	r2,22
    aaf8:	82000117 	ldw	r8,4(r16)
    aafc:	10c01b2e 	bgeu	r2,r3,ab6c <_realloc_r+0xc0>
    ab00:	00bffe04 	movi	r2,-8
    ab04:	188e703a 	and	r7,r3,r2
    ab08:	3839883a 	mov	fp,r7
    ab0c:	38001a16 	blt	r7,zero,ab78 <_realloc_r+0xcc>
    ab10:	e4401936 	bltu	fp,r17,ab78 <_realloc_r+0xcc>
    ab14:	013fff04 	movi	r4,-4
    ab18:	4126703a 	and	r19,r8,r4
    ab1c:	99c02616 	blt	r19,r7,abb8 <_realloc_r+0x10c>
    ab20:	802b883a 	mov	r21,r16
    ab24:	9829883a 	mov	r20,r19
    ab28:	84000204 	addi	r16,r16,8
    ab2c:	a80f883a 	mov	r7,r21
    ab30:	a70dc83a 	sub	r6,r20,fp
    ab34:	008003c4 	movi	r2,15
    ab38:	1180c136 	bltu	r2,r6,ae40 <_realloc_r+0x394>
    ab3c:	38800117 	ldw	r2,4(r7)
    ab40:	a549883a 	add	r4,r20,r21
    ab44:	1080004c 	andi	r2,r2,1
    ab48:	a084b03a 	or	r2,r20,r2
    ab4c:	38800115 	stw	r2,4(r7)
    ab50:	20c00117 	ldw	r3,4(r4)
    ab54:	18c00054 	ori	r3,r3,1
    ab58:	20c00115 	stw	r3,4(r4)
    ab5c:	b009883a 	mov	r4,r22
    ab60:	000e1a40 	call	e1a4 <__malloc_unlock>
    ab64:	8023883a 	mov	r17,r16
    ab68:	00000606 	br	ab84 <_realloc_r+0xd8>
    ab6c:	01c00404 	movi	r7,16
    ab70:	3839883a 	mov	fp,r7
    ab74:	e47fe72e 	bgeu	fp,r17,ab14 <_realloc_r+0x68>
    ab78:	00800304 	movi	r2,12
    ab7c:	0023883a 	mov	r17,zero
    ab80:	b0800015 	stw	r2,0(r22)
    ab84:	8805883a 	mov	r2,r17
    ab88:	dfc00b17 	ldw	ra,44(sp)
    ab8c:	df000a17 	ldw	fp,40(sp)
    ab90:	ddc00917 	ldw	r23,36(sp)
    ab94:	dd800817 	ldw	r22,32(sp)
    ab98:	dd400717 	ldw	r21,28(sp)
    ab9c:	dd000617 	ldw	r20,24(sp)
    aba0:	dcc00517 	ldw	r19,20(sp)
    aba4:	dc800417 	ldw	r18,16(sp)
    aba8:	dc400317 	ldw	r17,12(sp)
    abac:	dc000217 	ldw	r16,8(sp)
    abb0:	dec00c04 	addi	sp,sp,48
    abb4:	f800283a 	ret
    abb8:	00800074 	movhi	r2,1
    abbc:	108a1d04 	addi	r2,r2,10356
    abc0:	12400217 	ldw	r9,8(r2)
    abc4:	84cd883a 	add	r6,r16,r19
    abc8:	802b883a 	mov	r21,r16
    abcc:	3240b926 	beq	r6,r9,aeb4 <_realloc_r+0x408>
    abd0:	31400117 	ldw	r5,4(r6)
    abd4:	00bfff84 	movi	r2,-2
    abd8:	2884703a 	and	r2,r5,r2
    abdc:	1185883a 	add	r2,r2,r6
    abe0:	10c00117 	ldw	r3,4(r2)
    abe4:	18c0004c 	andi	r3,r3,1
    abe8:	1807003a 	cmpeq	r3,r3,zero
    abec:	1800a326 	beq	r3,zero,ae7c <_realloc_r+0x3d0>
    abf0:	2908703a 	and	r4,r5,r4
    abf4:	9929883a 	add	r20,r19,r4
    abf8:	a1c0a30e 	bge	r20,r7,ae88 <_realloc_r+0x3dc>
    abfc:	4080004c 	andi	r2,r8,1
    ac00:	1000551e 	bne	r2,zero,ad58 <_realloc_r+0x2ac>
    ac04:	80800017 	ldw	r2,0(r16)
    ac08:	80afc83a 	sub	r23,r16,r2
    ac0c:	b8c00117 	ldw	r3,4(r23)
    ac10:	00bfff04 	movi	r2,-4
    ac14:	1884703a 	and	r2,r3,r2
    ac18:	30002e26 	beq	r6,zero,acd4 <_realloc_r+0x228>
    ac1c:	3240b926 	beq	r6,r9,af04 <_realloc_r+0x458>
    ac20:	98a9883a 	add	r20,r19,r2
    ac24:	2509883a 	add	r4,r4,r20
    ac28:	d9000015 	stw	r4,0(sp)
    ac2c:	21c02a16 	blt	r4,r7,acd8 <_realloc_r+0x22c>
    ac30:	30800317 	ldw	r2,12(r6)
    ac34:	30c00217 	ldw	r3,8(r6)
    ac38:	01400904 	movi	r5,36
    ac3c:	99bfff04 	addi	r6,r19,-4
    ac40:	18800315 	stw	r2,12(r3)
    ac44:	10c00215 	stw	r3,8(r2)
    ac48:	b9000317 	ldw	r4,12(r23)
    ac4c:	b8800217 	ldw	r2,8(r23)
    ac50:	b82b883a 	mov	r21,r23
    ac54:	bc000204 	addi	r16,r23,8
    ac58:	20800215 	stw	r2,8(r4)
    ac5c:	11000315 	stw	r4,12(r2)
    ac60:	2980e436 	bltu	r5,r6,aff4 <_realloc_r+0x548>
    ac64:	008004c4 	movi	r2,19
    ac68:	9009883a 	mov	r4,r18
    ac6c:	8011883a 	mov	r8,r16
    ac70:	11800f2e 	bgeu	r2,r6,acb0 <_realloc_r+0x204>
    ac74:	90800017 	ldw	r2,0(r18)
    ac78:	ba000404 	addi	r8,r23,16
    ac7c:	91000204 	addi	r4,r18,8
    ac80:	b8800215 	stw	r2,8(r23)
    ac84:	90c00117 	ldw	r3,4(r18)
    ac88:	008006c4 	movi	r2,27
    ac8c:	b8c00315 	stw	r3,12(r23)
    ac90:	1180072e 	bgeu	r2,r6,acb0 <_realloc_r+0x204>
    ac94:	90c00217 	ldw	r3,8(r18)
    ac98:	ba000604 	addi	r8,r23,24
    ac9c:	91000404 	addi	r4,r18,16
    aca0:	b8c00415 	stw	r3,16(r23)
    aca4:	90800317 	ldw	r2,12(r18)
    aca8:	b8800515 	stw	r2,20(r23)
    acac:	3140e726 	beq	r6,r5,b04c <_realloc_r+0x5a0>
    acb0:	20800017 	ldw	r2,0(r4)
    acb4:	dd000017 	ldw	r20,0(sp)
    acb8:	b80f883a 	mov	r7,r23
    acbc:	40800015 	stw	r2,0(r8)
    acc0:	20c00117 	ldw	r3,4(r4)
    acc4:	40c00115 	stw	r3,4(r8)
    acc8:	20800217 	ldw	r2,8(r4)
    accc:	40800215 	stw	r2,8(r8)
    acd0:	003f9706 	br	ab30 <_realloc_r+0x84>
    acd4:	98a9883a 	add	r20,r19,r2
    acd8:	a1c01f16 	blt	r20,r7,ad58 <_realloc_r+0x2ac>
    acdc:	b8c00317 	ldw	r3,12(r23)
    ace0:	b8800217 	ldw	r2,8(r23)
    ace4:	99bfff04 	addi	r6,r19,-4
    ace8:	01400904 	movi	r5,36
    acec:	b82b883a 	mov	r21,r23
    acf0:	18800215 	stw	r2,8(r3)
    acf4:	10c00315 	stw	r3,12(r2)
    acf8:	bc000204 	addi	r16,r23,8
    acfc:	2980c336 	bltu	r5,r6,b00c <_realloc_r+0x560>
    ad00:	008004c4 	movi	r2,19
    ad04:	9009883a 	mov	r4,r18
    ad08:	8011883a 	mov	r8,r16
    ad0c:	11800f2e 	bgeu	r2,r6,ad4c <_realloc_r+0x2a0>
    ad10:	90800017 	ldw	r2,0(r18)
    ad14:	ba000404 	addi	r8,r23,16
    ad18:	91000204 	addi	r4,r18,8
    ad1c:	b8800215 	stw	r2,8(r23)
    ad20:	90c00117 	ldw	r3,4(r18)
    ad24:	008006c4 	movi	r2,27
    ad28:	b8c00315 	stw	r3,12(r23)
    ad2c:	1180072e 	bgeu	r2,r6,ad4c <_realloc_r+0x2a0>
    ad30:	90c00217 	ldw	r3,8(r18)
    ad34:	ba000604 	addi	r8,r23,24
    ad38:	91000404 	addi	r4,r18,16
    ad3c:	b8c00415 	stw	r3,16(r23)
    ad40:	90800317 	ldw	r2,12(r18)
    ad44:	b8800515 	stw	r2,20(r23)
    ad48:	3140c726 	beq	r6,r5,b068 <_realloc_r+0x5bc>
    ad4c:	20800017 	ldw	r2,0(r4)
    ad50:	b80f883a 	mov	r7,r23
    ad54:	003fd906 	br	acbc <_realloc_r+0x210>
    ad58:	880b883a 	mov	r5,r17
    ad5c:	b009883a 	mov	r4,r22
    ad60:	000907c0 	call	907c <_malloc_r>
    ad64:	1023883a 	mov	r17,r2
    ad68:	10002526 	beq	r2,zero,ae00 <_realloc_r+0x354>
    ad6c:	80800117 	ldw	r2,4(r16)
    ad70:	00ffff84 	movi	r3,-2
    ad74:	893ffe04 	addi	r4,r17,-8
    ad78:	10c4703a 	and	r2,r2,r3
    ad7c:	8085883a 	add	r2,r16,r2
    ad80:	20809526 	beq	r4,r2,afd8 <_realloc_r+0x52c>
    ad84:	99bfff04 	addi	r6,r19,-4
    ad88:	01c00904 	movi	r7,36
    ad8c:	39804536 	bltu	r7,r6,aea4 <_realloc_r+0x3f8>
    ad90:	008004c4 	movi	r2,19
    ad94:	9009883a 	mov	r4,r18
    ad98:	880b883a 	mov	r5,r17
    ad9c:	11800f2e 	bgeu	r2,r6,addc <_realloc_r+0x330>
    ada0:	90800017 	ldw	r2,0(r18)
    ada4:	89400204 	addi	r5,r17,8
    ada8:	91000204 	addi	r4,r18,8
    adac:	88800015 	stw	r2,0(r17)
    adb0:	90c00117 	ldw	r3,4(r18)
    adb4:	008006c4 	movi	r2,27
    adb8:	88c00115 	stw	r3,4(r17)
    adbc:	1180072e 	bgeu	r2,r6,addc <_realloc_r+0x330>
    adc0:	90c00217 	ldw	r3,8(r18)
    adc4:	89400404 	addi	r5,r17,16
    adc8:	91000404 	addi	r4,r18,16
    adcc:	88c00215 	stw	r3,8(r17)
    add0:	90800317 	ldw	r2,12(r18)
    add4:	88800315 	stw	r2,12(r17)
    add8:	31c09126 	beq	r6,r7,b020 <_realloc_r+0x574>
    addc:	20800017 	ldw	r2,0(r4)
    ade0:	28800015 	stw	r2,0(r5)
    ade4:	20c00117 	ldw	r3,4(r4)
    ade8:	28c00115 	stw	r3,4(r5)
    adec:	20800217 	ldw	r2,8(r4)
    adf0:	28800215 	stw	r2,8(r5)
    adf4:	900b883a 	mov	r5,r18
    adf8:	b009883a 	mov	r4,r22
    adfc:	00084f40 	call	84f4 <_free_r>
    ae00:	b009883a 	mov	r4,r22
    ae04:	000e1a40 	call	e1a4 <__malloc_unlock>
    ae08:	003f5e06 	br	ab84 <_realloc_r+0xd8>
    ae0c:	300b883a 	mov	r5,r6
    ae10:	dfc00b17 	ldw	ra,44(sp)
    ae14:	df000a17 	ldw	fp,40(sp)
    ae18:	ddc00917 	ldw	r23,36(sp)
    ae1c:	dd800817 	ldw	r22,32(sp)
    ae20:	dd400717 	ldw	r21,28(sp)
    ae24:	dd000617 	ldw	r20,24(sp)
    ae28:	dcc00517 	ldw	r19,20(sp)
    ae2c:	dc800417 	ldw	r18,16(sp)
    ae30:	dc400317 	ldw	r17,12(sp)
    ae34:	dc000217 	ldw	r16,8(sp)
    ae38:	dec00c04 	addi	sp,sp,48
    ae3c:	000907c1 	jmpi	907c <_malloc_r>
    ae40:	38800117 	ldw	r2,4(r7)
    ae44:	e54b883a 	add	r5,fp,r21
    ae48:	31000054 	ori	r4,r6,1
    ae4c:	1080004c 	andi	r2,r2,1
    ae50:	1704b03a 	or	r2,r2,fp
    ae54:	38800115 	stw	r2,4(r7)
    ae58:	29000115 	stw	r4,4(r5)
    ae5c:	2987883a 	add	r3,r5,r6
    ae60:	18800117 	ldw	r2,4(r3)
    ae64:	29400204 	addi	r5,r5,8
    ae68:	b009883a 	mov	r4,r22
    ae6c:	10800054 	ori	r2,r2,1
    ae70:	18800115 	stw	r2,4(r3)
    ae74:	00084f40 	call	84f4 <_free_r>
    ae78:	003f3806 	br	ab5c <_realloc_r+0xb0>
    ae7c:	000d883a 	mov	r6,zero
    ae80:	0009883a 	mov	r4,zero
    ae84:	003f5d06 	br	abfc <_realloc_r+0x150>
    ae88:	30c00217 	ldw	r3,8(r6)
    ae8c:	30800317 	ldw	r2,12(r6)
    ae90:	800f883a 	mov	r7,r16
    ae94:	84000204 	addi	r16,r16,8
    ae98:	10c00215 	stw	r3,8(r2)
    ae9c:	18800315 	stw	r2,12(r3)
    aea0:	003f2306 	br	ab30 <_realloc_r+0x84>
    aea4:	8809883a 	mov	r4,r17
    aea8:	900b883a 	mov	r5,r18
    aeac:	00099400 	call	9940 <memmove>
    aeb0:	003fd006 	br	adf4 <_realloc_r+0x348>
    aeb4:	30800117 	ldw	r2,4(r6)
    aeb8:	e0c00404 	addi	r3,fp,16
    aebc:	1108703a 	and	r4,r2,r4
    aec0:	9905883a 	add	r2,r19,r4
    aec4:	10ff4d16 	blt	r2,r3,abfc <_realloc_r+0x150>
    aec8:	1705c83a 	sub	r2,r2,fp
    aecc:	870b883a 	add	r5,r16,fp
    aed0:	10800054 	ori	r2,r2,1
    aed4:	28800115 	stw	r2,4(r5)
    aed8:	80c00117 	ldw	r3,4(r16)
    aedc:	00800074 	movhi	r2,1
    aee0:	108a1d04 	addi	r2,r2,10356
    aee4:	b009883a 	mov	r4,r22
    aee8:	18c0004c 	andi	r3,r3,1
    aeec:	e0c6b03a 	or	r3,fp,r3
    aef0:	11400215 	stw	r5,8(r2)
    aef4:	80c00115 	stw	r3,4(r16)
    aef8:	000e1a40 	call	e1a4 <__malloc_unlock>
    aefc:	84400204 	addi	r17,r16,8
    af00:	003f2006 	br	ab84 <_realloc_r+0xd8>
    af04:	98a9883a 	add	r20,r19,r2
    af08:	2509883a 	add	r4,r4,r20
    af0c:	e0800404 	addi	r2,fp,16
    af10:	d9000115 	stw	r4,4(sp)
    af14:	20bf7016 	blt	r4,r2,acd8 <_realloc_r+0x22c>
    af18:	b8c00317 	ldw	r3,12(r23)
    af1c:	b8800217 	ldw	r2,8(r23)
    af20:	99bfff04 	addi	r6,r19,-4
    af24:	01400904 	movi	r5,36
    af28:	18800215 	stw	r2,8(r3)
    af2c:	10c00315 	stw	r3,12(r2)
    af30:	bc400204 	addi	r17,r23,8
    af34:	29804136 	bltu	r5,r6,b03c <_realloc_r+0x590>
    af38:	008004c4 	movi	r2,19
    af3c:	9009883a 	mov	r4,r18
    af40:	880f883a 	mov	r7,r17
    af44:	11800f2e 	bgeu	r2,r6,af84 <_realloc_r+0x4d8>
    af48:	90800017 	ldw	r2,0(r18)
    af4c:	b9c00404 	addi	r7,r23,16
    af50:	91000204 	addi	r4,r18,8
    af54:	b8800215 	stw	r2,8(r23)
    af58:	90c00117 	ldw	r3,4(r18)
    af5c:	008006c4 	movi	r2,27
    af60:	b8c00315 	stw	r3,12(r23)
    af64:	1180072e 	bgeu	r2,r6,af84 <_realloc_r+0x4d8>
    af68:	90c00217 	ldw	r3,8(r18)
    af6c:	b9c00604 	addi	r7,r23,24
    af70:	91000404 	addi	r4,r18,16
    af74:	b8c00415 	stw	r3,16(r23)
    af78:	90800317 	ldw	r2,12(r18)
    af7c:	b8800515 	stw	r2,20(r23)
    af80:	31404026 	beq	r6,r5,b084 <_realloc_r+0x5d8>
    af84:	20800017 	ldw	r2,0(r4)
    af88:	38800015 	stw	r2,0(r7)
    af8c:	20c00117 	ldw	r3,4(r4)
    af90:	38c00115 	stw	r3,4(r7)
    af94:	20800217 	ldw	r2,8(r4)
    af98:	38800215 	stw	r2,8(r7)
    af9c:	d8c00117 	ldw	r3,4(sp)
    afa0:	bf0b883a 	add	r5,r23,fp
    afa4:	b009883a 	mov	r4,r22
    afa8:	1f05c83a 	sub	r2,r3,fp
    afac:	10800054 	ori	r2,r2,1
    afb0:	28800115 	stw	r2,4(r5)
    afb4:	b8c00117 	ldw	r3,4(r23)
    afb8:	00800074 	movhi	r2,1
    afbc:	108a1d04 	addi	r2,r2,10356
    afc0:	11400215 	stw	r5,8(r2)
    afc4:	18c0004c 	andi	r3,r3,1
    afc8:	e0c6b03a 	or	r3,fp,r3
    afcc:	b8c00115 	stw	r3,4(r23)
    afd0:	000e1a40 	call	e1a4 <__malloc_unlock>
    afd4:	003eeb06 	br	ab84 <_realloc_r+0xd8>
    afd8:	20800117 	ldw	r2,4(r4)
    afdc:	00ffff04 	movi	r3,-4
    afe0:	800f883a 	mov	r7,r16
    afe4:	10c4703a 	and	r2,r2,r3
    afe8:	98a9883a 	add	r20,r19,r2
    afec:	84000204 	addi	r16,r16,8
    aff0:	003ecf06 	br	ab30 <_realloc_r+0x84>
    aff4:	900b883a 	mov	r5,r18
    aff8:	8009883a 	mov	r4,r16
    affc:	00099400 	call	9940 <memmove>
    b000:	dd000017 	ldw	r20,0(sp)
    b004:	b80f883a 	mov	r7,r23
    b008:	003ec906 	br	ab30 <_realloc_r+0x84>
    b00c:	900b883a 	mov	r5,r18
    b010:	8009883a 	mov	r4,r16
    b014:	00099400 	call	9940 <memmove>
    b018:	b80f883a 	mov	r7,r23
    b01c:	003ec406 	br	ab30 <_realloc_r+0x84>
    b020:	90c00417 	ldw	r3,16(r18)
    b024:	89400604 	addi	r5,r17,24
    b028:	91000604 	addi	r4,r18,24
    b02c:	88c00415 	stw	r3,16(r17)
    b030:	90800517 	ldw	r2,20(r18)
    b034:	88800515 	stw	r2,20(r17)
    b038:	003f6806 	br	addc <_realloc_r+0x330>
    b03c:	900b883a 	mov	r5,r18
    b040:	8809883a 	mov	r4,r17
    b044:	00099400 	call	9940 <memmove>
    b048:	003fd406 	br	af9c <_realloc_r+0x4f0>
    b04c:	90c00417 	ldw	r3,16(r18)
    b050:	91000604 	addi	r4,r18,24
    b054:	ba000804 	addi	r8,r23,32
    b058:	b8c00615 	stw	r3,24(r23)
    b05c:	90800517 	ldw	r2,20(r18)
    b060:	b8800715 	stw	r2,28(r23)
    b064:	003f1206 	br	acb0 <_realloc_r+0x204>
    b068:	90c00417 	ldw	r3,16(r18)
    b06c:	91000604 	addi	r4,r18,24
    b070:	ba000804 	addi	r8,r23,32
    b074:	b8c00615 	stw	r3,24(r23)
    b078:	90800517 	ldw	r2,20(r18)
    b07c:	b8800715 	stw	r2,28(r23)
    b080:	003f3206 	br	ad4c <_realloc_r+0x2a0>
    b084:	90c00417 	ldw	r3,16(r18)
    b088:	91000604 	addi	r4,r18,24
    b08c:	b9c00804 	addi	r7,r23,32
    b090:	b8c00615 	stw	r3,24(r23)
    b094:	90800517 	ldw	r2,20(r18)
    b098:	b8800715 	stw	r2,28(r23)
    b09c:	003fb906 	br	af84 <_realloc_r+0x4d8>

0000b0a0 <__isinfd>:
    b0a0:	200d883a 	mov	r6,r4
    b0a4:	0109c83a 	sub	r4,zero,r4
    b0a8:	2188b03a 	or	r4,r4,r6
    b0ac:	2008d7fa 	srli	r4,r4,31
    b0b0:	00a00034 	movhi	r2,32768
    b0b4:	10bfffc4 	addi	r2,r2,-1
    b0b8:	1144703a 	and	r2,r2,r5
    b0bc:	2088b03a 	or	r4,r4,r2
    b0c0:	009ffc34 	movhi	r2,32752
    b0c4:	1105c83a 	sub	r2,r2,r4
    b0c8:	0087c83a 	sub	r3,zero,r2
    b0cc:	10c4b03a 	or	r2,r2,r3
    b0d0:	1004d7fa 	srli	r2,r2,31
    b0d4:	00c00044 	movi	r3,1
    b0d8:	1885c83a 	sub	r2,r3,r2
    b0dc:	f800283a 	ret

0000b0e0 <__isnand>:
    b0e0:	200d883a 	mov	r6,r4
    b0e4:	0109c83a 	sub	r4,zero,r4
    b0e8:	2188b03a 	or	r4,r4,r6
    b0ec:	2008d7fa 	srli	r4,r4,31
    b0f0:	00a00034 	movhi	r2,32768
    b0f4:	10bfffc4 	addi	r2,r2,-1
    b0f8:	1144703a 	and	r2,r2,r5
    b0fc:	2088b03a 	or	r4,r4,r2
    b100:	009ffc34 	movhi	r2,32752
    b104:	1105c83a 	sub	r2,r2,r4
    b108:	1004d7fa 	srli	r2,r2,31
    b10c:	f800283a 	ret

0000b110 <_sbrk_r>:
    b110:	defffd04 	addi	sp,sp,-12
    b114:	dc000015 	stw	r16,0(sp)
    b118:	04000074 	movhi	r16,1
    b11c:	8416e704 	addi	r16,r16,23452
    b120:	dc400115 	stw	r17,4(sp)
    b124:	80000015 	stw	zero,0(r16)
    b128:	2023883a 	mov	r17,r4
    b12c:	2809883a 	mov	r4,r5
    b130:	dfc00215 	stw	ra,8(sp)
    b134:	000e3a40 	call	e3a4 <sbrk>
    b138:	1007883a 	mov	r3,r2
    b13c:	00bfffc4 	movi	r2,-1
    b140:	18800626 	beq	r3,r2,b15c <_sbrk_r+0x4c>
    b144:	1805883a 	mov	r2,r3
    b148:	dfc00217 	ldw	ra,8(sp)
    b14c:	dc400117 	ldw	r17,4(sp)
    b150:	dc000017 	ldw	r16,0(sp)
    b154:	dec00304 	addi	sp,sp,12
    b158:	f800283a 	ret
    b15c:	80800017 	ldw	r2,0(r16)
    b160:	103ff826 	beq	r2,zero,b144 <_sbrk_r+0x34>
    b164:	88800015 	stw	r2,0(r17)
    b168:	1805883a 	mov	r2,r3
    b16c:	dfc00217 	ldw	ra,8(sp)
    b170:	dc400117 	ldw	r17,4(sp)
    b174:	dc000017 	ldw	r16,0(sp)
    b178:	dec00304 	addi	sp,sp,12
    b17c:	f800283a 	ret

0000b180 <__sclose>:
    b180:	2940038f 	ldh	r5,14(r5)
    b184:	000b4b41 	jmpi	b4b4 <_close_r>

0000b188 <__sseek>:
    b188:	defffe04 	addi	sp,sp,-8
    b18c:	dc000015 	stw	r16,0(sp)
    b190:	2821883a 	mov	r16,r5
    b194:	2940038f 	ldh	r5,14(r5)
    b198:	dfc00115 	stw	ra,4(sp)
    b19c:	000b72c0 	call	b72c <_lseek_r>
    b1a0:	1007883a 	mov	r3,r2
    b1a4:	00bfffc4 	movi	r2,-1
    b1a8:	18800926 	beq	r3,r2,b1d0 <__sseek+0x48>
    b1ac:	8080030b 	ldhu	r2,12(r16)
    b1b0:	80c01415 	stw	r3,80(r16)
    b1b4:	10840014 	ori	r2,r2,4096
    b1b8:	8080030d 	sth	r2,12(r16)
    b1bc:	1805883a 	mov	r2,r3
    b1c0:	dfc00117 	ldw	ra,4(sp)
    b1c4:	dc000017 	ldw	r16,0(sp)
    b1c8:	dec00204 	addi	sp,sp,8
    b1cc:	f800283a 	ret
    b1d0:	8080030b 	ldhu	r2,12(r16)
    b1d4:	10bbffcc 	andi	r2,r2,61439
    b1d8:	8080030d 	sth	r2,12(r16)
    b1dc:	1805883a 	mov	r2,r3
    b1e0:	dfc00117 	ldw	ra,4(sp)
    b1e4:	dc000017 	ldw	r16,0(sp)
    b1e8:	dec00204 	addi	sp,sp,8
    b1ec:	f800283a 	ret

0000b1f0 <__swrite>:
    b1f0:	2880030b 	ldhu	r2,12(r5)
    b1f4:	defffb04 	addi	sp,sp,-20
    b1f8:	dcc00315 	stw	r19,12(sp)
    b1fc:	1080400c 	andi	r2,r2,256
    b200:	dc800215 	stw	r18,8(sp)
    b204:	dc400115 	stw	r17,4(sp)
    b208:	dc000015 	stw	r16,0(sp)
    b20c:	3027883a 	mov	r19,r6
    b210:	3825883a 	mov	r18,r7
    b214:	dfc00415 	stw	ra,16(sp)
    b218:	2821883a 	mov	r16,r5
    b21c:	000d883a 	mov	r6,zero
    b220:	01c00084 	movi	r7,2
    b224:	2023883a 	mov	r17,r4
    b228:	10000226 	beq	r2,zero,b234 <__swrite+0x44>
    b22c:	2940038f 	ldh	r5,14(r5)
    b230:	000b72c0 	call	b72c <_lseek_r>
    b234:	8080030b 	ldhu	r2,12(r16)
    b238:	8140038f 	ldh	r5,14(r16)
    b23c:	8809883a 	mov	r4,r17
    b240:	10bbffcc 	andi	r2,r2,61439
    b244:	980d883a 	mov	r6,r19
    b248:	900f883a 	mov	r7,r18
    b24c:	8080030d 	sth	r2,12(r16)
    b250:	dfc00417 	ldw	ra,16(sp)
    b254:	dcc00317 	ldw	r19,12(sp)
    b258:	dc800217 	ldw	r18,8(sp)
    b25c:	dc400117 	ldw	r17,4(sp)
    b260:	dc000017 	ldw	r16,0(sp)
    b264:	dec00504 	addi	sp,sp,20
    b268:	000b3881 	jmpi	b388 <_write_r>

0000b26c <__sread>:
    b26c:	defffe04 	addi	sp,sp,-8
    b270:	dc000015 	stw	r16,0(sp)
    b274:	2821883a 	mov	r16,r5
    b278:	2940038f 	ldh	r5,14(r5)
    b27c:	dfc00115 	stw	ra,4(sp)
    b280:	000b7a40 	call	b7a4 <_read_r>
    b284:	1007883a 	mov	r3,r2
    b288:	10000816 	blt	r2,zero,b2ac <__sread+0x40>
    b28c:	80801417 	ldw	r2,80(r16)
    b290:	10c5883a 	add	r2,r2,r3
    b294:	80801415 	stw	r2,80(r16)
    b298:	1805883a 	mov	r2,r3
    b29c:	dfc00117 	ldw	ra,4(sp)
    b2a0:	dc000017 	ldw	r16,0(sp)
    b2a4:	dec00204 	addi	sp,sp,8
    b2a8:	f800283a 	ret
    b2ac:	8080030b 	ldhu	r2,12(r16)
    b2b0:	10bbffcc 	andi	r2,r2,61439
    b2b4:	8080030d 	sth	r2,12(r16)
    b2b8:	1805883a 	mov	r2,r3
    b2bc:	dfc00117 	ldw	ra,4(sp)
    b2c0:	dc000017 	ldw	r16,0(sp)
    b2c4:	dec00204 	addi	sp,sp,8
    b2c8:	f800283a 	ret

0000b2cc <strcmp>:
    b2cc:	2144b03a 	or	r2,r4,r5
    b2d0:	108000cc 	andi	r2,r2,3
    b2d4:	10001d1e 	bne	r2,zero,b34c <strcmp+0x80>
    b2d8:	200f883a 	mov	r7,r4
    b2dc:	28800017 	ldw	r2,0(r5)
    b2e0:	21000017 	ldw	r4,0(r4)
    b2e4:	280d883a 	mov	r6,r5
    b2e8:	2080161e 	bne	r4,r2,b344 <strcmp+0x78>
    b2ec:	023fbff4 	movhi	r8,65279
    b2f0:	423fbfc4 	addi	r8,r8,-257
    b2f4:	2207883a 	add	r3,r4,r8
    b2f8:	01602074 	movhi	r5,32897
    b2fc:	29602004 	addi	r5,r5,-32640
    b300:	1946703a 	and	r3,r3,r5
    b304:	0104303a 	nor	r2,zero,r4
    b308:	10c4703a 	and	r2,r2,r3
    b30c:	10001c1e 	bne	r2,zero,b380 <strcmp+0xb4>
    b310:	4013883a 	mov	r9,r8
    b314:	2811883a 	mov	r8,r5
    b318:	00000106 	br	b320 <strcmp+0x54>
    b31c:	1800181e 	bne	r3,zero,b380 <strcmp+0xb4>
    b320:	39c00104 	addi	r7,r7,4
    b324:	39000017 	ldw	r4,0(r7)
    b328:	31800104 	addi	r6,r6,4
    b32c:	31400017 	ldw	r5,0(r6)
    b330:	2245883a 	add	r2,r4,r9
    b334:	1204703a 	and	r2,r2,r8
    b338:	0106303a 	nor	r3,zero,r4
    b33c:	1886703a 	and	r3,r3,r2
    b340:	217ff626 	beq	r4,r5,b31c <strcmp+0x50>
    b344:	3809883a 	mov	r4,r7
    b348:	300b883a 	mov	r5,r6
    b34c:	20c00007 	ldb	r3,0(r4)
    b350:	1800051e 	bne	r3,zero,b368 <strcmp+0x9c>
    b354:	00000606 	br	b370 <strcmp+0xa4>
    b358:	21000044 	addi	r4,r4,1
    b35c:	20c00007 	ldb	r3,0(r4)
    b360:	29400044 	addi	r5,r5,1
    b364:	18000226 	beq	r3,zero,b370 <strcmp+0xa4>
    b368:	28800007 	ldb	r2,0(r5)
    b36c:	18bffa26 	beq	r3,r2,b358 <strcmp+0x8c>
    b370:	20c00003 	ldbu	r3,0(r4)
    b374:	28800003 	ldbu	r2,0(r5)
    b378:	1885c83a 	sub	r2,r3,r2
    b37c:	f800283a 	ret
    b380:	0005883a 	mov	r2,zero
    b384:	f800283a 	ret

0000b388 <_write_r>:
    b388:	defffd04 	addi	sp,sp,-12
    b38c:	dc000015 	stw	r16,0(sp)
    b390:	04000074 	movhi	r16,1
    b394:	8416e704 	addi	r16,r16,23452
    b398:	dc400115 	stw	r17,4(sp)
    b39c:	80000015 	stw	zero,0(r16)
    b3a0:	2023883a 	mov	r17,r4
    b3a4:	2809883a 	mov	r4,r5
    b3a8:	300b883a 	mov	r5,r6
    b3ac:	380d883a 	mov	r6,r7
    b3b0:	dfc00215 	stw	ra,8(sp)
    b3b4:	000e4900 	call	e490 <write>
    b3b8:	1007883a 	mov	r3,r2
    b3bc:	00bfffc4 	movi	r2,-1
    b3c0:	18800626 	beq	r3,r2,b3dc <_write_r+0x54>
    b3c4:	1805883a 	mov	r2,r3
    b3c8:	dfc00217 	ldw	ra,8(sp)
    b3cc:	dc400117 	ldw	r17,4(sp)
    b3d0:	dc000017 	ldw	r16,0(sp)
    b3d4:	dec00304 	addi	sp,sp,12
    b3d8:	f800283a 	ret
    b3dc:	80800017 	ldw	r2,0(r16)
    b3e0:	103ff826 	beq	r2,zero,b3c4 <_write_r+0x3c>
    b3e4:	88800015 	stw	r2,0(r17)
    b3e8:	1805883a 	mov	r2,r3
    b3ec:	dfc00217 	ldw	ra,8(sp)
    b3f0:	dc400117 	ldw	r17,4(sp)
    b3f4:	dc000017 	ldw	r16,0(sp)
    b3f8:	dec00304 	addi	sp,sp,12
    b3fc:	f800283a 	ret

0000b400 <_calloc_r>:
    b400:	298b383a 	mul	r5,r5,r6
    b404:	defffe04 	addi	sp,sp,-8
    b408:	dc000015 	stw	r16,0(sp)
    b40c:	dfc00115 	stw	ra,4(sp)
    b410:	000907c0 	call	907c <_malloc_r>
    b414:	1021883a 	mov	r16,r2
    b418:	01c00904 	movi	r7,36
    b41c:	10000d26 	beq	r2,zero,b454 <_calloc_r+0x54>
    b420:	10ffff17 	ldw	r3,-4(r2)
    b424:	1009883a 	mov	r4,r2
    b428:	00bfff04 	movi	r2,-4
    b42c:	1886703a 	and	r3,r3,r2
    b430:	1887883a 	add	r3,r3,r2
    b434:	180d883a 	mov	r6,r3
    b438:	000b883a 	mov	r5,zero
    b43c:	38c01736 	bltu	r7,r3,b49c <_calloc_r+0x9c>
    b440:	008004c4 	movi	r2,19
    b444:	10c00836 	bltu	r2,r3,b468 <_calloc_r+0x68>
    b448:	20000215 	stw	zero,8(r4)
    b44c:	20000015 	stw	zero,0(r4)
    b450:	20000115 	stw	zero,4(r4)
    b454:	8005883a 	mov	r2,r16
    b458:	dfc00117 	ldw	ra,4(sp)
    b45c:	dc000017 	ldw	r16,0(sp)
    b460:	dec00204 	addi	sp,sp,8
    b464:	f800283a 	ret
    b468:	008006c4 	movi	r2,27
    b46c:	80000015 	stw	zero,0(r16)
    b470:	80000115 	stw	zero,4(r16)
    b474:	81000204 	addi	r4,r16,8
    b478:	10fff32e 	bgeu	r2,r3,b448 <_calloc_r+0x48>
    b47c:	80000215 	stw	zero,8(r16)
    b480:	80000315 	stw	zero,12(r16)
    b484:	81000404 	addi	r4,r16,16
    b488:	19ffef1e 	bne	r3,r7,b448 <_calloc_r+0x48>
    b48c:	81000604 	addi	r4,r16,24
    b490:	80000415 	stw	zero,16(r16)
    b494:	80000515 	stw	zero,20(r16)
    b498:	003feb06 	br	b448 <_calloc_r+0x48>
    b49c:	0009a200 	call	9a20 <memset>
    b4a0:	8005883a 	mov	r2,r16
    b4a4:	dfc00117 	ldw	ra,4(sp)
    b4a8:	dc000017 	ldw	r16,0(sp)
    b4ac:	dec00204 	addi	sp,sp,8
    b4b0:	f800283a 	ret

0000b4b4 <_close_r>:
    b4b4:	defffd04 	addi	sp,sp,-12
    b4b8:	dc000015 	stw	r16,0(sp)
    b4bc:	04000074 	movhi	r16,1
    b4c0:	8416e704 	addi	r16,r16,23452
    b4c4:	dc400115 	stw	r17,4(sp)
    b4c8:	80000015 	stw	zero,0(r16)
    b4cc:	2023883a 	mov	r17,r4
    b4d0:	2809883a 	mov	r4,r5
    b4d4:	dfc00215 	stw	ra,8(sp)
    b4d8:	000db000 	call	db00 <close>
    b4dc:	1007883a 	mov	r3,r2
    b4e0:	00bfffc4 	movi	r2,-1
    b4e4:	18800626 	beq	r3,r2,b500 <_close_r+0x4c>
    b4e8:	1805883a 	mov	r2,r3
    b4ec:	dfc00217 	ldw	ra,8(sp)
    b4f0:	dc400117 	ldw	r17,4(sp)
    b4f4:	dc000017 	ldw	r16,0(sp)
    b4f8:	dec00304 	addi	sp,sp,12
    b4fc:	f800283a 	ret
    b500:	80800017 	ldw	r2,0(r16)
    b504:	103ff826 	beq	r2,zero,b4e8 <_close_r+0x34>
    b508:	88800015 	stw	r2,0(r17)
    b50c:	1805883a 	mov	r2,r3
    b510:	dfc00217 	ldw	ra,8(sp)
    b514:	dc400117 	ldw	r17,4(sp)
    b518:	dc000017 	ldw	r16,0(sp)
    b51c:	dec00304 	addi	sp,sp,12
    b520:	f800283a 	ret

0000b524 <_fclose_r>:
    b524:	defffc04 	addi	sp,sp,-16
    b528:	dc400115 	stw	r17,4(sp)
    b52c:	dc000015 	stw	r16,0(sp)
    b530:	dfc00315 	stw	ra,12(sp)
    b534:	dc800215 	stw	r18,8(sp)
    b538:	2821883a 	mov	r16,r5
    b53c:	2023883a 	mov	r17,r4
    b540:	28002926 	beq	r5,zero,b5e8 <_fclose_r+0xc4>
    b544:	00081600 	call	8160 <__sfp_lock_acquire>
    b548:	88000226 	beq	r17,zero,b554 <_fclose_r+0x30>
    b54c:	88800e17 	ldw	r2,56(r17)
    b550:	10002d26 	beq	r2,zero,b608 <_fclose_r+0xe4>
    b554:	8080030f 	ldh	r2,12(r16)
    b558:	10002226 	beq	r2,zero,b5e4 <_fclose_r+0xc0>
    b55c:	8809883a 	mov	r4,r17
    b560:	800b883a 	mov	r5,r16
    b564:	0007ed80 	call	7ed8 <_fflush_r>
    b568:	1025883a 	mov	r18,r2
    b56c:	80800b17 	ldw	r2,44(r16)
    b570:	10000426 	beq	r2,zero,b584 <_fclose_r+0x60>
    b574:	81400717 	ldw	r5,28(r16)
    b578:	8809883a 	mov	r4,r17
    b57c:	103ee83a 	callr	r2
    b580:	10002a16 	blt	r2,zero,b62c <_fclose_r+0x108>
    b584:	8080030b 	ldhu	r2,12(r16)
    b588:	1080200c 	andi	r2,r2,128
    b58c:	1000231e 	bne	r2,zero,b61c <_fclose_r+0xf8>
    b590:	81400c17 	ldw	r5,48(r16)
    b594:	28000526 	beq	r5,zero,b5ac <_fclose_r+0x88>
    b598:	80801004 	addi	r2,r16,64
    b59c:	28800226 	beq	r5,r2,b5a8 <_fclose_r+0x84>
    b5a0:	8809883a 	mov	r4,r17
    b5a4:	00084f40 	call	84f4 <_free_r>
    b5a8:	80000c15 	stw	zero,48(r16)
    b5ac:	81401117 	ldw	r5,68(r16)
    b5b0:	28000326 	beq	r5,zero,b5c0 <_fclose_r+0x9c>
    b5b4:	8809883a 	mov	r4,r17
    b5b8:	00084f40 	call	84f4 <_free_r>
    b5bc:	80001115 	stw	zero,68(r16)
    b5c0:	8000030d 	sth	zero,12(r16)
    b5c4:	00081640 	call	8164 <__sfp_lock_release>
    b5c8:	9005883a 	mov	r2,r18
    b5cc:	dfc00317 	ldw	ra,12(sp)
    b5d0:	dc800217 	ldw	r18,8(sp)
    b5d4:	dc400117 	ldw	r17,4(sp)
    b5d8:	dc000017 	ldw	r16,0(sp)
    b5dc:	dec00404 	addi	sp,sp,16
    b5e0:	f800283a 	ret
    b5e4:	00081640 	call	8164 <__sfp_lock_release>
    b5e8:	0025883a 	mov	r18,zero
    b5ec:	9005883a 	mov	r2,r18
    b5f0:	dfc00317 	ldw	ra,12(sp)
    b5f4:	dc800217 	ldw	r18,8(sp)
    b5f8:	dc400117 	ldw	r17,4(sp)
    b5fc:	dc000017 	ldw	r16,0(sp)
    b600:	dec00404 	addi	sp,sp,16
    b604:	f800283a 	ret
    b608:	8809883a 	mov	r4,r17
    b60c:	00081700 	call	8170 <__sinit>
    b610:	8080030f 	ldh	r2,12(r16)
    b614:	103fd11e 	bne	r2,zero,b55c <_fclose_r+0x38>
    b618:	003ff206 	br	b5e4 <_fclose_r+0xc0>
    b61c:	81400417 	ldw	r5,16(r16)
    b620:	8809883a 	mov	r4,r17
    b624:	00084f40 	call	84f4 <_free_r>
    b628:	003fd906 	br	b590 <_fclose_r+0x6c>
    b62c:	04bfffc4 	movi	r18,-1
    b630:	003fd406 	br	b584 <_fclose_r+0x60>

0000b634 <fclose>:
    b634:	00800074 	movhi	r2,1
    b638:	108fe904 	addi	r2,r2,16292
    b63c:	200b883a 	mov	r5,r4
    b640:	11000017 	ldw	r4,0(r2)
    b644:	000b5241 	jmpi	b524 <_fclose_r>

0000b648 <_fstat_r>:
    b648:	defffd04 	addi	sp,sp,-12
    b64c:	dc000015 	stw	r16,0(sp)
    b650:	04000074 	movhi	r16,1
    b654:	8416e704 	addi	r16,r16,23452
    b658:	dc400115 	stw	r17,4(sp)
    b65c:	80000015 	stw	zero,0(r16)
    b660:	2023883a 	mov	r17,r4
    b664:	2809883a 	mov	r4,r5
    b668:	300b883a 	mov	r5,r6
    b66c:	dfc00215 	stw	ra,8(sp)
    b670:	000dc880 	call	dc88 <fstat>
    b674:	1007883a 	mov	r3,r2
    b678:	00bfffc4 	movi	r2,-1
    b67c:	18800626 	beq	r3,r2,b698 <_fstat_r+0x50>
    b680:	1805883a 	mov	r2,r3
    b684:	dfc00217 	ldw	ra,8(sp)
    b688:	dc400117 	ldw	r17,4(sp)
    b68c:	dc000017 	ldw	r16,0(sp)
    b690:	dec00304 	addi	sp,sp,12
    b694:	f800283a 	ret
    b698:	80800017 	ldw	r2,0(r16)
    b69c:	103ff826 	beq	r2,zero,b680 <_fstat_r+0x38>
    b6a0:	88800015 	stw	r2,0(r17)
    b6a4:	1805883a 	mov	r2,r3
    b6a8:	dfc00217 	ldw	ra,8(sp)
    b6ac:	dc400117 	ldw	r17,4(sp)
    b6b0:	dc000017 	ldw	r16,0(sp)
    b6b4:	dec00304 	addi	sp,sp,12
    b6b8:	f800283a 	ret

0000b6bc <_isatty_r>:
    b6bc:	defffd04 	addi	sp,sp,-12
    b6c0:	dc000015 	stw	r16,0(sp)
    b6c4:	04000074 	movhi	r16,1
    b6c8:	8416e704 	addi	r16,r16,23452
    b6cc:	dc400115 	stw	r17,4(sp)
    b6d0:	80000015 	stw	zero,0(r16)
    b6d4:	2023883a 	mov	r17,r4
    b6d8:	2809883a 	mov	r4,r5
    b6dc:	dfc00215 	stw	ra,8(sp)
    b6e0:	000ddbc0 	call	ddbc <isatty>
    b6e4:	1007883a 	mov	r3,r2
    b6e8:	00bfffc4 	movi	r2,-1
    b6ec:	18800626 	beq	r3,r2,b708 <_isatty_r+0x4c>
    b6f0:	1805883a 	mov	r2,r3
    b6f4:	dfc00217 	ldw	ra,8(sp)
    b6f8:	dc400117 	ldw	r17,4(sp)
    b6fc:	dc000017 	ldw	r16,0(sp)
    b700:	dec00304 	addi	sp,sp,12
    b704:	f800283a 	ret
    b708:	80800017 	ldw	r2,0(r16)
    b70c:	103ff826 	beq	r2,zero,b6f0 <_isatty_r+0x34>
    b710:	88800015 	stw	r2,0(r17)
    b714:	1805883a 	mov	r2,r3
    b718:	dfc00217 	ldw	ra,8(sp)
    b71c:	dc400117 	ldw	r17,4(sp)
    b720:	dc000017 	ldw	r16,0(sp)
    b724:	dec00304 	addi	sp,sp,12
    b728:	f800283a 	ret

0000b72c <_lseek_r>:
    b72c:	defffd04 	addi	sp,sp,-12
    b730:	dc000015 	stw	r16,0(sp)
    b734:	04000074 	movhi	r16,1
    b738:	8416e704 	addi	r16,r16,23452
    b73c:	dc400115 	stw	r17,4(sp)
    b740:	80000015 	stw	zero,0(r16)
    b744:	2023883a 	mov	r17,r4
    b748:	2809883a 	mov	r4,r5
    b74c:	300b883a 	mov	r5,r6
    b750:	380d883a 	mov	r6,r7
    b754:	dfc00215 	stw	ra,8(sp)
    b758:	000dfc80 	call	dfc8 <lseek>
    b75c:	1007883a 	mov	r3,r2
    b760:	00bfffc4 	movi	r2,-1
    b764:	18800626 	beq	r3,r2,b780 <_lseek_r+0x54>
    b768:	1805883a 	mov	r2,r3
    b76c:	dfc00217 	ldw	ra,8(sp)
    b770:	dc400117 	ldw	r17,4(sp)
    b774:	dc000017 	ldw	r16,0(sp)
    b778:	dec00304 	addi	sp,sp,12
    b77c:	f800283a 	ret
    b780:	80800017 	ldw	r2,0(r16)
    b784:	103ff826 	beq	r2,zero,b768 <_lseek_r+0x3c>
    b788:	88800015 	stw	r2,0(r17)
    b78c:	1805883a 	mov	r2,r3
    b790:	dfc00217 	ldw	ra,8(sp)
    b794:	dc400117 	ldw	r17,4(sp)
    b798:	dc000017 	ldw	r16,0(sp)
    b79c:	dec00304 	addi	sp,sp,12
    b7a0:	f800283a 	ret

0000b7a4 <_read_r>:
    b7a4:	defffd04 	addi	sp,sp,-12
    b7a8:	dc000015 	stw	r16,0(sp)
    b7ac:	04000074 	movhi	r16,1
    b7b0:	8416e704 	addi	r16,r16,23452
    b7b4:	dc400115 	stw	r17,4(sp)
    b7b8:	80000015 	stw	zero,0(r16)
    b7bc:	2023883a 	mov	r17,r4
    b7c0:	2809883a 	mov	r4,r5
    b7c4:	300b883a 	mov	r5,r6
    b7c8:	380d883a 	mov	r6,r7
    b7cc:	dfc00215 	stw	ra,8(sp)
    b7d0:	000e1c40 	call	e1c4 <read>
    b7d4:	1007883a 	mov	r3,r2
    b7d8:	00bfffc4 	movi	r2,-1
    b7dc:	18800626 	beq	r3,r2,b7f8 <_read_r+0x54>
    b7e0:	1805883a 	mov	r2,r3
    b7e4:	dfc00217 	ldw	ra,8(sp)
    b7e8:	dc400117 	ldw	r17,4(sp)
    b7ec:	dc000017 	ldw	r16,0(sp)
    b7f0:	dec00304 	addi	sp,sp,12
    b7f4:	f800283a 	ret
    b7f8:	80800017 	ldw	r2,0(r16)
    b7fc:	103ff826 	beq	r2,zero,b7e0 <_read_r+0x3c>
    b800:	88800015 	stw	r2,0(r17)
    b804:	1805883a 	mov	r2,r3
    b808:	dfc00217 	ldw	ra,8(sp)
    b80c:	dc400117 	ldw	r17,4(sp)
    b810:	dc000017 	ldw	r16,0(sp)
    b814:	dec00304 	addi	sp,sp,12
    b818:	f800283a 	ret

0000b81c <__udivdi3>:
    b81c:	defff004 	addi	sp,sp,-64
    b820:	2005883a 	mov	r2,r4
    b824:	3011883a 	mov	r8,r6
    b828:	df000e15 	stw	fp,56(sp)
    b82c:	dd000a15 	stw	r20,40(sp)
    b830:	dc000615 	stw	r16,24(sp)
    b834:	dfc00f15 	stw	ra,60(sp)
    b838:	ddc00d15 	stw	r23,52(sp)
    b83c:	dd800c15 	stw	r22,48(sp)
    b840:	dd400b15 	stw	r21,44(sp)
    b844:	dcc00915 	stw	r19,36(sp)
    b848:	dc800815 	stw	r18,32(sp)
    b84c:	dc400715 	stw	r17,28(sp)
    b850:	4021883a 	mov	r16,r8
    b854:	1039883a 	mov	fp,r2
    b858:	2829883a 	mov	r20,r5
    b85c:	38003b1e 	bne	r7,zero,b94c <__udivdi3+0x130>
    b860:	2a005c36 	bltu	r5,r8,b9d4 <__udivdi3+0x1b8>
    b864:	4000a626 	beq	r8,zero,bb00 <__udivdi3+0x2e4>
    b868:	00bfffd4 	movui	r2,65535
    b86c:	14009e36 	bltu	r2,r16,bae8 <__udivdi3+0x2cc>
    b870:	00803fc4 	movi	r2,255
    b874:	14013d36 	bltu	r2,r16,bd6c <__udivdi3+0x550>
    b878:	000b883a 	mov	r5,zero
    b87c:	0005883a 	mov	r2,zero
    b880:	8084d83a 	srl	r2,r16,r2
    b884:	01000074 	movhi	r4,1
    b888:	21082704 	addi	r4,r4,8348
    b88c:	01800804 	movi	r6,32
    b890:	1105883a 	add	r2,r2,r4
    b894:	10c00003 	ldbu	r3,0(r2)
    b898:	28c7883a 	add	r3,r5,r3
    b89c:	30edc83a 	sub	r22,r6,r3
    b8a0:	b000ee1e 	bne	r22,zero,bc5c <__udivdi3+0x440>
    b8a4:	802ad43a 	srli	r21,r16,16
    b8a8:	00800044 	movi	r2,1
    b8ac:	a423c83a 	sub	r17,r20,r16
    b8b0:	85ffffcc 	andi	r23,r16,65535
    b8b4:	d8800315 	stw	r2,12(sp)
    b8b8:	8809883a 	mov	r4,r17
    b8bc:	a80b883a 	mov	r5,r21
    b8c0:	00044f80 	call	44f8 <__udivsi3>
    b8c4:	8809883a 	mov	r4,r17
    b8c8:	a80b883a 	mov	r5,r21
    b8cc:	102d883a 	mov	r22,r2
    b8d0:	00045000 	call	4500 <__umodsi3>
    b8d4:	1004943a 	slli	r2,r2,16
    b8d8:	e006d43a 	srli	r3,fp,16
    b8dc:	bda3383a 	mul	r17,r23,r22
    b8e0:	10c4b03a 	or	r2,r2,r3
    b8e4:	1440042e 	bgeu	r2,r17,b8f8 <__udivdi3+0xdc>
    b8e8:	1405883a 	add	r2,r2,r16
    b8ec:	b5bfffc4 	addi	r22,r22,-1
    b8f0:	14000136 	bltu	r2,r16,b8f8 <__udivdi3+0xdc>
    b8f4:	14413d36 	bltu	r2,r17,bdec <__udivdi3+0x5d0>
    b8f8:	1463c83a 	sub	r17,r2,r17
    b8fc:	8809883a 	mov	r4,r17
    b900:	a80b883a 	mov	r5,r21
    b904:	00044f80 	call	44f8 <__udivsi3>
    b908:	8809883a 	mov	r4,r17
    b90c:	a80b883a 	mov	r5,r21
    b910:	1029883a 	mov	r20,r2
    b914:	00045000 	call	4500 <__umodsi3>
    b918:	1004943a 	slli	r2,r2,16
    b91c:	bd09383a 	mul	r4,r23,r20
    b920:	e0ffffcc 	andi	r3,fp,65535
    b924:	10c4b03a 	or	r2,r2,r3
    b928:	1100042e 	bgeu	r2,r4,b93c <__udivdi3+0x120>
    b92c:	8085883a 	add	r2,r16,r2
    b930:	a53fffc4 	addi	r20,r20,-1
    b934:	14000136 	bltu	r2,r16,b93c <__udivdi3+0x120>
    b938:	11012036 	bltu	r2,r4,bdbc <__udivdi3+0x5a0>
    b93c:	b004943a 	slli	r2,r22,16
    b940:	d9000317 	ldw	r4,12(sp)
    b944:	a084b03a 	or	r2,r20,r2
    b948:	00001506 	br	b9a0 <__udivdi3+0x184>
    b94c:	380d883a 	mov	r6,r7
    b950:	29c06236 	bltu	r5,r7,badc <__udivdi3+0x2c0>
    b954:	00bfffd4 	movui	r2,65535
    b958:	11c05a36 	bltu	r2,r7,bac4 <__udivdi3+0x2a8>
    b95c:	00803fc4 	movi	r2,255
    b960:	11c0fc36 	bltu	r2,r7,bd54 <__udivdi3+0x538>
    b964:	000b883a 	mov	r5,zero
    b968:	0005883a 	mov	r2,zero
    b96c:	3084d83a 	srl	r2,r6,r2
    b970:	01000074 	movhi	r4,1
    b974:	21082704 	addi	r4,r4,8348
    b978:	01c00804 	movi	r7,32
    b97c:	1105883a 	add	r2,r2,r4
    b980:	10c00003 	ldbu	r3,0(r2)
    b984:	28c7883a 	add	r3,r5,r3
    b988:	38efc83a 	sub	r23,r7,r3
    b98c:	b800691e 	bne	r23,zero,bb34 <__udivdi3+0x318>
    b990:	35000136 	bltu	r6,r20,b998 <__udivdi3+0x17c>
    b994:	e4005136 	bltu	fp,r16,badc <__udivdi3+0x2c0>
    b998:	00800044 	movi	r2,1
    b99c:	0009883a 	mov	r4,zero
    b9a0:	2007883a 	mov	r3,r4
    b9a4:	dfc00f17 	ldw	ra,60(sp)
    b9a8:	df000e17 	ldw	fp,56(sp)
    b9ac:	ddc00d17 	ldw	r23,52(sp)
    b9b0:	dd800c17 	ldw	r22,48(sp)
    b9b4:	dd400b17 	ldw	r21,44(sp)
    b9b8:	dd000a17 	ldw	r20,40(sp)
    b9bc:	dcc00917 	ldw	r19,36(sp)
    b9c0:	dc800817 	ldw	r18,32(sp)
    b9c4:	dc400717 	ldw	r17,28(sp)
    b9c8:	dc000617 	ldw	r16,24(sp)
    b9cc:	dec01004 	addi	sp,sp,64
    b9d0:	f800283a 	ret
    b9d4:	00bfffd4 	movui	r2,65535
    b9d8:	12005036 	bltu	r2,r8,bb1c <__udivdi3+0x300>
    b9dc:	00803fc4 	movi	r2,255
    b9e0:	1200e836 	bltu	r2,r8,bd84 <__udivdi3+0x568>
    b9e4:	000b883a 	mov	r5,zero
    b9e8:	0005883a 	mov	r2,zero
    b9ec:	8084d83a 	srl	r2,r16,r2
    b9f0:	01000074 	movhi	r4,1
    b9f4:	21082704 	addi	r4,r4,8348
    b9f8:	01800804 	movi	r6,32
    b9fc:	1105883a 	add	r2,r2,r4
    ba00:	10c00003 	ldbu	r3,0(r2)
    ba04:	28c7883a 	add	r3,r5,r3
    ba08:	30cbc83a 	sub	r5,r6,r3
    ba0c:	28000626 	beq	r5,zero,ba28 <__udivdi3+0x20c>
    ba10:	3145c83a 	sub	r2,r6,r5
    ba14:	e084d83a 	srl	r2,fp,r2
    ba18:	a146983a 	sll	r3,r20,r5
    ba1c:	e178983a 	sll	fp,fp,r5
    ba20:	8160983a 	sll	r16,r16,r5
    ba24:	18a8b03a 	or	r20,r3,r2
    ba28:	802ad43a 	srli	r21,r16,16
    ba2c:	a009883a 	mov	r4,r20
    ba30:	85ffffcc 	andi	r23,r16,65535
    ba34:	a80b883a 	mov	r5,r21
    ba38:	00044f80 	call	44f8 <__udivsi3>
    ba3c:	a009883a 	mov	r4,r20
    ba40:	a80b883a 	mov	r5,r21
    ba44:	102d883a 	mov	r22,r2
    ba48:	00045000 	call	4500 <__umodsi3>
    ba4c:	1004943a 	slli	r2,r2,16
    ba50:	e006d43a 	srli	r3,fp,16
    ba54:	bda3383a 	mul	r17,r23,r22
    ba58:	10c4b03a 	or	r2,r2,r3
    ba5c:	1440042e 	bgeu	r2,r17,ba70 <__udivdi3+0x254>
    ba60:	1405883a 	add	r2,r2,r16
    ba64:	b5bfffc4 	addi	r22,r22,-1
    ba68:	14000136 	bltu	r2,r16,ba70 <__udivdi3+0x254>
    ba6c:	1440d536 	bltu	r2,r17,bdc4 <__udivdi3+0x5a8>
    ba70:	1463c83a 	sub	r17,r2,r17
    ba74:	8809883a 	mov	r4,r17
    ba78:	a80b883a 	mov	r5,r21
    ba7c:	00044f80 	call	44f8 <__udivsi3>
    ba80:	8809883a 	mov	r4,r17
    ba84:	a80b883a 	mov	r5,r21
    ba88:	1029883a 	mov	r20,r2
    ba8c:	00045000 	call	4500 <__umodsi3>
    ba90:	1004943a 	slli	r2,r2,16
    ba94:	bd09383a 	mul	r4,r23,r20
    ba98:	e0ffffcc 	andi	r3,fp,65535
    ba9c:	10c4b03a 	or	r2,r2,r3
    baa0:	1100042e 	bgeu	r2,r4,bab4 <__udivdi3+0x298>
    baa4:	8085883a 	add	r2,r16,r2
    baa8:	a53fffc4 	addi	r20,r20,-1
    baac:	14000136 	bltu	r2,r16,bab4 <__udivdi3+0x298>
    bab0:	1100c736 	bltu	r2,r4,bdd0 <__udivdi3+0x5b4>
    bab4:	b004943a 	slli	r2,r22,16
    bab8:	0009883a 	mov	r4,zero
    babc:	a084b03a 	or	r2,r20,r2
    bac0:	003fb706 	br	b9a0 <__udivdi3+0x184>
    bac4:	00804034 	movhi	r2,256
    bac8:	10bfffc4 	addi	r2,r2,-1
    bacc:	11c0a436 	bltu	r2,r7,bd60 <__udivdi3+0x544>
    bad0:	01400404 	movi	r5,16
    bad4:	2805883a 	mov	r2,r5
    bad8:	003fa406 	br	b96c <__udivdi3+0x150>
    badc:	0005883a 	mov	r2,zero
    bae0:	0009883a 	mov	r4,zero
    bae4:	003fae06 	br	b9a0 <__udivdi3+0x184>
    bae8:	00804034 	movhi	r2,256
    baec:	10bfffc4 	addi	r2,r2,-1
    baf0:	1400a136 	bltu	r2,r16,bd78 <__udivdi3+0x55c>
    baf4:	01400404 	movi	r5,16
    baf8:	2805883a 	mov	r2,r5
    bafc:	003f6006 	br	b880 <__udivdi3+0x64>
    bb00:	01000044 	movi	r4,1
    bb04:	000b883a 	mov	r5,zero
    bb08:	00044f80 	call	44f8 <__udivsi3>
    bb0c:	1021883a 	mov	r16,r2
    bb10:	00bfffd4 	movui	r2,65535
    bb14:	143ff436 	bltu	r2,r16,bae8 <__udivdi3+0x2cc>
    bb18:	003f5506 	br	b870 <__udivdi3+0x54>
    bb1c:	00804034 	movhi	r2,256
    bb20:	10bfffc4 	addi	r2,r2,-1
    bb24:	12009a36 	bltu	r2,r8,bd90 <__udivdi3+0x574>
    bb28:	01400404 	movi	r5,16
    bb2c:	2805883a 	mov	r2,r5
    bb30:	003fae06 	br	b9ec <__udivdi3+0x1d0>
    bb34:	3dc5c83a 	sub	r2,r7,r23
    bb38:	35c8983a 	sll	r4,r6,r23
    bb3c:	8086d83a 	srl	r3,r16,r2
    bb40:	a0a2d83a 	srl	r17,r20,r2
    bb44:	e084d83a 	srl	r2,fp,r2
    bb48:	20eab03a 	or	r21,r4,r3
    bb4c:	a82cd43a 	srli	r22,r21,16
    bb50:	a5c6983a 	sll	r3,r20,r23
    bb54:	8809883a 	mov	r4,r17
    bb58:	b00b883a 	mov	r5,r22
    bb5c:	1886b03a 	or	r3,r3,r2
    bb60:	d8c00215 	stw	r3,8(sp)
    bb64:	00044f80 	call	44f8 <__udivsi3>
    bb68:	8809883a 	mov	r4,r17
    bb6c:	b00b883a 	mov	r5,r22
    bb70:	1029883a 	mov	r20,r2
    bb74:	00045000 	call	4500 <__umodsi3>
    bb78:	a8ffffcc 	andi	r3,r21,65535
    bb7c:	d8c00515 	stw	r3,20(sp)
    bb80:	d9000217 	ldw	r4,8(sp)
    bb84:	d9400517 	ldw	r5,20(sp)
    bb88:	1004943a 	slli	r2,r2,16
    bb8c:	2006d43a 	srli	r3,r4,16
    bb90:	85e0983a 	sll	r16,r16,r23
    bb94:	2d23383a 	mul	r17,r5,r20
    bb98:	10c4b03a 	or	r2,r2,r3
    bb9c:	dc000015 	stw	r16,0(sp)
    bba0:	1440032e 	bgeu	r2,r17,bbb0 <__udivdi3+0x394>
    bba4:	1545883a 	add	r2,r2,r21
    bba8:	a53fffc4 	addi	r20,r20,-1
    bbac:	15407f2e 	bgeu	r2,r21,bdac <__udivdi3+0x590>
    bbb0:	1463c83a 	sub	r17,r2,r17
    bbb4:	8809883a 	mov	r4,r17
    bbb8:	b00b883a 	mov	r5,r22
    bbbc:	00044f80 	call	44f8 <__udivsi3>
    bbc0:	8809883a 	mov	r4,r17
    bbc4:	b00b883a 	mov	r5,r22
    bbc8:	1021883a 	mov	r16,r2
    bbcc:	00045000 	call	4500 <__umodsi3>
    bbd0:	d8c00517 	ldw	r3,20(sp)
    bbd4:	d9000217 	ldw	r4,8(sp)
    bbd8:	1004943a 	slli	r2,r2,16
    bbdc:	1c0f383a 	mul	r7,r3,r16
    bbe0:	20ffffcc 	andi	r3,r4,65535
    bbe4:	10e2b03a 	or	r17,r2,r3
    bbe8:	89c0032e 	bgeu	r17,r7,bbf8 <__udivdi3+0x3dc>
    bbec:	8d63883a 	add	r17,r17,r21
    bbf0:	843fffc4 	addi	r16,r16,-1
    bbf4:	8d40692e 	bgeu	r17,r21,bd9c <__udivdi3+0x580>
    bbf8:	a008943a 	slli	r4,r20,16
    bbfc:	d9400017 	ldw	r5,0(sp)
    bc00:	89e3c83a 	sub	r17,r17,r7
    bc04:	8110b03a 	or	r8,r16,r4
    bc08:	280cd43a 	srli	r6,r5,16
    bc0c:	28ffffcc 	andi	r3,r5,65535
    bc10:	40bfffcc 	andi	r2,r8,65535
    bc14:	400ad43a 	srli	r5,r8,16
    bc18:	10d3383a 	mul	r9,r2,r3
    bc1c:	1185383a 	mul	r2,r2,r6
    bc20:	28c7383a 	mul	r3,r5,r3
    bc24:	4808d43a 	srli	r4,r9,16
    bc28:	298b383a 	mul	r5,r5,r6
    bc2c:	10c5883a 	add	r2,r2,r3
    bc30:	2089883a 	add	r4,r4,r2
    bc34:	20c0022e 	bgeu	r4,r3,bc40 <__udivdi3+0x424>
    bc38:	00800074 	movhi	r2,1
    bc3c:	288b883a 	add	r5,r5,r2
    bc40:	2004d43a 	srli	r2,r4,16
    bc44:	288b883a 	add	r5,r5,r2
    bc48:	89403f36 	bltu	r17,r5,bd48 <__udivdi3+0x52c>
    bc4c:	89403926 	beq	r17,r5,bd34 <__udivdi3+0x518>
    bc50:	4005883a 	mov	r2,r8
    bc54:	0009883a 	mov	r4,zero
    bc58:	003f5106 	br	b9a0 <__udivdi3+0x184>
    bc5c:	85a0983a 	sll	r16,r16,r22
    bc60:	3585c83a 	sub	r2,r6,r22
    bc64:	a0a2d83a 	srl	r17,r20,r2
    bc68:	802ad43a 	srli	r21,r16,16
    bc6c:	e084d83a 	srl	r2,fp,r2
    bc70:	a586983a 	sll	r3,r20,r22
    bc74:	8809883a 	mov	r4,r17
    bc78:	a80b883a 	mov	r5,r21
    bc7c:	1886b03a 	or	r3,r3,r2
    bc80:	d8c00115 	stw	r3,4(sp)
    bc84:	00044f80 	call	44f8 <__udivsi3>
    bc88:	8809883a 	mov	r4,r17
    bc8c:	a80b883a 	mov	r5,r21
    bc90:	d8800415 	stw	r2,16(sp)
    bc94:	00045000 	call	4500 <__umodsi3>
    bc98:	d9000117 	ldw	r4,4(sp)
    bc9c:	d9400417 	ldw	r5,16(sp)
    bca0:	1004943a 	slli	r2,r2,16
    bca4:	85ffffcc 	andi	r23,r16,65535
    bca8:	2006d43a 	srli	r3,r4,16
    bcac:	b963383a 	mul	r17,r23,r5
    bcb0:	10c4b03a 	or	r2,r2,r3
    bcb4:	1440042e 	bgeu	r2,r17,bcc8 <__udivdi3+0x4ac>
    bcb8:	297fffc4 	addi	r5,r5,-1
    bcbc:	1405883a 	add	r2,r2,r16
    bcc0:	d9400415 	stw	r5,16(sp)
    bcc4:	1400442e 	bgeu	r2,r16,bdd8 <__udivdi3+0x5bc>
    bcc8:	1463c83a 	sub	r17,r2,r17
    bccc:	8809883a 	mov	r4,r17
    bcd0:	a80b883a 	mov	r5,r21
    bcd4:	00044f80 	call	44f8 <__udivsi3>
    bcd8:	8809883a 	mov	r4,r17
    bcdc:	a80b883a 	mov	r5,r21
    bce0:	1029883a 	mov	r20,r2
    bce4:	00045000 	call	4500 <__umodsi3>
    bce8:	d9400117 	ldw	r5,4(sp)
    bcec:	1004943a 	slli	r2,r2,16
    bcf0:	bd09383a 	mul	r4,r23,r20
    bcf4:	28ffffcc 	andi	r3,r5,65535
    bcf8:	10c6b03a 	or	r3,r2,r3
    bcfc:	1900062e 	bgeu	r3,r4,bd18 <__udivdi3+0x4fc>
    bd00:	1c07883a 	add	r3,r3,r16
    bd04:	a53fffc4 	addi	r20,r20,-1
    bd08:	1c000336 	bltu	r3,r16,bd18 <__udivdi3+0x4fc>
    bd0c:	1900022e 	bgeu	r3,r4,bd18 <__udivdi3+0x4fc>
    bd10:	a53fffc4 	addi	r20,r20,-1
    bd14:	1c07883a 	add	r3,r3,r16
    bd18:	d9400417 	ldw	r5,16(sp)
    bd1c:	e5b8983a 	sll	fp,fp,r22
    bd20:	1923c83a 	sub	r17,r3,r4
    bd24:	2804943a 	slli	r2,r5,16
    bd28:	a0a8b03a 	or	r20,r20,r2
    bd2c:	dd000315 	stw	r20,12(sp)
    bd30:	003ee106 	br	b8b8 <__udivdi3+0x9c>
    bd34:	2004943a 	slli	r2,r4,16
    bd38:	e5c8983a 	sll	r4,fp,r23
    bd3c:	48ffffcc 	andi	r3,r9,65535
    bd40:	10c5883a 	add	r2,r2,r3
    bd44:	20bfc22e 	bgeu	r4,r2,bc50 <__udivdi3+0x434>
    bd48:	40bfffc4 	addi	r2,r8,-1
    bd4c:	0009883a 	mov	r4,zero
    bd50:	003f1306 	br	b9a0 <__udivdi3+0x184>
    bd54:	01400204 	movi	r5,8
    bd58:	2805883a 	mov	r2,r5
    bd5c:	003f0306 	br	b96c <__udivdi3+0x150>
    bd60:	01400604 	movi	r5,24
    bd64:	2805883a 	mov	r2,r5
    bd68:	003f0006 	br	b96c <__udivdi3+0x150>
    bd6c:	01400204 	movi	r5,8
    bd70:	2805883a 	mov	r2,r5
    bd74:	003ec206 	br	b880 <__udivdi3+0x64>
    bd78:	01400604 	movi	r5,24
    bd7c:	2805883a 	mov	r2,r5
    bd80:	003ebf06 	br	b880 <__udivdi3+0x64>
    bd84:	01400204 	movi	r5,8
    bd88:	2805883a 	mov	r2,r5
    bd8c:	003f1706 	br	b9ec <__udivdi3+0x1d0>
    bd90:	01400604 	movi	r5,24
    bd94:	2805883a 	mov	r2,r5
    bd98:	003f1406 	br	b9ec <__udivdi3+0x1d0>
    bd9c:	89ff962e 	bgeu	r17,r7,bbf8 <__udivdi3+0x3dc>
    bda0:	8d63883a 	add	r17,r17,r21
    bda4:	843fffc4 	addi	r16,r16,-1
    bda8:	003f9306 	br	bbf8 <__udivdi3+0x3dc>
    bdac:	147f802e 	bgeu	r2,r17,bbb0 <__udivdi3+0x394>
    bdb0:	a53fffc4 	addi	r20,r20,-1
    bdb4:	1545883a 	add	r2,r2,r21
    bdb8:	003f7d06 	br	bbb0 <__udivdi3+0x394>
    bdbc:	a53fffc4 	addi	r20,r20,-1
    bdc0:	003ede06 	br	b93c <__udivdi3+0x120>
    bdc4:	b5bfffc4 	addi	r22,r22,-1
    bdc8:	1405883a 	add	r2,r2,r16
    bdcc:	003f2806 	br	ba70 <__udivdi3+0x254>
    bdd0:	a53fffc4 	addi	r20,r20,-1
    bdd4:	003f3706 	br	bab4 <__udivdi3+0x298>
    bdd8:	147fbb2e 	bgeu	r2,r17,bcc8 <__udivdi3+0x4ac>
    bddc:	297fffc4 	addi	r5,r5,-1
    bde0:	1405883a 	add	r2,r2,r16
    bde4:	d9400415 	stw	r5,16(sp)
    bde8:	003fb706 	br	bcc8 <__udivdi3+0x4ac>
    bdec:	b5bfffc4 	addi	r22,r22,-1
    bdf0:	1405883a 	add	r2,r2,r16
    bdf4:	003ec006 	br	b8f8 <__udivdi3+0xdc>

0000bdf8 <__umoddi3>:
    bdf8:	defff104 	addi	sp,sp,-60
    bdfc:	dd800b15 	stw	r22,44(sp)
    be00:	dd000915 	stw	r20,36(sp)
    be04:	dc000515 	stw	r16,20(sp)
    be08:	dfc00e15 	stw	ra,56(sp)
    be0c:	df000d15 	stw	fp,52(sp)
    be10:	ddc00c15 	stw	r23,48(sp)
    be14:	dd400a15 	stw	r21,40(sp)
    be18:	dcc00815 	stw	r19,32(sp)
    be1c:	dc800715 	stw	r18,28(sp)
    be20:	dc400615 	stw	r17,24(sp)
    be24:	3021883a 	mov	r16,r6
    be28:	202d883a 	mov	r22,r4
    be2c:	2829883a 	mov	r20,r5
    be30:	38002b1e 	bne	r7,zero,bee0 <__umoddi3+0xe8>
    be34:	29805036 	bltu	r5,r6,bf78 <__umoddi3+0x180>
    be38:	30008a26 	beq	r6,zero,c064 <__umoddi3+0x26c>
    be3c:	00bfffd4 	movui	r2,65535
    be40:	14008236 	bltu	r2,r16,c04c <__umoddi3+0x254>
    be44:	00803fc4 	movi	r2,255
    be48:	14013636 	bltu	r2,r16,c324 <__umoddi3+0x52c>
    be4c:	000b883a 	mov	r5,zero
    be50:	0005883a 	mov	r2,zero
    be54:	8084d83a 	srl	r2,r16,r2
    be58:	01000074 	movhi	r4,1
    be5c:	21082704 	addi	r4,r4,8348
    be60:	01800804 	movi	r6,32
    be64:	1105883a 	add	r2,r2,r4
    be68:	10c00003 	ldbu	r3,0(r2)
    be6c:	28c7883a 	add	r3,r5,r3
    be70:	30efc83a 	sub	r23,r6,r3
    be74:	b800941e 	bne	r23,zero,c0c8 <__umoddi3+0x2d0>
    be78:	802ad43a 	srli	r21,r16,16
    be7c:	a423c83a 	sub	r17,r20,r16
    be80:	0039883a 	mov	fp,zero
    be84:	853fffcc 	andi	r20,r16,65535
    be88:	8809883a 	mov	r4,r17
    be8c:	a80b883a 	mov	r5,r21
    be90:	00044f80 	call	44f8 <__udivsi3>
    be94:	8809883a 	mov	r4,r17
    be98:	a80b883a 	mov	r5,r21
    be9c:	a0a3383a 	mul	r17,r20,r2
    bea0:	00045000 	call	4500 <__umodsi3>
    bea4:	1004943a 	slli	r2,r2,16
    bea8:	b006d43a 	srli	r3,r22,16
    beac:	10c4b03a 	or	r2,r2,r3
    beb0:	1440032e 	bgeu	r2,r17,bec0 <__umoddi3+0xc8>
    beb4:	1405883a 	add	r2,r2,r16
    beb8:	14000136 	bltu	r2,r16,bec0 <__umoddi3+0xc8>
    bebc:	14413536 	bltu	r2,r17,c394 <__umoddi3+0x59c>
    bec0:	1463c83a 	sub	r17,r2,r17
    bec4:	8809883a 	mov	r4,r17
    bec8:	a80b883a 	mov	r5,r21
    becc:	00044f80 	call	44f8 <__udivsi3>
    bed0:	8809883a 	mov	r4,r17
    bed4:	a0a3383a 	mul	r17,r20,r2
    bed8:	a80b883a 	mov	r5,r21
    bedc:	00004d06 	br	c014 <__umoddi3+0x21c>
    bee0:	380d883a 	mov	r6,r7
    bee4:	29c0102e 	bgeu	r5,r7,bf28 <__umoddi3+0x130>
    bee8:	2011883a 	mov	r8,r4
    beec:	2813883a 	mov	r9,r5
    bef0:	4005883a 	mov	r2,r8
    bef4:	4807883a 	mov	r3,r9
    bef8:	dfc00e17 	ldw	ra,56(sp)
    befc:	df000d17 	ldw	fp,52(sp)
    bf00:	ddc00c17 	ldw	r23,48(sp)
    bf04:	dd800b17 	ldw	r22,44(sp)
    bf08:	dd400a17 	ldw	r21,40(sp)
    bf0c:	dd000917 	ldw	r20,36(sp)
    bf10:	dcc00817 	ldw	r19,32(sp)
    bf14:	dc800717 	ldw	r18,28(sp)
    bf18:	dc400617 	ldw	r17,24(sp)
    bf1c:	dc000517 	ldw	r16,20(sp)
    bf20:	dec00f04 	addi	sp,sp,60
    bf24:	f800283a 	ret
    bf28:	00bfffd4 	movui	r2,65535
    bf2c:	11c05a36 	bltu	r2,r7,c098 <__umoddi3+0x2a0>
    bf30:	00803fc4 	movi	r2,255
    bf34:	11c0fe36 	bltu	r2,r7,c330 <__umoddi3+0x538>
    bf38:	000b883a 	mov	r5,zero
    bf3c:	0005883a 	mov	r2,zero
    bf40:	3084d83a 	srl	r2,r6,r2
    bf44:	01000074 	movhi	r4,1
    bf48:	21082704 	addi	r4,r4,8348
    bf4c:	01c00804 	movi	r7,32
    bf50:	1105883a 	add	r2,r2,r4
    bf54:	10c00003 	ldbu	r3,0(r2)
    bf58:	28c7883a 	add	r3,r5,r3
    bf5c:	38ebc83a 	sub	r21,r7,r3
    bf60:	a800851e 	bne	r21,zero,c178 <__umoddi3+0x380>
    bf64:	35005236 	bltu	r6,r20,c0b0 <__umoddi3+0x2b8>
    bf68:	b400512e 	bgeu	r22,r16,c0b0 <__umoddi3+0x2b8>
    bf6c:	b011883a 	mov	r8,r22
    bf70:	a013883a 	mov	r9,r20
    bf74:	003fde06 	br	bef0 <__umoddi3+0xf8>
    bf78:	00bfffd4 	movui	r2,65535
    bf7c:	11804036 	bltu	r2,r6,c080 <__umoddi3+0x288>
    bf80:	00803fc4 	movi	r2,255
    bf84:	1180ed36 	bltu	r2,r6,c33c <__umoddi3+0x544>
    bf88:	000b883a 	mov	r5,zero
    bf8c:	0005883a 	mov	r2,zero
    bf90:	8084d83a 	srl	r2,r16,r2
    bf94:	01000074 	movhi	r4,1
    bf98:	21082704 	addi	r4,r4,8348
    bf9c:	01800804 	movi	r6,32
    bfa0:	1105883a 	add	r2,r2,r4
    bfa4:	10c00003 	ldbu	r3,0(r2)
    bfa8:	28c7883a 	add	r3,r5,r3
    bfac:	30c7c83a 	sub	r3,r6,r3
    bfb0:	1800bf1e 	bne	r3,zero,c2b0 <__umoddi3+0x4b8>
    bfb4:	0039883a 	mov	fp,zero
    bfb8:	802ad43a 	srli	r21,r16,16
    bfbc:	a009883a 	mov	r4,r20
    bfc0:	85ffffcc 	andi	r23,r16,65535
    bfc4:	a80b883a 	mov	r5,r21
    bfc8:	00044f80 	call	44f8 <__udivsi3>
    bfcc:	a009883a 	mov	r4,r20
    bfd0:	a80b883a 	mov	r5,r21
    bfd4:	b8a3383a 	mul	r17,r23,r2
    bfd8:	00045000 	call	4500 <__umodsi3>
    bfdc:	1004943a 	slli	r2,r2,16
    bfe0:	b006d43a 	srli	r3,r22,16
    bfe4:	10c4b03a 	or	r2,r2,r3
    bfe8:	1440032e 	bgeu	r2,r17,bff8 <__umoddi3+0x200>
    bfec:	1405883a 	add	r2,r2,r16
    bff0:	14000136 	bltu	r2,r16,bff8 <__umoddi3+0x200>
    bff4:	1440e536 	bltu	r2,r17,c38c <__umoddi3+0x594>
    bff8:	1463c83a 	sub	r17,r2,r17
    bffc:	8809883a 	mov	r4,r17
    c000:	a80b883a 	mov	r5,r21
    c004:	00044f80 	call	44f8 <__udivsi3>
    c008:	8809883a 	mov	r4,r17
    c00c:	b8a3383a 	mul	r17,r23,r2
    c010:	a80b883a 	mov	r5,r21
    c014:	00045000 	call	4500 <__umodsi3>
    c018:	1004943a 	slli	r2,r2,16
    c01c:	b0ffffcc 	andi	r3,r22,65535
    c020:	10c4b03a 	or	r2,r2,r3
    c024:	1440042e 	bgeu	r2,r17,c038 <__umoddi3+0x240>
    c028:	1405883a 	add	r2,r2,r16
    c02c:	14000236 	bltu	r2,r16,c038 <__umoddi3+0x240>
    c030:	1440012e 	bgeu	r2,r17,c038 <__umoddi3+0x240>
    c034:	1405883a 	add	r2,r2,r16
    c038:	1445c83a 	sub	r2,r2,r17
    c03c:	1724d83a 	srl	r18,r2,fp
    c040:	0013883a 	mov	r9,zero
    c044:	9011883a 	mov	r8,r18
    c048:	003fa906 	br	bef0 <__umoddi3+0xf8>
    c04c:	00804034 	movhi	r2,256
    c050:	10bfffc4 	addi	r2,r2,-1
    c054:	1400b036 	bltu	r2,r16,c318 <__umoddi3+0x520>
    c058:	01400404 	movi	r5,16
    c05c:	2805883a 	mov	r2,r5
    c060:	003f7c06 	br	be54 <__umoddi3+0x5c>
    c064:	01000044 	movi	r4,1
    c068:	000b883a 	mov	r5,zero
    c06c:	00044f80 	call	44f8 <__udivsi3>
    c070:	1021883a 	mov	r16,r2
    c074:	00bfffd4 	movui	r2,65535
    c078:	143ff436 	bltu	r2,r16,c04c <__umoddi3+0x254>
    c07c:	003f7106 	br	be44 <__umoddi3+0x4c>
    c080:	00804034 	movhi	r2,256
    c084:	10bfffc4 	addi	r2,r2,-1
    c088:	1180af36 	bltu	r2,r6,c348 <__umoddi3+0x550>
    c08c:	01400404 	movi	r5,16
    c090:	2805883a 	mov	r2,r5
    c094:	003fbe06 	br	bf90 <__umoddi3+0x198>
    c098:	00804034 	movhi	r2,256
    c09c:	10bfffc4 	addi	r2,r2,-1
    c0a0:	11c0ac36 	bltu	r2,r7,c354 <__umoddi3+0x55c>
    c0a4:	01400404 	movi	r5,16
    c0a8:	2805883a 	mov	r2,r5
    c0ac:	003fa406 	br	bf40 <__umoddi3+0x148>
    c0b0:	b409c83a 	sub	r4,r22,r16
    c0b4:	b105803a 	cmpltu	r2,r22,r4
    c0b8:	a187c83a 	sub	r3,r20,r6
    c0bc:	18a9c83a 	sub	r20,r3,r2
    c0c0:	202d883a 	mov	r22,r4
    c0c4:	003fa906 	br	bf6c <__umoddi3+0x174>
    c0c8:	85e0983a 	sll	r16,r16,r23
    c0cc:	35c5c83a 	sub	r2,r6,r23
    c0d0:	a0a2d83a 	srl	r17,r20,r2
    c0d4:	802ad43a 	srli	r21,r16,16
    c0d8:	b084d83a 	srl	r2,r22,r2
    c0dc:	a5c6983a 	sll	r3,r20,r23
    c0e0:	8809883a 	mov	r4,r17
    c0e4:	a80b883a 	mov	r5,r21
    c0e8:	1886b03a 	or	r3,r3,r2
    c0ec:	d8c00115 	stw	r3,4(sp)
    c0f0:	853fffcc 	andi	r20,r16,65535
    c0f4:	00044f80 	call	44f8 <__udivsi3>
    c0f8:	8809883a 	mov	r4,r17
    c0fc:	a80b883a 	mov	r5,r21
    c100:	a0a3383a 	mul	r17,r20,r2
    c104:	00045000 	call	4500 <__umodsi3>
    c108:	d9000117 	ldw	r4,4(sp)
    c10c:	1004943a 	slli	r2,r2,16
    c110:	b839883a 	mov	fp,r23
    c114:	2006d43a 	srli	r3,r4,16
    c118:	10c4b03a 	or	r2,r2,r3
    c11c:	1440022e 	bgeu	r2,r17,c128 <__umoddi3+0x330>
    c120:	1405883a 	add	r2,r2,r16
    c124:	1400962e 	bgeu	r2,r16,c380 <__umoddi3+0x588>
    c128:	1463c83a 	sub	r17,r2,r17
    c12c:	8809883a 	mov	r4,r17
    c130:	a80b883a 	mov	r5,r21
    c134:	00044f80 	call	44f8 <__udivsi3>
    c138:	8809883a 	mov	r4,r17
    c13c:	a80b883a 	mov	r5,r21
    c140:	a0a3383a 	mul	r17,r20,r2
    c144:	00045000 	call	4500 <__umodsi3>
    c148:	d9400117 	ldw	r5,4(sp)
    c14c:	1004943a 	slli	r2,r2,16
    c150:	28ffffcc 	andi	r3,r5,65535
    c154:	10c4b03a 	or	r2,r2,r3
    c158:	1440042e 	bgeu	r2,r17,c16c <__umoddi3+0x374>
    c15c:	1405883a 	add	r2,r2,r16
    c160:	14000236 	bltu	r2,r16,c16c <__umoddi3+0x374>
    c164:	1440012e 	bgeu	r2,r17,c16c <__umoddi3+0x374>
    c168:	1405883a 	add	r2,r2,r16
    c16c:	b5ec983a 	sll	r22,r22,r23
    c170:	1463c83a 	sub	r17,r2,r17
    c174:	003f4406 	br	be88 <__umoddi3+0x90>
    c178:	3d4fc83a 	sub	r7,r7,r21
    c17c:	3546983a 	sll	r3,r6,r21
    c180:	81c4d83a 	srl	r2,r16,r7
    c184:	a1e2d83a 	srl	r17,r20,r7
    c188:	a54c983a 	sll	r6,r20,r21
    c18c:	18aeb03a 	or	r23,r3,r2
    c190:	b828d43a 	srli	r20,r23,16
    c194:	b1c4d83a 	srl	r2,r22,r7
    c198:	8809883a 	mov	r4,r17
    c19c:	a00b883a 	mov	r5,r20
    c1a0:	308cb03a 	or	r6,r6,r2
    c1a4:	d9c00315 	stw	r7,12(sp)
    c1a8:	d9800215 	stw	r6,8(sp)
    c1ac:	00044f80 	call	44f8 <__udivsi3>
    c1b0:	8809883a 	mov	r4,r17
    c1b4:	a00b883a 	mov	r5,r20
    c1b8:	1039883a 	mov	fp,r2
    c1bc:	00045000 	call	4500 <__umodsi3>
    c1c0:	b8ffffcc 	andi	r3,r23,65535
    c1c4:	d8c00415 	stw	r3,16(sp)
    c1c8:	d9000217 	ldw	r4,8(sp)
    c1cc:	d9400417 	ldw	r5,16(sp)
    c1d0:	1004943a 	slli	r2,r2,16
    c1d4:	2006d43a 	srli	r3,r4,16
    c1d8:	8560983a 	sll	r16,r16,r21
    c1dc:	2f23383a 	mul	r17,r5,fp
    c1e0:	10c4b03a 	or	r2,r2,r3
    c1e4:	dc000015 	stw	r16,0(sp)
    c1e8:	b56c983a 	sll	r22,r22,r21
    c1ec:	1440032e 	bgeu	r2,r17,c1fc <__umoddi3+0x404>
    c1f0:	15c5883a 	add	r2,r2,r23
    c1f4:	e73fffc4 	addi	fp,fp,-1
    c1f8:	15c05d2e 	bgeu	r2,r23,c370 <__umoddi3+0x578>
    c1fc:	1463c83a 	sub	r17,r2,r17
    c200:	8809883a 	mov	r4,r17
    c204:	a00b883a 	mov	r5,r20
    c208:	00044f80 	call	44f8 <__udivsi3>
    c20c:	8809883a 	mov	r4,r17
    c210:	a00b883a 	mov	r5,r20
    c214:	1021883a 	mov	r16,r2
    c218:	00045000 	call	4500 <__umodsi3>
    c21c:	d8c00417 	ldw	r3,16(sp)
    c220:	d9000217 	ldw	r4,8(sp)
    c224:	1004943a 	slli	r2,r2,16
    c228:	1c23383a 	mul	r17,r3,r16
    c22c:	20ffffcc 	andi	r3,r4,65535
    c230:	10ceb03a 	or	r7,r2,r3
    c234:	3c40032e 	bgeu	r7,r17,c244 <__umoddi3+0x44c>
    c238:	3dcf883a 	add	r7,r7,r23
    c23c:	843fffc4 	addi	r16,r16,-1
    c240:	3dc0472e 	bgeu	r7,r23,c360 <__umoddi3+0x568>
    c244:	e004943a 	slli	r2,fp,16
    c248:	d9400017 	ldw	r5,0(sp)
    c24c:	3c4fc83a 	sub	r7,r7,r17
    c250:	8084b03a 	or	r2,r16,r2
    c254:	28ffffcc 	andi	r3,r5,65535
    c258:	280cd43a 	srli	r6,r5,16
    c25c:	100ad43a 	srli	r5,r2,16
    c260:	10bfffcc 	andi	r2,r2,65535
    c264:	10d1383a 	mul	r8,r2,r3
    c268:	28c7383a 	mul	r3,r5,r3
    c26c:	1185383a 	mul	r2,r2,r6
    c270:	4008d43a 	srli	r4,r8,16
    c274:	298b383a 	mul	r5,r5,r6
    c278:	10c5883a 	add	r2,r2,r3
    c27c:	2089883a 	add	r4,r4,r2
    c280:	20c0022e 	bgeu	r4,r3,c28c <__umoddi3+0x494>
    c284:	00800074 	movhi	r2,1
    c288:	288b883a 	add	r5,r5,r2
    c28c:	2004d43a 	srli	r2,r4,16
    c290:	2008943a 	slli	r4,r4,16
    c294:	40ffffcc 	andi	r3,r8,65535
    c298:	288b883a 	add	r5,r5,r2
    c29c:	20c9883a 	add	r4,r4,r3
    c2a0:	39400b36 	bltu	r7,r5,c2d0 <__umoddi3+0x4d8>
    c2a4:	39403d26 	beq	r7,r5,c39c <__umoddi3+0x5a4>
    c2a8:	394bc83a 	sub	r5,r7,r5
    c2ac:	00000f06 	br	c2ec <__umoddi3+0x4f4>
    c2b0:	30c5c83a 	sub	r2,r6,r3
    c2b4:	1839883a 	mov	fp,r3
    c2b8:	b084d83a 	srl	r2,r22,r2
    c2bc:	a0c6983a 	sll	r3,r20,r3
    c2c0:	8720983a 	sll	r16,r16,fp
    c2c4:	b72c983a 	sll	r22,r22,fp
    c2c8:	18a8b03a 	or	r20,r3,r2
    c2cc:	003f3a06 	br	bfb8 <__umoddi3+0x1c0>
    c2d0:	d8c00017 	ldw	r3,0(sp)
    c2d4:	20c5c83a 	sub	r2,r4,r3
    c2d8:	2089803a 	cmpltu	r4,r4,r2
    c2dc:	2dc7c83a 	sub	r3,r5,r23
    c2e0:	1907c83a 	sub	r3,r3,r4
    c2e4:	38cbc83a 	sub	r5,r7,r3
    c2e8:	1009883a 	mov	r4,r2
    c2ec:	b105c83a 	sub	r2,r22,r4
    c2f0:	b087803a 	cmpltu	r3,r22,r2
    c2f4:	28c7c83a 	sub	r3,r5,r3
    c2f8:	d9400317 	ldw	r5,12(sp)
    c2fc:	1544d83a 	srl	r2,r2,r21
    c300:	1948983a 	sll	r4,r3,r5
    c304:	1d46d83a 	srl	r3,r3,r21
    c308:	20a4b03a 	or	r18,r4,r2
    c30c:	9011883a 	mov	r8,r18
    c310:	1813883a 	mov	r9,r3
    c314:	003ef606 	br	bef0 <__umoddi3+0xf8>
    c318:	01400604 	movi	r5,24
    c31c:	2805883a 	mov	r2,r5
    c320:	003ecc06 	br	be54 <__umoddi3+0x5c>
    c324:	01400204 	movi	r5,8
    c328:	2805883a 	mov	r2,r5
    c32c:	003ec906 	br	be54 <__umoddi3+0x5c>
    c330:	01400204 	movi	r5,8
    c334:	2805883a 	mov	r2,r5
    c338:	003f0106 	br	bf40 <__umoddi3+0x148>
    c33c:	01400204 	movi	r5,8
    c340:	2805883a 	mov	r2,r5
    c344:	003f1206 	br	bf90 <__umoddi3+0x198>
    c348:	01400604 	movi	r5,24
    c34c:	2805883a 	mov	r2,r5
    c350:	003f0f06 	br	bf90 <__umoddi3+0x198>
    c354:	01400604 	movi	r5,24
    c358:	2805883a 	mov	r2,r5
    c35c:	003ef806 	br	bf40 <__umoddi3+0x148>
    c360:	3c7fb82e 	bgeu	r7,r17,c244 <__umoddi3+0x44c>
    c364:	843fffc4 	addi	r16,r16,-1
    c368:	3dcf883a 	add	r7,r7,r23
    c36c:	003fb506 	br	c244 <__umoddi3+0x44c>
    c370:	147fa22e 	bgeu	r2,r17,c1fc <__umoddi3+0x404>
    c374:	e73fffc4 	addi	fp,fp,-1
    c378:	15c5883a 	add	r2,r2,r23
    c37c:	003f9f06 	br	c1fc <__umoddi3+0x404>
    c380:	147f692e 	bgeu	r2,r17,c128 <__umoddi3+0x330>
    c384:	1405883a 	add	r2,r2,r16
    c388:	003f6706 	br	c128 <__umoddi3+0x330>
    c38c:	1405883a 	add	r2,r2,r16
    c390:	003f1906 	br	bff8 <__umoddi3+0x200>
    c394:	1405883a 	add	r2,r2,r16
    c398:	003ec906 	br	bec0 <__umoddi3+0xc8>
    c39c:	b13fcc36 	bltu	r22,r4,c2d0 <__umoddi3+0x4d8>
    c3a0:	000b883a 	mov	r5,zero
    c3a4:	003fd106 	br	c2ec <__umoddi3+0x4f4>

0000c3a8 <_fpadd_parts>:
    c3a8:	defff804 	addi	sp,sp,-32
    c3ac:	dcc00315 	stw	r19,12(sp)
    c3b0:	2027883a 	mov	r19,r4
    c3b4:	21000017 	ldw	r4,0(r4)
    c3b8:	00c00044 	movi	r3,1
    c3bc:	dd400515 	stw	r21,20(sp)
    c3c0:	dd000415 	stw	r20,16(sp)
    c3c4:	ddc00715 	stw	r23,28(sp)
    c3c8:	dd800615 	stw	r22,24(sp)
    c3cc:	dc800215 	stw	r18,8(sp)
    c3d0:	dc400115 	stw	r17,4(sp)
    c3d4:	dc000015 	stw	r16,0(sp)
    c3d8:	282b883a 	mov	r21,r5
    c3dc:	3029883a 	mov	r20,r6
    c3e0:	1900632e 	bgeu	r3,r4,c570 <_fpadd_parts+0x1c8>
    c3e4:	28800017 	ldw	r2,0(r5)
    c3e8:	1880812e 	bgeu	r3,r2,c5f0 <_fpadd_parts+0x248>
    c3ec:	00c00104 	movi	r3,4
    c3f0:	20c0dc26 	beq	r4,r3,c764 <_fpadd_parts+0x3bc>
    c3f4:	10c07e26 	beq	r2,r3,c5f0 <_fpadd_parts+0x248>
    c3f8:	00c00084 	movi	r3,2
    c3fc:	10c06726 	beq	r2,r3,c59c <_fpadd_parts+0x1f4>
    c400:	20c07b26 	beq	r4,r3,c5f0 <_fpadd_parts+0x248>
    c404:	9dc00217 	ldw	r23,8(r19)
    c408:	28c00217 	ldw	r3,8(r5)
    c40c:	9c400317 	ldw	r17,12(r19)
    c410:	2bc00317 	ldw	r15,12(r5)
    c414:	b8cdc83a 	sub	r6,r23,r3
    c418:	9c800417 	ldw	r18,16(r19)
    c41c:	2c000417 	ldw	r16,16(r5)
    c420:	3009883a 	mov	r4,r6
    c424:	30009716 	blt	r6,zero,c684 <_fpadd_parts+0x2dc>
    c428:	00800fc4 	movi	r2,63
    c42c:	11806b16 	blt	r2,r6,c5dc <_fpadd_parts+0x234>
    c430:	0100a40e 	bge	zero,r4,c6c4 <_fpadd_parts+0x31c>
    c434:	35bff804 	addi	r22,r6,-32
    c438:	b000bc16 	blt	r22,zero,c72c <_fpadd_parts+0x384>
    c43c:	8596d83a 	srl	r11,r16,r22
    c440:	0019883a 	mov	r12,zero
    c444:	0013883a 	mov	r9,zero
    c448:	01000044 	movi	r4,1
    c44c:	0015883a 	mov	r10,zero
    c450:	b000be16 	blt	r22,zero,c74c <_fpadd_parts+0x3a4>
    c454:	2590983a 	sll	r8,r4,r22
    c458:	000f883a 	mov	r7,zero
    c45c:	00bfffc4 	movi	r2,-1
    c460:	3889883a 	add	r4,r7,r2
    c464:	408b883a 	add	r5,r8,r2
    c468:	21cd803a 	cmpltu	r6,r4,r7
    c46c:	314b883a 	add	r5,r6,r5
    c470:	7904703a 	and	r2,r15,r4
    c474:	8146703a 	and	r3,r16,r5
    c478:	10c4b03a 	or	r2,r2,r3
    c47c:	10000226 	beq	r2,zero,c488 <_fpadd_parts+0xe0>
    c480:	02400044 	movi	r9,1
    c484:	0015883a 	mov	r10,zero
    c488:	5a5eb03a 	or	r15,r11,r9
    c48c:	62a0b03a 	or	r16,r12,r10
    c490:	99400117 	ldw	r5,4(r19)
    c494:	a8800117 	ldw	r2,4(r21)
    c498:	28806e26 	beq	r5,r2,c654 <_fpadd_parts+0x2ac>
    c49c:	28006626 	beq	r5,zero,c638 <_fpadd_parts+0x290>
    c4a0:	7c45c83a 	sub	r2,r15,r17
    c4a4:	7889803a 	cmpltu	r4,r15,r2
    c4a8:	8487c83a 	sub	r3,r16,r18
    c4ac:	1909c83a 	sub	r4,r3,r4
    c4b0:	100d883a 	mov	r6,r2
    c4b4:	200f883a 	mov	r7,r4
    c4b8:	38007716 	blt	r7,zero,c698 <_fpadd_parts+0x2f0>
    c4bc:	a5c00215 	stw	r23,8(r20)
    c4c0:	a1c00415 	stw	r7,16(r20)
    c4c4:	a0000115 	stw	zero,4(r20)
    c4c8:	a1800315 	stw	r6,12(r20)
    c4cc:	a2000317 	ldw	r8,12(r20)
    c4d0:	a2400417 	ldw	r9,16(r20)
    c4d4:	00bfffc4 	movi	r2,-1
    c4d8:	408b883a 	add	r5,r8,r2
    c4dc:	2a09803a 	cmpltu	r4,r5,r8
    c4e0:	488d883a 	add	r6,r9,r2
    c4e4:	01c40034 	movhi	r7,4096
    c4e8:	39ffffc4 	addi	r7,r7,-1
    c4ec:	218d883a 	add	r6,r4,r6
    c4f0:	39801736 	bltu	r7,r6,c550 <_fpadd_parts+0x1a8>
    c4f4:	31c06526 	beq	r6,r7,c68c <_fpadd_parts+0x2e4>
    c4f8:	a3000217 	ldw	r12,8(r20)
    c4fc:	4209883a 	add	r4,r8,r8
    c500:	00bfffc4 	movi	r2,-1
    c504:	220f803a 	cmpltu	r7,r4,r8
    c508:	4a4b883a 	add	r5,r9,r9
    c50c:	394f883a 	add	r7,r7,r5
    c510:	2095883a 	add	r10,r4,r2
    c514:	3897883a 	add	r11,r7,r2
    c518:	510d803a 	cmpltu	r6,r10,r4
    c51c:	6099883a 	add	r12,r12,r2
    c520:	32d7883a 	add	r11,r6,r11
    c524:	00840034 	movhi	r2,4096
    c528:	10bfffc4 	addi	r2,r2,-1
    c52c:	2011883a 	mov	r8,r4
    c530:	3813883a 	mov	r9,r7
    c534:	a1000315 	stw	r4,12(r20)
    c538:	a1c00415 	stw	r7,16(r20)
    c53c:	a3000215 	stw	r12,8(r20)
    c540:	12c00336 	bltu	r2,r11,c550 <_fpadd_parts+0x1a8>
    c544:	58bfed1e 	bne	r11,r2,c4fc <_fpadd_parts+0x154>
    c548:	00bfff84 	movi	r2,-2
    c54c:	12bfeb2e 	bgeu	r2,r10,c4fc <_fpadd_parts+0x154>
    c550:	a2800417 	ldw	r10,16(r20)
    c554:	008000c4 	movi	r2,3
    c558:	00c80034 	movhi	r3,8192
    c55c:	18ffffc4 	addi	r3,r3,-1
    c560:	a2400317 	ldw	r9,12(r20)
    c564:	a0800015 	stw	r2,0(r20)
    c568:	1a802336 	bltu	r3,r10,c5f8 <_fpadd_parts+0x250>
    c56c:	a027883a 	mov	r19,r20
    c570:	9805883a 	mov	r2,r19
    c574:	ddc00717 	ldw	r23,28(sp)
    c578:	dd800617 	ldw	r22,24(sp)
    c57c:	dd400517 	ldw	r21,20(sp)
    c580:	dd000417 	ldw	r20,16(sp)
    c584:	dcc00317 	ldw	r19,12(sp)
    c588:	dc800217 	ldw	r18,8(sp)
    c58c:	dc400117 	ldw	r17,4(sp)
    c590:	dc000017 	ldw	r16,0(sp)
    c594:	dec00804 	addi	sp,sp,32
    c598:	f800283a 	ret
    c59c:	20fff41e 	bne	r4,r3,c570 <_fpadd_parts+0x1c8>
    c5a0:	31000015 	stw	r4,0(r6)
    c5a4:	98800117 	ldw	r2,4(r19)
    c5a8:	30800115 	stw	r2,4(r6)
    c5ac:	98c00217 	ldw	r3,8(r19)
    c5b0:	30c00215 	stw	r3,8(r6)
    c5b4:	98800317 	ldw	r2,12(r19)
    c5b8:	30800315 	stw	r2,12(r6)
    c5bc:	98c00417 	ldw	r3,16(r19)
    c5c0:	30c00415 	stw	r3,16(r6)
    c5c4:	98800117 	ldw	r2,4(r19)
    c5c8:	28c00117 	ldw	r3,4(r5)
    c5cc:	3027883a 	mov	r19,r6
    c5d0:	10c4703a 	and	r2,r2,r3
    c5d4:	30800115 	stw	r2,4(r6)
    c5d8:	003fe506 	br	c570 <_fpadd_parts+0x1c8>
    c5dc:	1dc02616 	blt	r3,r23,c678 <_fpadd_parts+0x2d0>
    c5e0:	0023883a 	mov	r17,zero
    c5e4:	182f883a 	mov	r23,r3
    c5e8:	0025883a 	mov	r18,zero
    c5ec:	003fa806 	br	c490 <_fpadd_parts+0xe8>
    c5f0:	a827883a 	mov	r19,r21
    c5f4:	003fde06 	br	c570 <_fpadd_parts+0x1c8>
    c5f8:	01800044 	movi	r6,1
    c5fc:	500497fa 	slli	r2,r10,31
    c600:	4808d07a 	srli	r4,r9,1
    c604:	518ad83a 	srl	r5,r10,r6
    c608:	a2000217 	ldw	r8,8(r20)
    c60c:	1108b03a 	or	r4,r2,r4
    c610:	0007883a 	mov	r3,zero
    c614:	4984703a 	and	r2,r9,r6
    c618:	208cb03a 	or	r6,r4,r2
    c61c:	28ceb03a 	or	r7,r5,r3
    c620:	42000044 	addi	r8,r8,1
    c624:	a027883a 	mov	r19,r20
    c628:	a1c00415 	stw	r7,16(r20)
    c62c:	a2000215 	stw	r8,8(r20)
    c630:	a1800315 	stw	r6,12(r20)
    c634:	003fce06 	br	c570 <_fpadd_parts+0x1c8>
    c638:	8bc5c83a 	sub	r2,r17,r15
    c63c:	8889803a 	cmpltu	r4,r17,r2
    c640:	9407c83a 	sub	r3,r18,r16
    c644:	1909c83a 	sub	r4,r3,r4
    c648:	100d883a 	mov	r6,r2
    c64c:	200f883a 	mov	r7,r4
    c650:	003f9906 	br	c4b8 <_fpadd_parts+0x110>
    c654:	7c45883a 	add	r2,r15,r17
    c658:	13c9803a 	cmpltu	r4,r2,r15
    c65c:	8487883a 	add	r3,r16,r18
    c660:	20c9883a 	add	r4,r4,r3
    c664:	a1400115 	stw	r5,4(r20)
    c668:	a5c00215 	stw	r23,8(r20)
    c66c:	a0800315 	stw	r2,12(r20)
    c670:	a1000415 	stw	r4,16(r20)
    c674:	003fb606 	br	c550 <_fpadd_parts+0x1a8>
    c678:	001f883a 	mov	r15,zero
    c67c:	0021883a 	mov	r16,zero
    c680:	003f8306 	br	c490 <_fpadd_parts+0xe8>
    c684:	018dc83a 	sub	r6,zero,r6
    c688:	003f6706 	br	c428 <_fpadd_parts+0x80>
    c68c:	00bfff84 	movi	r2,-2
    c690:	117faf36 	bltu	r2,r5,c550 <_fpadd_parts+0x1a8>
    c694:	003f9806 	br	c4f8 <_fpadd_parts+0x150>
    c698:	0005883a 	mov	r2,zero
    c69c:	1189c83a 	sub	r4,r2,r6
    c6a0:	1105803a 	cmpltu	r2,r2,r4
    c6a4:	01cbc83a 	sub	r5,zero,r7
    c6a8:	2885c83a 	sub	r2,r5,r2
    c6ac:	01800044 	movi	r6,1
    c6b0:	a1800115 	stw	r6,4(r20)
    c6b4:	a5c00215 	stw	r23,8(r20)
    c6b8:	a1000315 	stw	r4,12(r20)
    c6bc:	a0800415 	stw	r2,16(r20)
    c6c0:	003f8206 	br	c4cc <_fpadd_parts+0x124>
    c6c4:	203f7226 	beq	r4,zero,c490 <_fpadd_parts+0xe8>
    c6c8:	35bff804 	addi	r22,r6,-32
    c6cc:	b9af883a 	add	r23,r23,r6
    c6d0:	b0003116 	blt	r22,zero,c798 <_fpadd_parts+0x3f0>
    c6d4:	959ad83a 	srl	r13,r18,r22
    c6d8:	001d883a 	mov	r14,zero
    c6dc:	000f883a 	mov	r7,zero
    c6e0:	01000044 	movi	r4,1
    c6e4:	0011883a 	mov	r8,zero
    c6e8:	b0002516 	blt	r22,zero,c780 <_fpadd_parts+0x3d8>
    c6ec:	2594983a 	sll	r10,r4,r22
    c6f0:	0013883a 	mov	r9,zero
    c6f4:	00bfffc4 	movi	r2,-1
    c6f8:	4889883a 	add	r4,r9,r2
    c6fc:	508b883a 	add	r5,r10,r2
    c700:	224d803a 	cmpltu	r6,r4,r9
    c704:	314b883a 	add	r5,r6,r5
    c708:	8904703a 	and	r2,r17,r4
    c70c:	9146703a 	and	r3,r18,r5
    c710:	10c4b03a 	or	r2,r2,r3
    c714:	10000226 	beq	r2,zero,c720 <_fpadd_parts+0x378>
    c718:	01c00044 	movi	r7,1
    c71c:	0011883a 	mov	r8,zero
    c720:	69e2b03a 	or	r17,r13,r7
    c724:	7224b03a 	or	r18,r14,r8
    c728:	003f5906 	br	c490 <_fpadd_parts+0xe8>
    c72c:	8407883a 	add	r3,r16,r16
    c730:	008007c4 	movi	r2,31
    c734:	1185c83a 	sub	r2,r2,r6
    c738:	1886983a 	sll	r3,r3,r2
    c73c:	7996d83a 	srl	r11,r15,r6
    c740:	8198d83a 	srl	r12,r16,r6
    c744:	1ad6b03a 	or	r11,r3,r11
    c748:	003f3e06 	br	c444 <_fpadd_parts+0x9c>
    c74c:	2006d07a 	srli	r3,r4,1
    c750:	008007c4 	movi	r2,31
    c754:	1185c83a 	sub	r2,r2,r6
    c758:	1890d83a 	srl	r8,r3,r2
    c75c:	218e983a 	sll	r7,r4,r6
    c760:	003f3e06 	br	c45c <_fpadd_parts+0xb4>
    c764:	113f821e 	bne	r2,r4,c570 <_fpadd_parts+0x1c8>
    c768:	28c00117 	ldw	r3,4(r5)
    c76c:	98800117 	ldw	r2,4(r19)
    c770:	10ff7f26 	beq	r2,r3,c570 <_fpadd_parts+0x1c8>
    c774:	04c00074 	movhi	r19,1
    c778:	9cc82204 	addi	r19,r19,8328
    c77c:	003f7c06 	br	c570 <_fpadd_parts+0x1c8>
    c780:	2006d07a 	srli	r3,r4,1
    c784:	008007c4 	movi	r2,31
    c788:	1185c83a 	sub	r2,r2,r6
    c78c:	1894d83a 	srl	r10,r3,r2
    c790:	2192983a 	sll	r9,r4,r6
    c794:	003fd706 	br	c6f4 <_fpadd_parts+0x34c>
    c798:	9487883a 	add	r3,r18,r18
    c79c:	008007c4 	movi	r2,31
    c7a0:	1185c83a 	sub	r2,r2,r6
    c7a4:	1886983a 	sll	r3,r3,r2
    c7a8:	899ad83a 	srl	r13,r17,r6
    c7ac:	919cd83a 	srl	r14,r18,r6
    c7b0:	1b5ab03a 	or	r13,r3,r13
    c7b4:	003fc906 	br	c6dc <_fpadd_parts+0x334>

0000c7b8 <__subdf3>:
    c7b8:	deffea04 	addi	sp,sp,-88
    c7bc:	dcc01415 	stw	r19,80(sp)
    c7c0:	dcc00404 	addi	r19,sp,16
    c7c4:	2011883a 	mov	r8,r4
    c7c8:	2813883a 	mov	r9,r5
    c7cc:	dc401315 	stw	r17,76(sp)
    c7d0:	d809883a 	mov	r4,sp
    c7d4:	980b883a 	mov	r5,r19
    c7d8:	dc400904 	addi	r17,sp,36
    c7dc:	dfc01515 	stw	ra,84(sp)
    c7e0:	da400115 	stw	r9,4(sp)
    c7e4:	d9c00315 	stw	r7,12(sp)
    c7e8:	da000015 	stw	r8,0(sp)
    c7ec:	d9800215 	stw	r6,8(sp)
    c7f0:	000d9000 	call	d900 <__unpack_d>
    c7f4:	d9000204 	addi	r4,sp,8
    c7f8:	880b883a 	mov	r5,r17
    c7fc:	000d9000 	call	d900 <__unpack_d>
    c800:	d8800a17 	ldw	r2,40(sp)
    c804:	880b883a 	mov	r5,r17
    c808:	9809883a 	mov	r4,r19
    c80c:	d9800e04 	addi	r6,sp,56
    c810:	1080005c 	xori	r2,r2,1
    c814:	d8800a15 	stw	r2,40(sp)
    c818:	000c3a80 	call	c3a8 <_fpadd_parts>
    c81c:	1009883a 	mov	r4,r2
    c820:	000d5ec0 	call	d5ec <__pack_d>
    c824:	dfc01517 	ldw	ra,84(sp)
    c828:	dcc01417 	ldw	r19,80(sp)
    c82c:	dc401317 	ldw	r17,76(sp)
    c830:	dec01604 	addi	sp,sp,88
    c834:	f800283a 	ret

0000c838 <__adddf3>:
    c838:	deffea04 	addi	sp,sp,-88
    c83c:	dcc01415 	stw	r19,80(sp)
    c840:	dcc00404 	addi	r19,sp,16
    c844:	2011883a 	mov	r8,r4
    c848:	2813883a 	mov	r9,r5
    c84c:	dc401315 	stw	r17,76(sp)
    c850:	d809883a 	mov	r4,sp
    c854:	980b883a 	mov	r5,r19
    c858:	dc400904 	addi	r17,sp,36
    c85c:	dfc01515 	stw	ra,84(sp)
    c860:	da400115 	stw	r9,4(sp)
    c864:	d9c00315 	stw	r7,12(sp)
    c868:	da000015 	stw	r8,0(sp)
    c86c:	d9800215 	stw	r6,8(sp)
    c870:	000d9000 	call	d900 <__unpack_d>
    c874:	d9000204 	addi	r4,sp,8
    c878:	880b883a 	mov	r5,r17
    c87c:	000d9000 	call	d900 <__unpack_d>
    c880:	d9800e04 	addi	r6,sp,56
    c884:	9809883a 	mov	r4,r19
    c888:	880b883a 	mov	r5,r17
    c88c:	000c3a80 	call	c3a8 <_fpadd_parts>
    c890:	1009883a 	mov	r4,r2
    c894:	000d5ec0 	call	d5ec <__pack_d>
    c898:	dfc01517 	ldw	ra,84(sp)
    c89c:	dcc01417 	ldw	r19,80(sp)
    c8a0:	dc401317 	ldw	r17,76(sp)
    c8a4:	dec01604 	addi	sp,sp,88
    c8a8:	f800283a 	ret

0000c8ac <__muldf3>:
    c8ac:	deffe004 	addi	sp,sp,-128
    c8b0:	dc401815 	stw	r17,96(sp)
    c8b4:	dc400404 	addi	r17,sp,16
    c8b8:	2011883a 	mov	r8,r4
    c8bc:	2813883a 	mov	r9,r5
    c8c0:	dc001715 	stw	r16,92(sp)
    c8c4:	d809883a 	mov	r4,sp
    c8c8:	880b883a 	mov	r5,r17
    c8cc:	dc000904 	addi	r16,sp,36
    c8d0:	dfc01f15 	stw	ra,124(sp)
    c8d4:	da400115 	stw	r9,4(sp)
    c8d8:	d9c00315 	stw	r7,12(sp)
    c8dc:	da000015 	stw	r8,0(sp)
    c8e0:	d9800215 	stw	r6,8(sp)
    c8e4:	ddc01e15 	stw	r23,120(sp)
    c8e8:	dd801d15 	stw	r22,116(sp)
    c8ec:	dd401c15 	stw	r21,112(sp)
    c8f0:	dd001b15 	stw	r20,108(sp)
    c8f4:	dcc01a15 	stw	r19,104(sp)
    c8f8:	dc801915 	stw	r18,100(sp)
    c8fc:	000d9000 	call	d900 <__unpack_d>
    c900:	d9000204 	addi	r4,sp,8
    c904:	800b883a 	mov	r5,r16
    c908:	000d9000 	call	d900 <__unpack_d>
    c90c:	d9000417 	ldw	r4,16(sp)
    c910:	00800044 	movi	r2,1
    c914:	1100102e 	bgeu	r2,r4,c958 <__muldf3+0xac>
    c918:	d8c00917 	ldw	r3,36(sp)
    c91c:	10c0062e 	bgeu	r2,r3,c938 <__muldf3+0x8c>
    c920:	00800104 	movi	r2,4
    c924:	20800a26 	beq	r4,r2,c950 <__muldf3+0xa4>
    c928:	1880cc26 	beq	r3,r2,cc5c <__muldf3+0x3b0>
    c92c:	00800084 	movi	r2,2
    c930:	20800926 	beq	r4,r2,c958 <__muldf3+0xac>
    c934:	1880191e 	bne	r3,r2,c99c <__muldf3+0xf0>
    c938:	d8c00a17 	ldw	r3,40(sp)
    c93c:	d8800517 	ldw	r2,20(sp)
    c940:	8009883a 	mov	r4,r16
    c944:	10c4c03a 	cmpne	r2,r2,r3
    c948:	d8800a15 	stw	r2,40(sp)
    c94c:	00000706 	br	c96c <__muldf3+0xc0>
    c950:	00800084 	movi	r2,2
    c954:	1880c326 	beq	r3,r2,cc64 <__muldf3+0x3b8>
    c958:	d8800517 	ldw	r2,20(sp)
    c95c:	d8c00a17 	ldw	r3,40(sp)
    c960:	8809883a 	mov	r4,r17
    c964:	10c4c03a 	cmpne	r2,r2,r3
    c968:	d8800515 	stw	r2,20(sp)
    c96c:	000d5ec0 	call	d5ec <__pack_d>
    c970:	dfc01f17 	ldw	ra,124(sp)
    c974:	ddc01e17 	ldw	r23,120(sp)
    c978:	dd801d17 	ldw	r22,116(sp)
    c97c:	dd401c17 	ldw	r21,112(sp)
    c980:	dd001b17 	ldw	r20,108(sp)
    c984:	dcc01a17 	ldw	r19,104(sp)
    c988:	dc801917 	ldw	r18,100(sp)
    c98c:	dc401817 	ldw	r17,96(sp)
    c990:	dc001717 	ldw	r16,92(sp)
    c994:	dec02004 	addi	sp,sp,128
    c998:	f800283a 	ret
    c99c:	dd800717 	ldw	r22,28(sp)
    c9a0:	dc800c17 	ldw	r18,48(sp)
    c9a4:	002b883a 	mov	r21,zero
    c9a8:	0023883a 	mov	r17,zero
    c9ac:	a80b883a 	mov	r5,r21
    c9b0:	b00d883a 	mov	r6,r22
    c9b4:	880f883a 	mov	r7,r17
    c9b8:	ddc00817 	ldw	r23,32(sp)
    c9bc:	dcc00d17 	ldw	r19,52(sp)
    c9c0:	9009883a 	mov	r4,r18
    c9c4:	000d4d40 	call	d4d4 <__muldi3>
    c9c8:	001b883a 	mov	r13,zero
    c9cc:	680f883a 	mov	r7,r13
    c9d0:	b009883a 	mov	r4,r22
    c9d4:	000b883a 	mov	r5,zero
    c9d8:	980d883a 	mov	r6,r19
    c9dc:	b82d883a 	mov	r22,r23
    c9e0:	002f883a 	mov	r23,zero
    c9e4:	db401615 	stw	r13,88(sp)
    c9e8:	d8801315 	stw	r2,76(sp)
    c9ec:	d8c01415 	stw	r3,80(sp)
    c9f0:	dcc01515 	stw	r19,84(sp)
    c9f4:	000d4d40 	call	d4d4 <__muldi3>
    c9f8:	b00d883a 	mov	r6,r22
    c9fc:	000b883a 	mov	r5,zero
    ca00:	9009883a 	mov	r4,r18
    ca04:	b80f883a 	mov	r7,r23
    ca08:	1021883a 	mov	r16,r2
    ca0c:	1823883a 	mov	r17,r3
    ca10:	000d4d40 	call	d4d4 <__muldi3>
    ca14:	8085883a 	add	r2,r16,r2
    ca18:	140d803a 	cmpltu	r6,r2,r16
    ca1c:	88c7883a 	add	r3,r17,r3
    ca20:	30cd883a 	add	r6,r6,r3
    ca24:	1029883a 	mov	r20,r2
    ca28:	302b883a 	mov	r21,r6
    ca2c:	da801317 	ldw	r10,76(sp)
    ca30:	dac01417 	ldw	r11,80(sp)
    ca34:	db001517 	ldw	r12,84(sp)
    ca38:	db401617 	ldw	r13,88(sp)
    ca3c:	3440612e 	bgeu	r6,r17,cbc4 <__muldf3+0x318>
    ca40:	0009883a 	mov	r4,zero
    ca44:	5105883a 	add	r2,r10,r4
    ca48:	128d803a 	cmpltu	r6,r2,r10
    ca4c:	5d07883a 	add	r3,r11,r20
    ca50:	30cd883a 	add	r6,r6,r3
    ca54:	0021883a 	mov	r16,zero
    ca58:	04400044 	movi	r17,1
    ca5c:	1025883a 	mov	r18,r2
    ca60:	3027883a 	mov	r19,r6
    ca64:	32c06236 	bltu	r6,r11,cbf0 <__muldf3+0x344>
    ca68:	59807a26 	beq	r11,r6,cc54 <__muldf3+0x3a8>
    ca6c:	680b883a 	mov	r5,r13
    ca70:	b80f883a 	mov	r7,r23
    ca74:	6009883a 	mov	r4,r12
    ca78:	b00d883a 	mov	r6,r22
    ca7c:	000d4d40 	call	d4d4 <__muldi3>
    ca80:	1009883a 	mov	r4,r2
    ca84:	000f883a 	mov	r7,zero
    ca88:	1545883a 	add	r2,r2,r21
    ca8c:	1111803a 	cmpltu	r8,r2,r4
    ca90:	19c7883a 	add	r3,r3,r7
    ca94:	40c7883a 	add	r3,r8,r3
    ca98:	88cb883a 	add	r5,r17,r3
    ca9c:	d8c00617 	ldw	r3,24(sp)
    caa0:	8089883a 	add	r4,r16,r2
    caa4:	d8800b17 	ldw	r2,44(sp)
    caa8:	18c00104 	addi	r3,r3,4
    caac:	240d803a 	cmpltu	r6,r4,r16
    cab0:	10c7883a 	add	r3,r2,r3
    cab4:	2013883a 	mov	r9,r4
    cab8:	d8800a17 	ldw	r2,40(sp)
    cabc:	d9000517 	ldw	r4,20(sp)
    cac0:	314d883a 	add	r6,r6,r5
    cac4:	3015883a 	mov	r10,r6
    cac8:	2088c03a 	cmpne	r4,r4,r2
    cacc:	00880034 	movhi	r2,8192
    cad0:	10bfffc4 	addi	r2,r2,-1
    cad4:	d9000f15 	stw	r4,60(sp)
    cad8:	d8c01015 	stw	r3,64(sp)
    cadc:	1180162e 	bgeu	r2,r6,cb38 <__muldf3+0x28c>
    cae0:	1811883a 	mov	r8,r3
    cae4:	101f883a 	mov	r15,r2
    cae8:	980497fa 	slli	r2,r19,31
    caec:	9016d07a 	srli	r11,r18,1
    caf0:	500697fa 	slli	r3,r10,31
    caf4:	480cd07a 	srli	r6,r9,1
    caf8:	500ed07a 	srli	r7,r10,1
    cafc:	12d6b03a 	or	r11,r2,r11
    cb00:	00800044 	movi	r2,1
    cb04:	198cb03a 	or	r6,r3,r6
    cb08:	4888703a 	and	r4,r9,r2
    cb0c:	9818d07a 	srli	r12,r19,1
    cb10:	001b883a 	mov	r13,zero
    cb14:	03a00034 	movhi	r14,32768
    cb18:	3013883a 	mov	r9,r6
    cb1c:	3815883a 	mov	r10,r7
    cb20:	4091883a 	add	r8,r8,r2
    cb24:	20000226 	beq	r4,zero,cb30 <__muldf3+0x284>
    cb28:	5b64b03a 	or	r18,r11,r13
    cb2c:	63a6b03a 	or	r19,r12,r14
    cb30:	7abfed36 	bltu	r15,r10,cae8 <__muldf3+0x23c>
    cb34:	da001015 	stw	r8,64(sp)
    cb38:	00840034 	movhi	r2,4096
    cb3c:	10bfffc4 	addi	r2,r2,-1
    cb40:	12801436 	bltu	r2,r10,cb94 <__muldf3+0x2e8>
    cb44:	da001017 	ldw	r8,64(sp)
    cb48:	101f883a 	mov	r15,r2
    cb4c:	4a45883a 	add	r2,r9,r9
    cb50:	124d803a 	cmpltu	r6,r2,r9
    cb54:	5287883a 	add	r3,r10,r10
    cb58:	9497883a 	add	r11,r18,r18
    cb5c:	5c8f803a 	cmpltu	r7,r11,r18
    cb60:	9cd9883a 	add	r12,r19,r19
    cb64:	01000044 	movi	r4,1
    cb68:	30cd883a 	add	r6,r6,r3
    cb6c:	3b0f883a 	add	r7,r7,r12
    cb70:	423fffc4 	addi	r8,r8,-1
    cb74:	1013883a 	mov	r9,r2
    cb78:	3015883a 	mov	r10,r6
    cb7c:	111ab03a 	or	r13,r2,r4
    cb80:	98003016 	blt	r19,zero,cc44 <__muldf3+0x398>
    cb84:	5825883a 	mov	r18,r11
    cb88:	3827883a 	mov	r19,r7
    cb8c:	7abfef2e 	bgeu	r15,r10,cb4c <__muldf3+0x2a0>
    cb90:	da001015 	stw	r8,64(sp)
    cb94:	00803fc4 	movi	r2,255
    cb98:	488e703a 	and	r7,r9,r2
    cb9c:	00802004 	movi	r2,128
    cba0:	0007883a 	mov	r3,zero
    cba4:	0011883a 	mov	r8,zero
    cba8:	38801826 	beq	r7,r2,cc0c <__muldf3+0x360>
    cbac:	008000c4 	movi	r2,3
    cbb0:	d9000e04 	addi	r4,sp,56
    cbb4:	da801215 	stw	r10,72(sp)
    cbb8:	d8800e15 	stw	r2,56(sp)
    cbbc:	da401115 	stw	r9,68(sp)
    cbc0:	003f6a06 	br	c96c <__muldf3+0xc0>
    cbc4:	89802126 	beq	r17,r6,cc4c <__muldf3+0x3a0>
    cbc8:	0009883a 	mov	r4,zero
    cbcc:	5105883a 	add	r2,r10,r4
    cbd0:	128d803a 	cmpltu	r6,r2,r10
    cbd4:	5d07883a 	add	r3,r11,r20
    cbd8:	30cd883a 	add	r6,r6,r3
    cbdc:	0021883a 	mov	r16,zero
    cbe0:	0023883a 	mov	r17,zero
    cbe4:	1025883a 	mov	r18,r2
    cbe8:	3027883a 	mov	r19,r6
    cbec:	32ff9e2e 	bgeu	r6,r11,ca68 <__muldf3+0x1bc>
    cbf0:	00800044 	movi	r2,1
    cbf4:	8089883a 	add	r4,r16,r2
    cbf8:	240d803a 	cmpltu	r6,r4,r16
    cbfc:	344d883a 	add	r6,r6,r17
    cc00:	2021883a 	mov	r16,r4
    cc04:	3023883a 	mov	r17,r6
    cc08:	003f9806 	br	ca6c <__muldf3+0x1c0>
    cc0c:	403fe71e 	bne	r8,zero,cbac <__muldf3+0x300>
    cc10:	01004004 	movi	r4,256
    cc14:	4904703a 	and	r2,r9,r4
    cc18:	10c4b03a 	or	r2,r2,r3
    cc1c:	103fe31e 	bne	r2,zero,cbac <__muldf3+0x300>
    cc20:	94c4b03a 	or	r2,r18,r19
    cc24:	103fe126 	beq	r2,zero,cbac <__muldf3+0x300>
    cc28:	49c5883a 	add	r2,r9,r7
    cc2c:	1251803a 	cmpltu	r8,r2,r9
    cc30:	4291883a 	add	r8,r8,r10
    cc34:	013fc004 	movi	r4,-256
    cc38:	1112703a 	and	r9,r2,r4
    cc3c:	4015883a 	mov	r10,r8
    cc40:	003fda06 	br	cbac <__muldf3+0x300>
    cc44:	6813883a 	mov	r9,r13
    cc48:	003fce06 	br	cb84 <__muldf3+0x2d8>
    cc4c:	143f7c36 	bltu	r2,r16,ca40 <__muldf3+0x194>
    cc50:	003fdd06 	br	cbc8 <__muldf3+0x31c>
    cc54:	12bf852e 	bgeu	r2,r10,ca6c <__muldf3+0x1c0>
    cc58:	003fe506 	br	cbf0 <__muldf3+0x344>
    cc5c:	00800084 	movi	r2,2
    cc60:	20bf351e 	bne	r4,r2,c938 <__muldf3+0x8c>
    cc64:	01000074 	movhi	r4,1
    cc68:	21082204 	addi	r4,r4,8328
    cc6c:	003f3f06 	br	c96c <__muldf3+0xc0>

0000cc70 <__divdf3>:
    cc70:	deffed04 	addi	sp,sp,-76
    cc74:	dcc01115 	stw	r19,68(sp)
    cc78:	dcc00404 	addi	r19,sp,16
    cc7c:	2011883a 	mov	r8,r4
    cc80:	2813883a 	mov	r9,r5
    cc84:	dc000e15 	stw	r16,56(sp)
    cc88:	d809883a 	mov	r4,sp
    cc8c:	980b883a 	mov	r5,r19
    cc90:	dc000904 	addi	r16,sp,36
    cc94:	dfc01215 	stw	ra,72(sp)
    cc98:	da400115 	stw	r9,4(sp)
    cc9c:	d9c00315 	stw	r7,12(sp)
    cca0:	da000015 	stw	r8,0(sp)
    cca4:	d9800215 	stw	r6,8(sp)
    cca8:	dc801015 	stw	r18,64(sp)
    ccac:	dc400f15 	stw	r17,60(sp)
    ccb0:	000d9000 	call	d900 <__unpack_d>
    ccb4:	d9000204 	addi	r4,sp,8
    ccb8:	800b883a 	mov	r5,r16
    ccbc:	000d9000 	call	d900 <__unpack_d>
    ccc0:	d9000417 	ldw	r4,16(sp)
    ccc4:	00800044 	movi	r2,1
    ccc8:	11000b2e 	bgeu	r2,r4,ccf8 <__divdf3+0x88>
    cccc:	d9400917 	ldw	r5,36(sp)
    ccd0:	1140762e 	bgeu	r2,r5,ceac <__divdf3+0x23c>
    ccd4:	d8800517 	ldw	r2,20(sp)
    ccd8:	d8c00a17 	ldw	r3,40(sp)
    ccdc:	01800104 	movi	r6,4
    cce0:	10c4f03a 	xor	r2,r2,r3
    cce4:	d8800515 	stw	r2,20(sp)
    cce8:	21800226 	beq	r4,r6,ccf4 <__divdf3+0x84>
    ccec:	00800084 	movi	r2,2
    ccf0:	2080141e 	bne	r4,r2,cd44 <__divdf3+0xd4>
    ccf4:	29000926 	beq	r5,r4,cd1c <__divdf3+0xac>
    ccf8:	9809883a 	mov	r4,r19
    ccfc:	000d5ec0 	call	d5ec <__pack_d>
    cd00:	dfc01217 	ldw	ra,72(sp)
    cd04:	dcc01117 	ldw	r19,68(sp)
    cd08:	dc801017 	ldw	r18,64(sp)
    cd0c:	dc400f17 	ldw	r17,60(sp)
    cd10:	dc000e17 	ldw	r16,56(sp)
    cd14:	dec01304 	addi	sp,sp,76
    cd18:	f800283a 	ret
    cd1c:	01000074 	movhi	r4,1
    cd20:	21082204 	addi	r4,r4,8328
    cd24:	000d5ec0 	call	d5ec <__pack_d>
    cd28:	dfc01217 	ldw	ra,72(sp)
    cd2c:	dcc01117 	ldw	r19,68(sp)
    cd30:	dc801017 	ldw	r18,64(sp)
    cd34:	dc400f17 	ldw	r17,60(sp)
    cd38:	dc000e17 	ldw	r16,56(sp)
    cd3c:	dec01304 	addi	sp,sp,76
    cd40:	f800283a 	ret
    cd44:	29805b26 	beq	r5,r6,ceb4 <__divdf3+0x244>
    cd48:	28802d26 	beq	r5,r2,ce00 <__divdf3+0x190>
    cd4c:	d8c00617 	ldw	r3,24(sp)
    cd50:	d8800b17 	ldw	r2,44(sp)
    cd54:	d9c00817 	ldw	r7,32(sp)
    cd58:	dc400d17 	ldw	r17,52(sp)
    cd5c:	188bc83a 	sub	r5,r3,r2
    cd60:	d9800717 	ldw	r6,28(sp)
    cd64:	dc000c17 	ldw	r16,48(sp)
    cd68:	d9400615 	stw	r5,24(sp)
    cd6c:	3c403836 	bltu	r7,r17,ce50 <__divdf3+0x1e0>
    cd70:	89c03626 	beq	r17,r7,ce4c <__divdf3+0x1dc>
    cd74:	0015883a 	mov	r10,zero
    cd78:	001d883a 	mov	r14,zero
    cd7c:	02c40034 	movhi	r11,4096
    cd80:	001f883a 	mov	r15,zero
    cd84:	003f883a 	mov	ra,zero
    cd88:	04800f44 	movi	r18,61
    cd8c:	00000f06 	br	cdcc <__divdf3+0x15c>
    cd90:	601d883a 	mov	r14,r12
    cd94:	681f883a 	mov	r15,r13
    cd98:	400d883a 	mov	r6,r8
    cd9c:	100f883a 	mov	r7,r2
    cda0:	3191883a 	add	r8,r6,r6
    cda4:	5808d07a 	srli	r4,r11,1
    cda8:	4185803a 	cmpltu	r2,r8,r6
    cdac:	39d3883a 	add	r9,r7,r7
    cdb0:	28c6b03a 	or	r3,r5,r3
    cdb4:	1245883a 	add	r2,r2,r9
    cdb8:	1815883a 	mov	r10,r3
    cdbc:	2017883a 	mov	r11,r4
    cdc0:	400d883a 	mov	r6,r8
    cdc4:	100f883a 	mov	r7,r2
    cdc8:	fc801726 	beq	ra,r18,ce28 <__divdf3+0x1b8>
    cdcc:	580a97fa 	slli	r5,r11,31
    cdd0:	5006d07a 	srli	r3,r10,1
    cdd4:	ffc00044 	addi	ra,ra,1
    cdd8:	3c7ff136 	bltu	r7,r17,cda0 <__divdf3+0x130>
    cddc:	3411c83a 	sub	r8,r6,r16
    cde0:	3205803a 	cmpltu	r2,r6,r8
    cde4:	3c53c83a 	sub	r9,r7,r17
    cde8:	7298b03a 	or	r12,r14,r10
    cdec:	7adab03a 	or	r13,r15,r11
    cdf0:	4885c83a 	sub	r2,r9,r2
    cdf4:	89ffe61e 	bne	r17,r7,cd90 <__divdf3+0x120>
    cdf8:	343fe936 	bltu	r6,r16,cda0 <__divdf3+0x130>
    cdfc:	003fe406 	br	cd90 <__divdf3+0x120>
    ce00:	9809883a 	mov	r4,r19
    ce04:	d9800415 	stw	r6,16(sp)
    ce08:	000d5ec0 	call	d5ec <__pack_d>
    ce0c:	dfc01217 	ldw	ra,72(sp)
    ce10:	dcc01117 	ldw	r19,68(sp)
    ce14:	dc801017 	ldw	r18,64(sp)
    ce18:	dc400f17 	ldw	r17,60(sp)
    ce1c:	dc000e17 	ldw	r16,56(sp)
    ce20:	dec01304 	addi	sp,sp,76
    ce24:	f800283a 	ret
    ce28:	00803fc4 	movi	r2,255
    ce2c:	7090703a 	and	r8,r14,r2
    ce30:	00802004 	movi	r2,128
    ce34:	0007883a 	mov	r3,zero
    ce38:	0013883a 	mov	r9,zero
    ce3c:	40800d26 	beq	r8,r2,ce74 <__divdf3+0x204>
    ce40:	dbc00815 	stw	r15,32(sp)
    ce44:	db800715 	stw	r14,28(sp)
    ce48:	003fab06 	br	ccf8 <__divdf3+0x88>
    ce4c:	343fc92e 	bgeu	r6,r16,cd74 <__divdf3+0x104>
    ce50:	3185883a 	add	r2,r6,r6
    ce54:	1189803a 	cmpltu	r4,r2,r6
    ce58:	39c7883a 	add	r3,r7,r7
    ce5c:	20c9883a 	add	r4,r4,r3
    ce60:	297fffc4 	addi	r5,r5,-1
    ce64:	100d883a 	mov	r6,r2
    ce68:	200f883a 	mov	r7,r4
    ce6c:	d9400615 	stw	r5,24(sp)
    ce70:	003fc006 	br	cd74 <__divdf3+0x104>
    ce74:	483ff21e 	bne	r9,zero,ce40 <__divdf3+0x1d0>
    ce78:	01004004 	movi	r4,256
    ce7c:	7104703a 	and	r2,r14,r4
    ce80:	10c4b03a 	or	r2,r2,r3
    ce84:	103fee1e 	bne	r2,zero,ce40 <__divdf3+0x1d0>
    ce88:	31c4b03a 	or	r2,r6,r7
    ce8c:	103fec26 	beq	r2,zero,ce40 <__divdf3+0x1d0>
    ce90:	7205883a 	add	r2,r14,r8
    ce94:	1391803a 	cmpltu	r8,r2,r14
    ce98:	43d1883a 	add	r8,r8,r15
    ce9c:	013fc004 	movi	r4,-256
    cea0:	111c703a 	and	r14,r2,r4
    cea4:	401f883a 	mov	r15,r8
    cea8:	003fe506 	br	ce40 <__divdf3+0x1d0>
    ceac:	8009883a 	mov	r4,r16
    ceb0:	003f9206 	br	ccfc <__divdf3+0x8c>
    ceb4:	9809883a 	mov	r4,r19
    ceb8:	d8000715 	stw	zero,28(sp)
    cebc:	d8000815 	stw	zero,32(sp)
    cec0:	d8000615 	stw	zero,24(sp)
    cec4:	003f8d06 	br	ccfc <__divdf3+0x8c>

0000cec8 <__eqdf2>:
    cec8:	deffef04 	addi	sp,sp,-68
    cecc:	dc400f15 	stw	r17,60(sp)
    ced0:	dc400404 	addi	r17,sp,16
    ced4:	2005883a 	mov	r2,r4
    ced8:	2807883a 	mov	r3,r5
    cedc:	dc000e15 	stw	r16,56(sp)
    cee0:	d809883a 	mov	r4,sp
    cee4:	880b883a 	mov	r5,r17
    cee8:	dc000904 	addi	r16,sp,36
    ceec:	d8c00115 	stw	r3,4(sp)
    cef0:	d8800015 	stw	r2,0(sp)
    cef4:	d9800215 	stw	r6,8(sp)
    cef8:	dfc01015 	stw	ra,64(sp)
    cefc:	d9c00315 	stw	r7,12(sp)
    cf00:	000d9000 	call	d900 <__unpack_d>
    cf04:	d9000204 	addi	r4,sp,8
    cf08:	800b883a 	mov	r5,r16
    cf0c:	000d9000 	call	d900 <__unpack_d>
    cf10:	d8800417 	ldw	r2,16(sp)
    cf14:	00c00044 	movi	r3,1
    cf18:	180d883a 	mov	r6,r3
    cf1c:	1880062e 	bgeu	r3,r2,cf38 <__eqdf2+0x70>
    cf20:	d8800917 	ldw	r2,36(sp)
    cf24:	8809883a 	mov	r4,r17
    cf28:	800b883a 	mov	r5,r16
    cf2c:	1880022e 	bgeu	r3,r2,cf38 <__eqdf2+0x70>
    cf30:	000da380 	call	da38 <__fpcmp_parts_d>
    cf34:	100d883a 	mov	r6,r2
    cf38:	3005883a 	mov	r2,r6
    cf3c:	dfc01017 	ldw	ra,64(sp)
    cf40:	dc400f17 	ldw	r17,60(sp)
    cf44:	dc000e17 	ldw	r16,56(sp)
    cf48:	dec01104 	addi	sp,sp,68
    cf4c:	f800283a 	ret

0000cf50 <__nedf2>:
    cf50:	deffef04 	addi	sp,sp,-68
    cf54:	dc400f15 	stw	r17,60(sp)
    cf58:	dc400404 	addi	r17,sp,16
    cf5c:	2005883a 	mov	r2,r4
    cf60:	2807883a 	mov	r3,r5
    cf64:	dc000e15 	stw	r16,56(sp)
    cf68:	d809883a 	mov	r4,sp
    cf6c:	880b883a 	mov	r5,r17
    cf70:	dc000904 	addi	r16,sp,36
    cf74:	d8c00115 	stw	r3,4(sp)
    cf78:	d8800015 	stw	r2,0(sp)
    cf7c:	d9800215 	stw	r6,8(sp)
    cf80:	dfc01015 	stw	ra,64(sp)
    cf84:	d9c00315 	stw	r7,12(sp)
    cf88:	000d9000 	call	d900 <__unpack_d>
    cf8c:	d9000204 	addi	r4,sp,8
    cf90:	800b883a 	mov	r5,r16
    cf94:	000d9000 	call	d900 <__unpack_d>
    cf98:	d8800417 	ldw	r2,16(sp)
    cf9c:	00c00044 	movi	r3,1
    cfa0:	180d883a 	mov	r6,r3
    cfa4:	1880062e 	bgeu	r3,r2,cfc0 <__nedf2+0x70>
    cfa8:	d8800917 	ldw	r2,36(sp)
    cfac:	8809883a 	mov	r4,r17
    cfb0:	800b883a 	mov	r5,r16
    cfb4:	1880022e 	bgeu	r3,r2,cfc0 <__nedf2+0x70>
    cfb8:	000da380 	call	da38 <__fpcmp_parts_d>
    cfbc:	100d883a 	mov	r6,r2
    cfc0:	3005883a 	mov	r2,r6
    cfc4:	dfc01017 	ldw	ra,64(sp)
    cfc8:	dc400f17 	ldw	r17,60(sp)
    cfcc:	dc000e17 	ldw	r16,56(sp)
    cfd0:	dec01104 	addi	sp,sp,68
    cfd4:	f800283a 	ret

0000cfd8 <__gtdf2>:
    cfd8:	deffef04 	addi	sp,sp,-68
    cfdc:	dc400f15 	stw	r17,60(sp)
    cfe0:	dc400404 	addi	r17,sp,16
    cfe4:	2005883a 	mov	r2,r4
    cfe8:	2807883a 	mov	r3,r5
    cfec:	dc000e15 	stw	r16,56(sp)
    cff0:	d809883a 	mov	r4,sp
    cff4:	880b883a 	mov	r5,r17
    cff8:	dc000904 	addi	r16,sp,36
    cffc:	d8c00115 	stw	r3,4(sp)
    d000:	d8800015 	stw	r2,0(sp)
    d004:	d9800215 	stw	r6,8(sp)
    d008:	dfc01015 	stw	ra,64(sp)
    d00c:	d9c00315 	stw	r7,12(sp)
    d010:	000d9000 	call	d900 <__unpack_d>
    d014:	d9000204 	addi	r4,sp,8
    d018:	800b883a 	mov	r5,r16
    d01c:	000d9000 	call	d900 <__unpack_d>
    d020:	d8800417 	ldw	r2,16(sp)
    d024:	00c00044 	movi	r3,1
    d028:	01bfffc4 	movi	r6,-1
    d02c:	1880062e 	bgeu	r3,r2,d048 <__gtdf2+0x70>
    d030:	d8800917 	ldw	r2,36(sp)
    d034:	8809883a 	mov	r4,r17
    d038:	800b883a 	mov	r5,r16
    d03c:	1880022e 	bgeu	r3,r2,d048 <__gtdf2+0x70>
    d040:	000da380 	call	da38 <__fpcmp_parts_d>
    d044:	100d883a 	mov	r6,r2
    d048:	3005883a 	mov	r2,r6
    d04c:	dfc01017 	ldw	ra,64(sp)
    d050:	dc400f17 	ldw	r17,60(sp)
    d054:	dc000e17 	ldw	r16,56(sp)
    d058:	dec01104 	addi	sp,sp,68
    d05c:	f800283a 	ret

0000d060 <__gedf2>:
    d060:	deffef04 	addi	sp,sp,-68
    d064:	dc400f15 	stw	r17,60(sp)
    d068:	dc400404 	addi	r17,sp,16
    d06c:	2005883a 	mov	r2,r4
    d070:	2807883a 	mov	r3,r5
    d074:	dc000e15 	stw	r16,56(sp)
    d078:	d809883a 	mov	r4,sp
    d07c:	880b883a 	mov	r5,r17
    d080:	dc000904 	addi	r16,sp,36
    d084:	d8c00115 	stw	r3,4(sp)
    d088:	d8800015 	stw	r2,0(sp)
    d08c:	d9800215 	stw	r6,8(sp)
    d090:	dfc01015 	stw	ra,64(sp)
    d094:	d9c00315 	stw	r7,12(sp)
    d098:	000d9000 	call	d900 <__unpack_d>
    d09c:	d9000204 	addi	r4,sp,8
    d0a0:	800b883a 	mov	r5,r16
    d0a4:	000d9000 	call	d900 <__unpack_d>
    d0a8:	d8800417 	ldw	r2,16(sp)
    d0ac:	00c00044 	movi	r3,1
    d0b0:	01bfffc4 	movi	r6,-1
    d0b4:	1880062e 	bgeu	r3,r2,d0d0 <__gedf2+0x70>
    d0b8:	d8800917 	ldw	r2,36(sp)
    d0bc:	8809883a 	mov	r4,r17
    d0c0:	800b883a 	mov	r5,r16
    d0c4:	1880022e 	bgeu	r3,r2,d0d0 <__gedf2+0x70>
    d0c8:	000da380 	call	da38 <__fpcmp_parts_d>
    d0cc:	100d883a 	mov	r6,r2
    d0d0:	3005883a 	mov	r2,r6
    d0d4:	dfc01017 	ldw	ra,64(sp)
    d0d8:	dc400f17 	ldw	r17,60(sp)
    d0dc:	dc000e17 	ldw	r16,56(sp)
    d0e0:	dec01104 	addi	sp,sp,68
    d0e4:	f800283a 	ret

0000d0e8 <__ltdf2>:
    d0e8:	deffef04 	addi	sp,sp,-68
    d0ec:	dc400f15 	stw	r17,60(sp)
    d0f0:	dc400404 	addi	r17,sp,16
    d0f4:	2005883a 	mov	r2,r4
    d0f8:	2807883a 	mov	r3,r5
    d0fc:	dc000e15 	stw	r16,56(sp)
    d100:	d809883a 	mov	r4,sp
    d104:	880b883a 	mov	r5,r17
    d108:	dc000904 	addi	r16,sp,36
    d10c:	d8c00115 	stw	r3,4(sp)
    d110:	d8800015 	stw	r2,0(sp)
    d114:	d9800215 	stw	r6,8(sp)
    d118:	dfc01015 	stw	ra,64(sp)
    d11c:	d9c00315 	stw	r7,12(sp)
    d120:	000d9000 	call	d900 <__unpack_d>
    d124:	d9000204 	addi	r4,sp,8
    d128:	800b883a 	mov	r5,r16
    d12c:	000d9000 	call	d900 <__unpack_d>
    d130:	d8800417 	ldw	r2,16(sp)
    d134:	00c00044 	movi	r3,1
    d138:	180d883a 	mov	r6,r3
    d13c:	1880062e 	bgeu	r3,r2,d158 <__ltdf2+0x70>
    d140:	d8800917 	ldw	r2,36(sp)
    d144:	8809883a 	mov	r4,r17
    d148:	800b883a 	mov	r5,r16
    d14c:	1880022e 	bgeu	r3,r2,d158 <__ltdf2+0x70>
    d150:	000da380 	call	da38 <__fpcmp_parts_d>
    d154:	100d883a 	mov	r6,r2
    d158:	3005883a 	mov	r2,r6
    d15c:	dfc01017 	ldw	ra,64(sp)
    d160:	dc400f17 	ldw	r17,60(sp)
    d164:	dc000e17 	ldw	r16,56(sp)
    d168:	dec01104 	addi	sp,sp,68
    d16c:	f800283a 	ret

0000d170 <__floatsidf>:
    d170:	2006d7fa 	srli	r3,r4,31
    d174:	defff604 	addi	sp,sp,-40
    d178:	008000c4 	movi	r2,3
    d17c:	dfc00915 	stw	ra,36(sp)
    d180:	dcc00815 	stw	r19,32(sp)
    d184:	dc800715 	stw	r18,28(sp)
    d188:	dc400615 	stw	r17,24(sp)
    d18c:	dc000515 	stw	r16,20(sp)
    d190:	d8800015 	stw	r2,0(sp)
    d194:	d8c00115 	stw	r3,4(sp)
    d198:	20000f1e 	bne	r4,zero,d1d8 <__floatsidf+0x68>
    d19c:	00800084 	movi	r2,2
    d1a0:	d8800015 	stw	r2,0(sp)
    d1a4:	d809883a 	mov	r4,sp
    d1a8:	000d5ec0 	call	d5ec <__pack_d>
    d1ac:	1009883a 	mov	r4,r2
    d1b0:	180b883a 	mov	r5,r3
    d1b4:	2005883a 	mov	r2,r4
    d1b8:	2807883a 	mov	r3,r5
    d1bc:	dfc00917 	ldw	ra,36(sp)
    d1c0:	dcc00817 	ldw	r19,32(sp)
    d1c4:	dc800717 	ldw	r18,28(sp)
    d1c8:	dc400617 	ldw	r17,24(sp)
    d1cc:	dc000517 	ldw	r16,20(sp)
    d1d0:	dec00a04 	addi	sp,sp,40
    d1d4:	f800283a 	ret
    d1d8:	00800f04 	movi	r2,60
    d1dc:	1807003a 	cmpeq	r3,r3,zero
    d1e0:	d8800215 	stw	r2,8(sp)
    d1e4:	18001126 	beq	r3,zero,d22c <__floatsidf+0xbc>
    d1e8:	0027883a 	mov	r19,zero
    d1ec:	2025883a 	mov	r18,r4
    d1f0:	d9000315 	stw	r4,12(sp)
    d1f4:	dcc00415 	stw	r19,16(sp)
    d1f8:	000d56c0 	call	d56c <__clzsi2>
    d1fc:	11000744 	addi	r4,r2,29
    d200:	013fe80e 	bge	zero,r4,d1a4 <__floatsidf+0x34>
    d204:	10bfff44 	addi	r2,r2,-3
    d208:	10000c16 	blt	r2,zero,d23c <__floatsidf+0xcc>
    d20c:	90a2983a 	sll	r17,r18,r2
    d210:	0021883a 	mov	r16,zero
    d214:	d8800217 	ldw	r2,8(sp)
    d218:	dc400415 	stw	r17,16(sp)
    d21c:	dc000315 	stw	r16,12(sp)
    d220:	1105c83a 	sub	r2,r2,r4
    d224:	d8800215 	stw	r2,8(sp)
    d228:	003fde06 	br	d1a4 <__floatsidf+0x34>
    d22c:	00a00034 	movhi	r2,32768
    d230:	20800a26 	beq	r4,r2,d25c <__floatsidf+0xec>
    d234:	0109c83a 	sub	r4,zero,r4
    d238:	003feb06 	br	d1e8 <__floatsidf+0x78>
    d23c:	9006d07a 	srli	r3,r18,1
    d240:	008007c4 	movi	r2,31
    d244:	1105c83a 	sub	r2,r2,r4
    d248:	1886d83a 	srl	r3,r3,r2
    d24c:	9922983a 	sll	r17,r19,r4
    d250:	9120983a 	sll	r16,r18,r4
    d254:	1c62b03a 	or	r17,r3,r17
    d258:	003fee06 	br	d214 <__floatsidf+0xa4>
    d25c:	0009883a 	mov	r4,zero
    d260:	01707834 	movhi	r5,49632
    d264:	003fd306 	br	d1b4 <__floatsidf+0x44>

0000d268 <__fixdfsi>:
    d268:	defff804 	addi	sp,sp,-32
    d26c:	2005883a 	mov	r2,r4
    d270:	2807883a 	mov	r3,r5
    d274:	d809883a 	mov	r4,sp
    d278:	d9400204 	addi	r5,sp,8
    d27c:	d8c00115 	stw	r3,4(sp)
    d280:	d8800015 	stw	r2,0(sp)
    d284:	dfc00715 	stw	ra,28(sp)
    d288:	000d9000 	call	d900 <__unpack_d>
    d28c:	d8c00217 	ldw	r3,8(sp)
    d290:	00800084 	movi	r2,2
    d294:	1880051e 	bne	r3,r2,d2ac <__fixdfsi+0x44>
    d298:	0007883a 	mov	r3,zero
    d29c:	1805883a 	mov	r2,r3
    d2a0:	dfc00717 	ldw	ra,28(sp)
    d2a4:	dec00804 	addi	sp,sp,32
    d2a8:	f800283a 	ret
    d2ac:	00800044 	movi	r2,1
    d2b0:	10fff92e 	bgeu	r2,r3,d298 <__fixdfsi+0x30>
    d2b4:	00800104 	movi	r2,4
    d2b8:	18800426 	beq	r3,r2,d2cc <__fixdfsi+0x64>
    d2bc:	d8c00417 	ldw	r3,16(sp)
    d2c0:	183ff516 	blt	r3,zero,d298 <__fixdfsi+0x30>
    d2c4:	00800784 	movi	r2,30
    d2c8:	10c0080e 	bge	r2,r3,d2ec <__fixdfsi+0x84>
    d2cc:	d8800317 	ldw	r2,12(sp)
    d2d0:	1000121e 	bne	r2,zero,d31c <__fixdfsi+0xb4>
    d2d4:	00e00034 	movhi	r3,32768
    d2d8:	18ffffc4 	addi	r3,r3,-1
    d2dc:	1805883a 	mov	r2,r3
    d2e0:	dfc00717 	ldw	ra,28(sp)
    d2e4:	dec00804 	addi	sp,sp,32
    d2e8:	f800283a 	ret
    d2ec:	00800f04 	movi	r2,60
    d2f0:	10d1c83a 	sub	r8,r2,r3
    d2f4:	40bff804 	addi	r2,r8,-32
    d2f8:	d9800517 	ldw	r6,20(sp)
    d2fc:	d9c00617 	ldw	r7,24(sp)
    d300:	10000816 	blt	r2,zero,d324 <__fixdfsi+0xbc>
    d304:	3888d83a 	srl	r4,r7,r2
    d308:	d8800317 	ldw	r2,12(sp)
    d30c:	2007883a 	mov	r3,r4
    d310:	103fe226 	beq	r2,zero,d29c <__fixdfsi+0x34>
    d314:	0107c83a 	sub	r3,zero,r4
    d318:	003fe006 	br	d29c <__fixdfsi+0x34>
    d31c:	00e00034 	movhi	r3,32768
    d320:	003fde06 	br	d29c <__fixdfsi+0x34>
    d324:	39c7883a 	add	r3,r7,r7
    d328:	008007c4 	movi	r2,31
    d32c:	1205c83a 	sub	r2,r2,r8
    d330:	1886983a 	sll	r3,r3,r2
    d334:	3208d83a 	srl	r4,r6,r8
    d338:	1908b03a 	or	r4,r3,r4
    d33c:	003ff206 	br	d308 <__fixdfsi+0xa0>

0000d340 <__floatunsidf>:
    d340:	defff204 	addi	sp,sp,-56
    d344:	dfc00d15 	stw	ra,52(sp)
    d348:	ddc00c15 	stw	r23,48(sp)
    d34c:	dd800b15 	stw	r22,44(sp)
    d350:	dd400a15 	stw	r21,40(sp)
    d354:	dd000915 	stw	r20,36(sp)
    d358:	dcc00815 	stw	r19,32(sp)
    d35c:	dc800715 	stw	r18,28(sp)
    d360:	dc400615 	stw	r17,24(sp)
    d364:	dc000515 	stw	r16,20(sp)
    d368:	d8000115 	stw	zero,4(sp)
    d36c:	20000f1e 	bne	r4,zero,d3ac <__floatunsidf+0x6c>
    d370:	00800084 	movi	r2,2
    d374:	d8800015 	stw	r2,0(sp)
    d378:	d809883a 	mov	r4,sp
    d37c:	000d5ec0 	call	d5ec <__pack_d>
    d380:	dfc00d17 	ldw	ra,52(sp)
    d384:	ddc00c17 	ldw	r23,48(sp)
    d388:	dd800b17 	ldw	r22,44(sp)
    d38c:	dd400a17 	ldw	r21,40(sp)
    d390:	dd000917 	ldw	r20,36(sp)
    d394:	dcc00817 	ldw	r19,32(sp)
    d398:	dc800717 	ldw	r18,28(sp)
    d39c:	dc400617 	ldw	r17,24(sp)
    d3a0:	dc000517 	ldw	r16,20(sp)
    d3a4:	dec00e04 	addi	sp,sp,56
    d3a8:	f800283a 	ret
    d3ac:	008000c4 	movi	r2,3
    d3b0:	00c00f04 	movi	r3,60
    d3b4:	002f883a 	mov	r23,zero
    d3b8:	202d883a 	mov	r22,r4
    d3bc:	d8800015 	stw	r2,0(sp)
    d3c0:	d8c00215 	stw	r3,8(sp)
    d3c4:	d9000315 	stw	r4,12(sp)
    d3c8:	ddc00415 	stw	r23,16(sp)
    d3cc:	000d56c0 	call	d56c <__clzsi2>
    d3d0:	12400744 	addi	r9,r2,29
    d3d4:	48000b16 	blt	r9,zero,d404 <__floatunsidf+0xc4>
    d3d8:	483fe726 	beq	r9,zero,d378 <__floatunsidf+0x38>
    d3dc:	10bfff44 	addi	r2,r2,-3
    d3e0:	10002e16 	blt	r2,zero,d49c <__floatunsidf+0x15c>
    d3e4:	b0a2983a 	sll	r17,r22,r2
    d3e8:	0021883a 	mov	r16,zero
    d3ec:	d8800217 	ldw	r2,8(sp)
    d3f0:	dc400415 	stw	r17,16(sp)
    d3f4:	dc000315 	stw	r16,12(sp)
    d3f8:	1245c83a 	sub	r2,r2,r9
    d3fc:	d8800215 	stw	r2,8(sp)
    d400:	003fdd06 	br	d378 <__floatunsidf+0x38>
    d404:	0255c83a 	sub	r10,zero,r9
    d408:	51bff804 	addi	r6,r10,-32
    d40c:	30001b16 	blt	r6,zero,d47c <__floatunsidf+0x13c>
    d410:	b9a8d83a 	srl	r20,r23,r6
    d414:	002b883a 	mov	r21,zero
    d418:	000f883a 	mov	r7,zero
    d41c:	01000044 	movi	r4,1
    d420:	0011883a 	mov	r8,zero
    d424:	30002516 	blt	r6,zero,d4bc <__floatunsidf+0x17c>
    d428:	21a6983a 	sll	r19,r4,r6
    d42c:	0025883a 	mov	r18,zero
    d430:	00bfffc4 	movi	r2,-1
    d434:	9089883a 	add	r4,r18,r2
    d438:	988b883a 	add	r5,r19,r2
    d43c:	248d803a 	cmpltu	r6,r4,r18
    d440:	314b883a 	add	r5,r6,r5
    d444:	b104703a 	and	r2,r22,r4
    d448:	b946703a 	and	r3,r23,r5
    d44c:	10c4b03a 	or	r2,r2,r3
    d450:	10000226 	beq	r2,zero,d45c <__floatunsidf+0x11c>
    d454:	01c00044 	movi	r7,1
    d458:	0011883a 	mov	r8,zero
    d45c:	d9000217 	ldw	r4,8(sp)
    d460:	a1c4b03a 	or	r2,r20,r7
    d464:	aa06b03a 	or	r3,r21,r8
    d468:	2249c83a 	sub	r4,r4,r9
    d46c:	d8c00415 	stw	r3,16(sp)
    d470:	d9000215 	stw	r4,8(sp)
    d474:	d8800315 	stw	r2,12(sp)
    d478:	003fbf06 	br	d378 <__floatunsidf+0x38>
    d47c:	bdc7883a 	add	r3,r23,r23
    d480:	008007c4 	movi	r2,31
    d484:	1285c83a 	sub	r2,r2,r10
    d488:	1886983a 	sll	r3,r3,r2
    d48c:	b2a8d83a 	srl	r20,r22,r10
    d490:	baaad83a 	srl	r21,r23,r10
    d494:	1d28b03a 	or	r20,r3,r20
    d498:	003fdf06 	br	d418 <__floatunsidf+0xd8>
    d49c:	b006d07a 	srli	r3,r22,1
    d4a0:	008007c4 	movi	r2,31
    d4a4:	1245c83a 	sub	r2,r2,r9
    d4a8:	1886d83a 	srl	r3,r3,r2
    d4ac:	ba62983a 	sll	r17,r23,r9
    d4b0:	b260983a 	sll	r16,r22,r9
    d4b4:	1c62b03a 	or	r17,r3,r17
    d4b8:	003fcc06 	br	d3ec <__floatunsidf+0xac>
    d4bc:	2006d07a 	srli	r3,r4,1
    d4c0:	008007c4 	movi	r2,31
    d4c4:	1285c83a 	sub	r2,r2,r10
    d4c8:	18a6d83a 	srl	r19,r3,r2
    d4cc:	22a4983a 	sll	r18,r4,r10
    d4d0:	003fd706 	br	d430 <__floatunsidf+0xf0>

0000d4d4 <__muldi3>:
    d4d4:	2011883a 	mov	r8,r4
    d4d8:	427fffcc 	andi	r9,r8,65535
    d4dc:	4018d43a 	srli	r12,r8,16
    d4e0:	32bfffcc 	andi	r10,r6,65535
    d4e4:	3016d43a 	srli	r11,r6,16
    d4e8:	4a85383a 	mul	r2,r9,r10
    d4ec:	6295383a 	mul	r10,r12,r10
    d4f0:	4ad3383a 	mul	r9,r9,r11
    d4f4:	113fffcc 	andi	r4,r2,65535
    d4f8:	1004d43a 	srli	r2,r2,16
    d4fc:	4a93883a 	add	r9,r9,r10
    d500:	3807883a 	mov	r3,r7
    d504:	1245883a 	add	r2,r2,r9
    d508:	280f883a 	mov	r7,r5
    d50c:	180b883a 	mov	r5,r3
    d510:	1006943a 	slli	r3,r2,16
    d514:	defffd04 	addi	sp,sp,-12
    d518:	dc800215 	stw	r18,8(sp)
    d51c:	1907883a 	add	r3,r3,r4
    d520:	dc400115 	stw	r17,4(sp)
    d524:	dc000015 	stw	r16,0(sp)
    d528:	4165383a 	mul	r18,r8,r5
    d52c:	31e3383a 	mul	r17,r6,r7
    d530:	1012d43a 	srli	r9,r2,16
    d534:	62d9383a 	mul	r12,r12,r11
    d538:	181f883a 	mov	r15,r3
    d53c:	1280022e 	bgeu	r2,r10,d548 <__muldi3+0x74>
    d540:	00800074 	movhi	r2,1
    d544:	6099883a 	add	r12,r12,r2
    d548:	624d883a 	add	r6,r12,r9
    d54c:	9187883a 	add	r3,r18,r6
    d550:	88c7883a 	add	r3,r17,r3
    d554:	7805883a 	mov	r2,r15
    d558:	dc800217 	ldw	r18,8(sp)
    d55c:	dc400117 	ldw	r17,4(sp)
    d560:	dc000017 	ldw	r16,0(sp)
    d564:	dec00304 	addi	sp,sp,12
    d568:	f800283a 	ret

0000d56c <__clzsi2>:
    d56c:	00bfffd4 	movui	r2,65535
    d570:	11000e36 	bltu	r2,r4,d5ac <__clzsi2+0x40>
    d574:	00803fc4 	movi	r2,255
    d578:	01400204 	movi	r5,8
    d57c:	0007883a 	mov	r3,zero
    d580:	11001036 	bltu	r2,r4,d5c4 <__clzsi2+0x58>
    d584:	000b883a 	mov	r5,zero
    d588:	20c6d83a 	srl	r3,r4,r3
    d58c:	00800074 	movhi	r2,1
    d590:	10882704 	addi	r2,r2,8348
    d594:	1887883a 	add	r3,r3,r2
    d598:	18800003 	ldbu	r2,0(r3)
    d59c:	00c00804 	movi	r3,32
    d5a0:	2885883a 	add	r2,r5,r2
    d5a4:	1885c83a 	sub	r2,r3,r2
    d5a8:	f800283a 	ret
    d5ac:	01400404 	movi	r5,16
    d5b0:	00804034 	movhi	r2,256
    d5b4:	10bfffc4 	addi	r2,r2,-1
    d5b8:	2807883a 	mov	r3,r5
    d5bc:	113ff22e 	bgeu	r2,r4,d588 <__clzsi2+0x1c>
    d5c0:	01400604 	movi	r5,24
    d5c4:	2807883a 	mov	r3,r5
    d5c8:	20c6d83a 	srl	r3,r4,r3
    d5cc:	00800074 	movhi	r2,1
    d5d0:	10882704 	addi	r2,r2,8348
    d5d4:	1887883a 	add	r3,r3,r2
    d5d8:	18800003 	ldbu	r2,0(r3)
    d5dc:	00c00804 	movi	r3,32
    d5e0:	2885883a 	add	r2,r5,r2
    d5e4:	1885c83a 	sub	r2,r3,r2
    d5e8:	f800283a 	ret

0000d5ec <__pack_d>:
    d5ec:	20c00017 	ldw	r3,0(r4)
    d5f0:	defffd04 	addi	sp,sp,-12
    d5f4:	dc000015 	stw	r16,0(sp)
    d5f8:	dc800215 	stw	r18,8(sp)
    d5fc:	dc400115 	stw	r17,4(sp)
    d600:	00800044 	movi	r2,1
    d604:	22000317 	ldw	r8,12(r4)
    d608:	001f883a 	mov	r15,zero
    d60c:	22400417 	ldw	r9,16(r4)
    d610:	24000117 	ldw	r16,4(r4)
    d614:	10c0552e 	bgeu	r2,r3,d76c <__pack_d+0x180>
    d618:	00800104 	movi	r2,4
    d61c:	18804f26 	beq	r3,r2,d75c <__pack_d+0x170>
    d620:	00800084 	movi	r2,2
    d624:	18800226 	beq	r3,r2,d630 <__pack_d+0x44>
    d628:	4244b03a 	or	r2,r8,r9
    d62c:	10001a1e 	bne	r2,zero,d698 <__pack_d+0xac>
    d630:	000d883a 	mov	r6,zero
    d634:	000f883a 	mov	r7,zero
    d638:	0011883a 	mov	r8,zero
    d63c:	00800434 	movhi	r2,16
    d640:	10bfffc4 	addi	r2,r2,-1
    d644:	301d883a 	mov	r14,r6
    d648:	3884703a 	and	r2,r7,r2
    d64c:	400a953a 	slli	r5,r8,20
    d650:	79bffc2c 	andhi	r6,r15,65520
    d654:	308cb03a 	or	r6,r6,r2
    d658:	00e00434 	movhi	r3,32784
    d65c:	18ffffc4 	addi	r3,r3,-1
    d660:	800497fa 	slli	r2,r16,31
    d664:	30c6703a 	and	r3,r6,r3
    d668:	1946b03a 	or	r3,r3,r5
    d66c:	01600034 	movhi	r5,32768
    d670:	297fffc4 	addi	r5,r5,-1
    d674:	194a703a 	and	r5,r3,r5
    d678:	288ab03a 	or	r5,r5,r2
    d67c:	2807883a 	mov	r3,r5
    d680:	7005883a 	mov	r2,r14
    d684:	dc800217 	ldw	r18,8(sp)
    d688:	dc400117 	ldw	r17,4(sp)
    d68c:	dc000017 	ldw	r16,0(sp)
    d690:	dec00304 	addi	sp,sp,12
    d694:	f800283a 	ret
    d698:	21000217 	ldw	r4,8(r4)
    d69c:	00bf0084 	movi	r2,-1022
    d6a0:	20803f16 	blt	r4,r2,d7a0 <__pack_d+0x1b4>
    d6a4:	0080ffc4 	movi	r2,1023
    d6a8:	11002c16 	blt	r2,r4,d75c <__pack_d+0x170>
    d6ac:	00803fc4 	movi	r2,255
    d6b0:	408c703a 	and	r6,r8,r2
    d6b4:	00802004 	movi	r2,128
    d6b8:	0007883a 	mov	r3,zero
    d6bc:	000f883a 	mov	r7,zero
    d6c0:	2280ffc4 	addi	r10,r4,1023
    d6c4:	30801e26 	beq	r6,r2,d740 <__pack_d+0x154>
    d6c8:	00801fc4 	movi	r2,127
    d6cc:	4089883a 	add	r4,r8,r2
    d6d0:	220d803a 	cmpltu	r6,r4,r8
    d6d4:	324d883a 	add	r6,r6,r9
    d6d8:	2011883a 	mov	r8,r4
    d6dc:	3013883a 	mov	r9,r6
    d6e0:	00880034 	movhi	r2,8192
    d6e4:	10bfffc4 	addi	r2,r2,-1
    d6e8:	12400d36 	bltu	r2,r9,d720 <__pack_d+0x134>
    d6ec:	4804963a 	slli	r2,r9,24
    d6f0:	400cd23a 	srli	r6,r8,8
    d6f4:	480ed23a 	srli	r7,r9,8
    d6f8:	013fffc4 	movi	r4,-1
    d6fc:	118cb03a 	or	r6,r2,r6
    d700:	01400434 	movhi	r5,16
    d704:	297fffc4 	addi	r5,r5,-1
    d708:	3104703a 	and	r2,r6,r4
    d70c:	3946703a 	and	r3,r7,r5
    d710:	5201ffcc 	andi	r8,r10,2047
    d714:	100d883a 	mov	r6,r2
    d718:	180f883a 	mov	r7,r3
    d71c:	003fc706 	br	d63c <__pack_d+0x50>
    d720:	480897fa 	slli	r4,r9,31
    d724:	4004d07a 	srli	r2,r8,1
    d728:	4806d07a 	srli	r3,r9,1
    d72c:	52800044 	addi	r10,r10,1
    d730:	2084b03a 	or	r2,r4,r2
    d734:	1011883a 	mov	r8,r2
    d738:	1813883a 	mov	r9,r3
    d73c:	003feb06 	br	d6ec <__pack_d+0x100>
    d740:	383fe11e 	bne	r7,zero,d6c8 <__pack_d+0xdc>
    d744:	01004004 	movi	r4,256
    d748:	4104703a 	and	r2,r8,r4
    d74c:	10c4b03a 	or	r2,r2,r3
    d750:	103fe326 	beq	r2,zero,d6e0 <__pack_d+0xf4>
    d754:	3005883a 	mov	r2,r6
    d758:	003fdc06 	br	d6cc <__pack_d+0xe0>
    d75c:	000d883a 	mov	r6,zero
    d760:	000f883a 	mov	r7,zero
    d764:	0201ffc4 	movi	r8,2047
    d768:	003fb406 	br	d63c <__pack_d+0x50>
    d76c:	0005883a 	mov	r2,zero
    d770:	00c00234 	movhi	r3,8
    d774:	408cb03a 	or	r6,r8,r2
    d778:	48ceb03a 	or	r7,r9,r3
    d77c:	013fffc4 	movi	r4,-1
    d780:	01400434 	movhi	r5,16
    d784:	297fffc4 	addi	r5,r5,-1
    d788:	3104703a 	and	r2,r6,r4
    d78c:	3946703a 	and	r3,r7,r5
    d790:	100d883a 	mov	r6,r2
    d794:	180f883a 	mov	r7,r3
    d798:	0201ffc4 	movi	r8,2047
    d79c:	003fa706 	br	d63c <__pack_d+0x50>
    d7a0:	1109c83a 	sub	r4,r2,r4
    d7a4:	00800e04 	movi	r2,56
    d7a8:	11004316 	blt	r2,r4,d8b8 <__pack_d+0x2cc>
    d7ac:	21fff804 	addi	r7,r4,-32
    d7b0:	38004516 	blt	r7,zero,d8c8 <__pack_d+0x2dc>
    d7b4:	49d8d83a 	srl	r12,r9,r7
    d7b8:	001b883a 	mov	r13,zero
    d7bc:	0023883a 	mov	r17,zero
    d7c0:	01400044 	movi	r5,1
    d7c4:	0025883a 	mov	r18,zero
    d7c8:	38004716 	blt	r7,zero,d8e8 <__pack_d+0x2fc>
    d7cc:	29d6983a 	sll	r11,r5,r7
    d7d0:	0015883a 	mov	r10,zero
    d7d4:	00bfffc4 	movi	r2,-1
    d7d8:	5089883a 	add	r4,r10,r2
    d7dc:	588b883a 	add	r5,r11,r2
    d7e0:	228d803a 	cmpltu	r6,r4,r10
    d7e4:	314b883a 	add	r5,r6,r5
    d7e8:	4104703a 	and	r2,r8,r4
    d7ec:	4946703a 	and	r3,r9,r5
    d7f0:	10c4b03a 	or	r2,r2,r3
    d7f4:	10000226 	beq	r2,zero,d800 <__pack_d+0x214>
    d7f8:	04400044 	movi	r17,1
    d7fc:	0025883a 	mov	r18,zero
    d800:	00803fc4 	movi	r2,255
    d804:	644eb03a 	or	r7,r12,r17
    d808:	3892703a 	and	r9,r7,r2
    d80c:	00802004 	movi	r2,128
    d810:	6c90b03a 	or	r8,r13,r18
    d814:	0015883a 	mov	r10,zero
    d818:	48801626 	beq	r9,r2,d874 <__pack_d+0x288>
    d81c:	01001fc4 	movi	r4,127
    d820:	3905883a 	add	r2,r7,r4
    d824:	11cd803a 	cmpltu	r6,r2,r7
    d828:	320d883a 	add	r6,r6,r8
    d82c:	100f883a 	mov	r7,r2
    d830:	00840034 	movhi	r2,4096
    d834:	10bfffc4 	addi	r2,r2,-1
    d838:	3011883a 	mov	r8,r6
    d83c:	0007883a 	mov	r3,zero
    d840:	11801b36 	bltu	r2,r6,d8b0 <__pack_d+0x2c4>
    d844:	4004963a 	slli	r2,r8,24
    d848:	3808d23a 	srli	r4,r7,8
    d84c:	400ad23a 	srli	r5,r8,8
    d850:	1813883a 	mov	r9,r3
    d854:	1108b03a 	or	r4,r2,r4
    d858:	00bfffc4 	movi	r2,-1
    d85c:	00c00434 	movhi	r3,16
    d860:	18ffffc4 	addi	r3,r3,-1
    d864:	208c703a 	and	r6,r4,r2
    d868:	28ce703a 	and	r7,r5,r3
    d86c:	4a01ffcc 	andi	r8,r9,2047
    d870:	003f7206 	br	d63c <__pack_d+0x50>
    d874:	503fe91e 	bne	r10,zero,d81c <__pack_d+0x230>
    d878:	01004004 	movi	r4,256
    d87c:	3904703a 	and	r2,r7,r4
    d880:	0007883a 	mov	r3,zero
    d884:	10c4b03a 	or	r2,r2,r3
    d888:	10000626 	beq	r2,zero,d8a4 <__pack_d+0x2b8>
    d88c:	3a45883a 	add	r2,r7,r9
    d890:	11cd803a 	cmpltu	r6,r2,r7
    d894:	320d883a 	add	r6,r6,r8
    d898:	100f883a 	mov	r7,r2
    d89c:	3011883a 	mov	r8,r6
    d8a0:	0007883a 	mov	r3,zero
    d8a4:	00840034 	movhi	r2,4096
    d8a8:	10bfffc4 	addi	r2,r2,-1
    d8ac:	123fe52e 	bgeu	r2,r8,d844 <__pack_d+0x258>
    d8b0:	00c00044 	movi	r3,1
    d8b4:	003fe306 	br	d844 <__pack_d+0x258>
    d8b8:	0009883a 	mov	r4,zero
    d8bc:	0013883a 	mov	r9,zero
    d8c0:	000b883a 	mov	r5,zero
    d8c4:	003fe406 	br	d858 <__pack_d+0x26c>
    d8c8:	4a47883a 	add	r3,r9,r9
    d8cc:	008007c4 	movi	r2,31
    d8d0:	1105c83a 	sub	r2,r2,r4
    d8d4:	1886983a 	sll	r3,r3,r2
    d8d8:	4118d83a 	srl	r12,r8,r4
    d8dc:	491ad83a 	srl	r13,r9,r4
    d8e0:	1b18b03a 	or	r12,r3,r12
    d8e4:	003fb506 	br	d7bc <__pack_d+0x1d0>
    d8e8:	2806d07a 	srli	r3,r5,1
    d8ec:	008007c4 	movi	r2,31
    d8f0:	1105c83a 	sub	r2,r2,r4
    d8f4:	1896d83a 	srl	r11,r3,r2
    d8f8:	2914983a 	sll	r10,r5,r4
    d8fc:	003fb506 	br	d7d4 <__pack_d+0x1e8>

0000d900 <__unpack_d>:
    d900:	20c00117 	ldw	r3,4(r4)
    d904:	22400017 	ldw	r9,0(r4)
    d908:	00800434 	movhi	r2,16
    d90c:	10bfffc4 	addi	r2,r2,-1
    d910:	1808d53a 	srli	r4,r3,20
    d914:	180cd7fa 	srli	r6,r3,31
    d918:	1894703a 	and	r10,r3,r2
    d91c:	2201ffcc 	andi	r8,r4,2047
    d920:	281b883a 	mov	r13,r5
    d924:	4817883a 	mov	r11,r9
    d928:	29800115 	stw	r6,4(r5)
    d92c:	5019883a 	mov	r12,r10
    d930:	40001e1e 	bne	r8,zero,d9ac <__unpack_d+0xac>
    d934:	4a84b03a 	or	r2,r9,r10
    d938:	10001926 	beq	r2,zero,d9a0 <__unpack_d+0xa0>
    d93c:	4804d63a 	srli	r2,r9,24
    d940:	500c923a 	slli	r6,r10,8
    d944:	013f0084 	movi	r4,-1022
    d948:	00c40034 	movhi	r3,4096
    d94c:	18ffffc4 	addi	r3,r3,-1
    d950:	118cb03a 	or	r6,r2,r6
    d954:	008000c4 	movi	r2,3
    d958:	480a923a 	slli	r5,r9,8
    d95c:	68800015 	stw	r2,0(r13)
    d960:	69000215 	stw	r4,8(r13)
    d964:	19800b36 	bltu	r3,r6,d994 <__unpack_d+0x94>
    d968:	200f883a 	mov	r7,r4
    d96c:	1811883a 	mov	r8,r3
    d970:	2945883a 	add	r2,r5,r5
    d974:	1149803a 	cmpltu	r4,r2,r5
    d978:	3187883a 	add	r3,r6,r6
    d97c:	20c9883a 	add	r4,r4,r3
    d980:	100b883a 	mov	r5,r2
    d984:	200d883a 	mov	r6,r4
    d988:	39ffffc4 	addi	r7,r7,-1
    d98c:	413ff82e 	bgeu	r8,r4,d970 <__unpack_d+0x70>
    d990:	69c00215 	stw	r7,8(r13)
    d994:	69800415 	stw	r6,16(r13)
    d998:	69400315 	stw	r5,12(r13)
    d99c:	f800283a 	ret
    d9a0:	00800084 	movi	r2,2
    d9a4:	28800015 	stw	r2,0(r5)
    d9a8:	f800283a 	ret
    d9ac:	0081ffc4 	movi	r2,2047
    d9b0:	40800f26 	beq	r8,r2,d9f0 <__unpack_d+0xf0>
    d9b4:	480cd63a 	srli	r6,r9,24
    d9b8:	5006923a 	slli	r3,r10,8
    d9bc:	4804923a 	slli	r2,r9,8
    d9c0:	0009883a 	mov	r4,zero
    d9c4:	30c6b03a 	or	r3,r6,r3
    d9c8:	01440034 	movhi	r5,4096
    d9cc:	110cb03a 	or	r6,r2,r4
    d9d0:	423f0044 	addi	r8,r8,-1023
    d9d4:	194eb03a 	or	r7,r3,r5
    d9d8:	008000c4 	movi	r2,3
    d9dc:	69c00415 	stw	r7,16(r13)
    d9e0:	6a000215 	stw	r8,8(r13)
    d9e4:	68800015 	stw	r2,0(r13)
    d9e8:	69800315 	stw	r6,12(r13)
    d9ec:	f800283a 	ret
    d9f0:	4a84b03a 	or	r2,r9,r10
    d9f4:	1000031e 	bne	r2,zero,da04 <__unpack_d+0x104>
    d9f8:	00800104 	movi	r2,4
    d9fc:	28800015 	stw	r2,0(r5)
    da00:	f800283a 	ret
    da04:	0009883a 	mov	r4,zero
    da08:	01400234 	movhi	r5,8
    da0c:	4904703a 	and	r2,r9,r4
    da10:	5146703a 	and	r3,r10,r5
    da14:	10c4b03a 	or	r2,r2,r3
    da18:	10000526 	beq	r2,zero,da30 <__unpack_d+0x130>
    da1c:	00800044 	movi	r2,1
    da20:	68800015 	stw	r2,0(r13)
    da24:	6b000415 	stw	r12,16(r13)
    da28:	6ac00315 	stw	r11,12(r13)
    da2c:	f800283a 	ret
    da30:	68000015 	stw	zero,0(r13)
    da34:	003ffb06 	br	da24 <__unpack_d+0x124>

0000da38 <__fpcmp_parts_d>:
    da38:	21800017 	ldw	r6,0(r4)
    da3c:	00c00044 	movi	r3,1
    da40:	19800a2e 	bgeu	r3,r6,da6c <__fpcmp_parts_d+0x34>
    da44:	28800017 	ldw	r2,0(r5)
    da48:	1880082e 	bgeu	r3,r2,da6c <__fpcmp_parts_d+0x34>
    da4c:	00c00104 	movi	r3,4
    da50:	30c02626 	beq	r6,r3,daec <__fpcmp_parts_d+0xb4>
    da54:	10c02226 	beq	r2,r3,dae0 <__fpcmp_parts_d+0xa8>
    da58:	00c00084 	movi	r3,2
    da5c:	30c00526 	beq	r6,r3,da74 <__fpcmp_parts_d+0x3c>
    da60:	10c0071e 	bne	r2,r3,da80 <__fpcmp_parts_d+0x48>
    da64:	20800117 	ldw	r2,4(r4)
    da68:	1000091e 	bne	r2,zero,da90 <__fpcmp_parts_d+0x58>
    da6c:	00800044 	movi	r2,1
    da70:	f800283a 	ret
    da74:	10c01a1e 	bne	r2,r3,dae0 <__fpcmp_parts_d+0xa8>
    da78:	0005883a 	mov	r2,zero
    da7c:	f800283a 	ret
    da80:	22000117 	ldw	r8,4(r4)
    da84:	28800117 	ldw	r2,4(r5)
    da88:	40800326 	beq	r8,r2,da98 <__fpcmp_parts_d+0x60>
    da8c:	403ff726 	beq	r8,zero,da6c <__fpcmp_parts_d+0x34>
    da90:	00bfffc4 	movi	r2,-1
    da94:	f800283a 	ret
    da98:	20c00217 	ldw	r3,8(r4)
    da9c:	28800217 	ldw	r2,8(r5)
    daa0:	10fffa16 	blt	r2,r3,da8c <__fpcmp_parts_d+0x54>
    daa4:	18800916 	blt	r3,r2,dacc <__fpcmp_parts_d+0x94>
    daa8:	21c00417 	ldw	r7,16(r4)
    daac:	28c00417 	ldw	r3,16(r5)
    dab0:	21800317 	ldw	r6,12(r4)
    dab4:	28800317 	ldw	r2,12(r5)
    dab8:	19fff436 	bltu	r3,r7,da8c <__fpcmp_parts_d+0x54>
    dabc:	38c00526 	beq	r7,r3,dad4 <__fpcmp_parts_d+0x9c>
    dac0:	38c00236 	bltu	r7,r3,dacc <__fpcmp_parts_d+0x94>
    dac4:	19ffec1e 	bne	r3,r7,da78 <__fpcmp_parts_d+0x40>
    dac8:	30bfeb2e 	bgeu	r6,r2,da78 <__fpcmp_parts_d+0x40>
    dacc:	403fe71e 	bne	r8,zero,da6c <__fpcmp_parts_d+0x34>
    dad0:	003fef06 	br	da90 <__fpcmp_parts_d+0x58>
    dad4:	11bffa2e 	bgeu	r2,r6,dac0 <__fpcmp_parts_d+0x88>
    dad8:	403fe426 	beq	r8,zero,da6c <__fpcmp_parts_d+0x34>
    dadc:	003fec06 	br	da90 <__fpcmp_parts_d+0x58>
    dae0:	28800117 	ldw	r2,4(r5)
    dae4:	103fe11e 	bne	r2,zero,da6c <__fpcmp_parts_d+0x34>
    dae8:	003fe906 	br	da90 <__fpcmp_parts_d+0x58>
    daec:	11bfdd1e 	bne	r2,r6,da64 <__fpcmp_parts_d+0x2c>
    daf0:	28c00117 	ldw	r3,4(r5)
    daf4:	20800117 	ldw	r2,4(r4)
    daf8:	1885c83a 	sub	r2,r3,r2
    dafc:	f800283a 	ret

0000db00 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    db00:	defff804 	addi	sp,sp,-32
    db04:	dfc00715 	stw	ra,28(sp)
    db08:	df000615 	stw	fp,24(sp)
    db0c:	df000604 	addi	fp,sp,24
    db10:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    db14:	e0bffc17 	ldw	r2,-16(fp)
    db18:	1004803a 	cmplt	r2,r2,zero
    db1c:	1000081e 	bne	r2,zero,db40 <close+0x40>
    db20:	e0bffc17 	ldw	r2,-16(fp)
    db24:	10800324 	muli	r2,r2,12
    db28:	1007883a 	mov	r3,r2
    db2c:	00800074 	movhi	r2,1
    db30:	108b2904 	addi	r2,r2,11428
    db34:	1887883a 	add	r3,r3,r2
    db38:	e0ffff15 	stw	r3,-4(fp)
    db3c:	00000106 	br	db44 <close+0x44>
    db40:	e03fff15 	stw	zero,-4(fp)
    db44:	e0bfff17 	ldw	r2,-4(fp)
    db48:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    db4c:	e0bffb17 	ldw	r2,-20(fp)
    db50:	1005003a 	cmpeq	r2,r2,zero
    db54:	10001d1e 	bne	r2,zero,dbcc <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    db58:	e0bffb17 	ldw	r2,-20(fp)
    db5c:	10800017 	ldw	r2,0(r2)
    db60:	10800417 	ldw	r2,16(r2)
    db64:	1005003a 	cmpeq	r2,r2,zero
    db68:	1000071e 	bne	r2,zero,db88 <close+0x88>
    db6c:	e0bffb17 	ldw	r2,-20(fp)
    db70:	10800017 	ldw	r2,0(r2)
    db74:	10800417 	ldw	r2,16(r2)
    db78:	e13ffb17 	ldw	r4,-20(fp)
    db7c:	103ee83a 	callr	r2
    db80:	e0bffe15 	stw	r2,-8(fp)
    db84:	00000106 	br	db8c <close+0x8c>
    db88:	e03ffe15 	stw	zero,-8(fp)
    db8c:	e0bffe17 	ldw	r2,-8(fp)
    db90:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    db94:	e13ffc17 	ldw	r4,-16(fp)
    db98:	000e3440 	call	e344 <alt_release_fd>
    if (rval < 0)
    db9c:	e0bffa17 	ldw	r2,-24(fp)
    dba0:	1004403a 	cmpge	r2,r2,zero
    dba4:	1000071e 	bne	r2,zero,dbc4 <close+0xc4>
    {
      ALT_ERRNO = -rval;
    dba8:	000dbfc0 	call	dbfc <alt_get_errno>
    dbac:	e0fffa17 	ldw	r3,-24(fp)
    dbb0:	00c7c83a 	sub	r3,zero,r3
    dbb4:	10c00015 	stw	r3,0(r2)
      return -1;
    dbb8:	00bfffc4 	movi	r2,-1
    dbbc:	e0bffd15 	stw	r2,-12(fp)
    dbc0:	00000806 	br	dbe4 <close+0xe4>
    }
    return 0;
    dbc4:	e03ffd15 	stw	zero,-12(fp)
    dbc8:	00000606 	br	dbe4 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    dbcc:	000dbfc0 	call	dbfc <alt_get_errno>
    dbd0:	1007883a 	mov	r3,r2
    dbd4:	00801444 	movi	r2,81
    dbd8:	18800015 	stw	r2,0(r3)
    return -1;
    dbdc:	00bfffc4 	movi	r2,-1
    dbe0:	e0bffd15 	stw	r2,-12(fp)
    dbe4:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    dbe8:	e037883a 	mov	sp,fp
    dbec:	dfc00117 	ldw	ra,4(sp)
    dbf0:	df000017 	ldw	fp,0(sp)
    dbf4:	dec00204 	addi	sp,sp,8
    dbf8:	f800283a 	ret

0000dbfc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dbfc:	defffd04 	addi	sp,sp,-12
    dc00:	dfc00215 	stw	ra,8(sp)
    dc04:	df000115 	stw	fp,4(sp)
    dc08:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    dc0c:	00800074 	movhi	r2,1
    dc10:	108ff404 	addi	r2,r2,16336
    dc14:	10800017 	ldw	r2,0(r2)
    dc18:	1005003a 	cmpeq	r2,r2,zero
    dc1c:	1000061e 	bne	r2,zero,dc38 <alt_get_errno+0x3c>
    dc20:	00800074 	movhi	r2,1
    dc24:	108ff404 	addi	r2,r2,16336
    dc28:	10800017 	ldw	r2,0(r2)
    dc2c:	103ee83a 	callr	r2
    dc30:	e0bfff15 	stw	r2,-4(fp)
    dc34:	00000306 	br	dc44 <alt_get_errno+0x48>
    dc38:	00800074 	movhi	r2,1
    dc3c:	1096e704 	addi	r2,r2,23452
    dc40:	e0bfff15 	stw	r2,-4(fp)
    dc44:	e0bfff17 	ldw	r2,-4(fp)
}
    dc48:	e037883a 	mov	sp,fp
    dc4c:	dfc00117 	ldw	ra,4(sp)
    dc50:	df000017 	ldw	fp,0(sp)
    dc54:	dec00204 	addi	sp,sp,8
    dc58:	f800283a 	ret

0000dc5c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    dc5c:	defffc04 	addi	sp,sp,-16
    dc60:	df000315 	stw	fp,12(sp)
    dc64:	df000304 	addi	fp,sp,12
    dc68:	e13ffd15 	stw	r4,-12(fp)
    dc6c:	e17ffe15 	stw	r5,-8(fp)
    dc70:	e1bfff15 	stw	r6,-4(fp)
  return len;
    dc74:	e0bfff17 	ldw	r2,-4(fp)
}
    dc78:	e037883a 	mov	sp,fp
    dc7c:	df000017 	ldw	fp,0(sp)
    dc80:	dec00104 	addi	sp,sp,4
    dc84:	f800283a 	ret

0000dc88 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    dc88:	defff904 	addi	sp,sp,-28
    dc8c:	dfc00615 	stw	ra,24(sp)
    dc90:	df000515 	stw	fp,20(sp)
    dc94:	df000504 	addi	fp,sp,20
    dc98:	e13ffc15 	stw	r4,-16(fp)
    dc9c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    dca0:	e0bffc17 	ldw	r2,-16(fp)
    dca4:	1004803a 	cmplt	r2,r2,zero
    dca8:	1000081e 	bne	r2,zero,dccc <fstat+0x44>
    dcac:	e0bffc17 	ldw	r2,-16(fp)
    dcb0:	10800324 	muli	r2,r2,12
    dcb4:	1007883a 	mov	r3,r2
    dcb8:	00800074 	movhi	r2,1
    dcbc:	108b2904 	addi	r2,r2,11428
    dcc0:	1887883a 	add	r3,r3,r2
    dcc4:	e0ffff15 	stw	r3,-4(fp)
    dcc8:	00000106 	br	dcd0 <fstat+0x48>
    dccc:	e03fff15 	stw	zero,-4(fp)
    dcd0:	e0bfff17 	ldw	r2,-4(fp)
    dcd4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    dcd8:	e0bffb17 	ldw	r2,-20(fp)
    dcdc:	1005003a 	cmpeq	r2,r2,zero
    dce0:	1000121e 	bne	r2,zero,dd2c <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    dce4:	e0bffb17 	ldw	r2,-20(fp)
    dce8:	10800017 	ldw	r2,0(r2)
    dcec:	10800817 	ldw	r2,32(r2)
    dcf0:	1005003a 	cmpeq	r2,r2,zero
    dcf4:	1000081e 	bne	r2,zero,dd18 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    dcf8:	e0bffb17 	ldw	r2,-20(fp)
    dcfc:	10800017 	ldw	r2,0(r2)
    dd00:	10800817 	ldw	r2,32(r2)
    dd04:	e13ffb17 	ldw	r4,-20(fp)
    dd08:	e17ffd17 	ldw	r5,-12(fp)
    dd0c:	103ee83a 	callr	r2
    dd10:	e0bffe15 	stw	r2,-8(fp)
    dd14:	00000b06 	br	dd44 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    dd18:	e0fffd17 	ldw	r3,-12(fp)
    dd1c:	00880004 	movi	r2,8192
    dd20:	18800115 	stw	r2,4(r3)
      return 0;
    dd24:	e03ffe15 	stw	zero,-8(fp)
    dd28:	00000606 	br	dd44 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    dd2c:	000dd5c0 	call	dd5c <alt_get_errno>
    dd30:	1007883a 	mov	r3,r2
    dd34:	00801444 	movi	r2,81
    dd38:	18800015 	stw	r2,0(r3)
    return -1;
    dd3c:	00bfffc4 	movi	r2,-1
    dd40:	e0bffe15 	stw	r2,-8(fp)
    dd44:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    dd48:	e037883a 	mov	sp,fp
    dd4c:	dfc00117 	ldw	ra,4(sp)
    dd50:	df000017 	ldw	fp,0(sp)
    dd54:	dec00204 	addi	sp,sp,8
    dd58:	f800283a 	ret

0000dd5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dd5c:	defffd04 	addi	sp,sp,-12
    dd60:	dfc00215 	stw	ra,8(sp)
    dd64:	df000115 	stw	fp,4(sp)
    dd68:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    dd6c:	00800074 	movhi	r2,1
    dd70:	108ff404 	addi	r2,r2,16336
    dd74:	10800017 	ldw	r2,0(r2)
    dd78:	1005003a 	cmpeq	r2,r2,zero
    dd7c:	1000061e 	bne	r2,zero,dd98 <alt_get_errno+0x3c>
    dd80:	00800074 	movhi	r2,1
    dd84:	108ff404 	addi	r2,r2,16336
    dd88:	10800017 	ldw	r2,0(r2)
    dd8c:	103ee83a 	callr	r2
    dd90:	e0bfff15 	stw	r2,-4(fp)
    dd94:	00000306 	br	dda4 <alt_get_errno+0x48>
    dd98:	00800074 	movhi	r2,1
    dd9c:	1096e704 	addi	r2,r2,23452
    dda0:	e0bfff15 	stw	r2,-4(fp)
    dda4:	e0bfff17 	ldw	r2,-4(fp)
}
    dda8:	e037883a 	mov	sp,fp
    ddac:	dfc00117 	ldw	ra,4(sp)
    ddb0:	df000017 	ldw	fp,0(sp)
    ddb4:	dec00204 	addi	sp,sp,8
    ddb8:	f800283a 	ret

0000ddbc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    ddbc:	deffeb04 	addi	sp,sp,-84
    ddc0:	dfc01415 	stw	ra,80(sp)
    ddc4:	df001315 	stw	fp,76(sp)
    ddc8:	df001304 	addi	fp,sp,76
    ddcc:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ddd0:	e0bffd17 	ldw	r2,-12(fp)
    ddd4:	1004803a 	cmplt	r2,r2,zero
    ddd8:	1000081e 	bne	r2,zero,ddfc <isatty+0x40>
    dddc:	e0bffd17 	ldw	r2,-12(fp)
    dde0:	10800324 	muli	r2,r2,12
    dde4:	1007883a 	mov	r3,r2
    dde8:	00800074 	movhi	r2,1
    ddec:	108b2904 	addi	r2,r2,11428
    ddf0:	1887883a 	add	r3,r3,r2
    ddf4:	e0ffff15 	stw	r3,-4(fp)
    ddf8:	00000106 	br	de00 <isatty+0x44>
    ddfc:	e03fff15 	stw	zero,-4(fp)
    de00:	e0bfff17 	ldw	r2,-4(fp)
    de04:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    de08:	e0bfed17 	ldw	r2,-76(fp)
    de0c:	1005003a 	cmpeq	r2,r2,zero
    de10:	10000f1e 	bne	r2,zero,de50 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    de14:	e0bfed17 	ldw	r2,-76(fp)
    de18:	10800017 	ldw	r2,0(r2)
    de1c:	10800817 	ldw	r2,32(r2)
    de20:	1004c03a 	cmpne	r2,r2,zero
    de24:	1000031e 	bne	r2,zero,de34 <isatty+0x78>
    {
      return 1;
    de28:	00800044 	movi	r2,1
    de2c:	e0bffe15 	stw	r2,-8(fp)
    de30:	00000c06 	br	de64 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    de34:	e17fee04 	addi	r5,fp,-72
    de38:	e13ffd17 	ldw	r4,-12(fp)
    de3c:	000dc880 	call	dc88 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    de40:	e0bfef17 	ldw	r2,-68(fp)
    de44:	10880020 	cmpeqi	r2,r2,8192
    de48:	e0bffe15 	stw	r2,-8(fp)
    de4c:	00000506 	br	de64 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    de50:	000de7c0 	call	de7c <alt_get_errno>
    de54:	1007883a 	mov	r3,r2
    de58:	00801444 	movi	r2,81
    de5c:	18800015 	stw	r2,0(r3)
    return 0;
    de60:	e03ffe15 	stw	zero,-8(fp)
    de64:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    de68:	e037883a 	mov	sp,fp
    de6c:	dfc00117 	ldw	ra,4(sp)
    de70:	df000017 	ldw	fp,0(sp)
    de74:	dec00204 	addi	sp,sp,8
    de78:	f800283a 	ret

0000de7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    de7c:	defffd04 	addi	sp,sp,-12
    de80:	dfc00215 	stw	ra,8(sp)
    de84:	df000115 	stw	fp,4(sp)
    de88:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    de8c:	00800074 	movhi	r2,1
    de90:	108ff404 	addi	r2,r2,16336
    de94:	10800017 	ldw	r2,0(r2)
    de98:	1005003a 	cmpeq	r2,r2,zero
    de9c:	1000061e 	bne	r2,zero,deb8 <alt_get_errno+0x3c>
    dea0:	00800074 	movhi	r2,1
    dea4:	108ff404 	addi	r2,r2,16336
    dea8:	10800017 	ldw	r2,0(r2)
    deac:	103ee83a 	callr	r2
    deb0:	e0bfff15 	stw	r2,-4(fp)
    deb4:	00000306 	br	dec4 <alt_get_errno+0x48>
    deb8:	00800074 	movhi	r2,1
    debc:	1096e704 	addi	r2,r2,23452
    dec0:	e0bfff15 	stw	r2,-4(fp)
    dec4:	e0bfff17 	ldw	r2,-4(fp)
}
    dec8:	e037883a 	mov	sp,fp
    decc:	dfc00117 	ldw	ra,4(sp)
    ded0:	df000017 	ldw	fp,0(sp)
    ded4:	dec00204 	addi	sp,sp,8
    ded8:	f800283a 	ret

0000dedc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    dedc:	defffe04 	addi	sp,sp,-8
    dee0:	dfc00115 	stw	ra,4(sp)
    dee4:	df000015 	stw	fp,0(sp)
    dee8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    deec:	01000074 	movhi	r4,1
    def0:	210ffb04 	addi	r4,r4,16364
    def4:	01400074 	movhi	r5,1
    def8:	29491604 	addi	r5,r5,9304
    defc:	01800074 	movhi	r6,1
    df00:	318ffb04 	addi	r6,r6,16364
    df04:	000df5c0 	call	df5c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    df08:	01000034 	movhi	r4,0
    df0c:	21000804 	addi	r4,r4,32
    df10:	01400034 	movhi	r5,0
    df14:	29400804 	addi	r5,r5,32
    df18:	01800034 	movhi	r6,0
    df1c:	31806d04 	addi	r6,r6,436
    df20:	000df5c0 	call	df5c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    df24:	01000074 	movhi	r4,1
    df28:	2105b404 	addi	r4,r4,5840
    df2c:	01400074 	movhi	r5,1
    df30:	2945b404 	addi	r5,r5,5840
    df34:	01800074 	movhi	r6,1
    df38:	31891604 	addi	r6,r6,9304
    df3c:	000df5c0 	call	df5c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    df40:	001047c0 	call	1047c <alt_dcache_flush_all>
  alt_icache_flush_all();
    df44:	001069c0 	call	1069c <alt_icache_flush_all>
}
    df48:	e037883a 	mov	sp,fp
    df4c:	dfc00117 	ldw	ra,4(sp)
    df50:	df000017 	ldw	fp,0(sp)
    df54:	dec00204 	addi	sp,sp,8
    df58:	f800283a 	ret

0000df5c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    df5c:	defffc04 	addi	sp,sp,-16
    df60:	df000315 	stw	fp,12(sp)
    df64:	df000304 	addi	fp,sp,12
    df68:	e13ffd15 	stw	r4,-12(fp)
    df6c:	e17ffe15 	stw	r5,-8(fp)
    df70:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    df74:	e0fffe17 	ldw	r3,-8(fp)
    df78:	e0bffd17 	ldw	r2,-12(fp)
    df7c:	18800e26 	beq	r3,r2,dfb8 <alt_load_section+0x5c>
  {
    while( to != end )
    df80:	00000a06 	br	dfac <alt_load_section+0x50>
    {
      *to++ = *from++;
    df84:	e0bffd17 	ldw	r2,-12(fp)
    df88:	10c00017 	ldw	r3,0(r2)
    df8c:	e0bffe17 	ldw	r2,-8(fp)
    df90:	10c00015 	stw	r3,0(r2)
    df94:	e0bffe17 	ldw	r2,-8(fp)
    df98:	10800104 	addi	r2,r2,4
    df9c:	e0bffe15 	stw	r2,-8(fp)
    dfa0:	e0bffd17 	ldw	r2,-12(fp)
    dfa4:	10800104 	addi	r2,r2,4
    dfa8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    dfac:	e0fffe17 	ldw	r3,-8(fp)
    dfb0:	e0bfff17 	ldw	r2,-4(fp)
    dfb4:	18bff31e 	bne	r3,r2,df84 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    dfb8:	e037883a 	mov	sp,fp
    dfbc:	df000017 	ldw	fp,0(sp)
    dfc0:	dec00104 	addi	sp,sp,4
    dfc4:	f800283a 	ret

0000dfc8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    dfc8:	defff804 	addi	sp,sp,-32
    dfcc:	dfc00715 	stw	ra,28(sp)
    dfd0:	df000615 	stw	fp,24(sp)
    dfd4:	df000604 	addi	fp,sp,24
    dfd8:	e13ffc15 	stw	r4,-16(fp)
    dfdc:	e17ffd15 	stw	r5,-12(fp)
    dfe0:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    dfe4:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    dfe8:	e0bffc17 	ldw	r2,-16(fp)
    dfec:	1004803a 	cmplt	r2,r2,zero
    dff0:	1000081e 	bne	r2,zero,e014 <lseek+0x4c>
    dff4:	e0bffc17 	ldw	r2,-16(fp)
    dff8:	10800324 	muli	r2,r2,12
    dffc:	1007883a 	mov	r3,r2
    e000:	00800074 	movhi	r2,1
    e004:	108b2904 	addi	r2,r2,11428
    e008:	1887883a 	add	r3,r3,r2
    e00c:	e0ffff15 	stw	r3,-4(fp)
    e010:	00000106 	br	e018 <lseek+0x50>
    e014:	e03fff15 	stw	zero,-4(fp)
    e018:	e0bfff17 	ldw	r2,-4(fp)
    e01c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    e020:	e0bffb17 	ldw	r2,-20(fp)
    e024:	1005003a 	cmpeq	r2,r2,zero
    e028:	1000111e 	bne	r2,zero,e070 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    e02c:	e0bffb17 	ldw	r2,-20(fp)
    e030:	10800017 	ldw	r2,0(r2)
    e034:	10800717 	ldw	r2,28(r2)
    e038:	1005003a 	cmpeq	r2,r2,zero
    e03c:	1000091e 	bne	r2,zero,e064 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    e040:	e0bffb17 	ldw	r2,-20(fp)
    e044:	10800017 	ldw	r2,0(r2)
    e048:	10800717 	ldw	r2,28(r2)
    e04c:	e13ffb17 	ldw	r4,-20(fp)
    e050:	e17ffd17 	ldw	r5,-12(fp)
    e054:	e1bffe17 	ldw	r6,-8(fp)
    e058:	103ee83a 	callr	r2
    e05c:	e0bffa15 	stw	r2,-24(fp)
    e060:	00000506 	br	e078 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    e064:	00bfde84 	movi	r2,-134
    e068:	e0bffa15 	stw	r2,-24(fp)
    e06c:	00000206 	br	e078 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    e070:	00bfebc4 	movi	r2,-81
    e074:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    e078:	e0bffa17 	ldw	r2,-24(fp)
    e07c:	1004403a 	cmpge	r2,r2,zero
    e080:	1000071e 	bne	r2,zero,e0a0 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    e084:	000e0b80 	call	e0b8 <alt_get_errno>
    e088:	1007883a 	mov	r3,r2
    e08c:	e0bffa17 	ldw	r2,-24(fp)
    e090:	0085c83a 	sub	r2,zero,r2
    e094:	18800015 	stw	r2,0(r3)
    rc = -1;
    e098:	00bfffc4 	movi	r2,-1
    e09c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    e0a0:	e0bffa17 	ldw	r2,-24(fp)
}
    e0a4:	e037883a 	mov	sp,fp
    e0a8:	dfc00117 	ldw	ra,4(sp)
    e0ac:	df000017 	ldw	fp,0(sp)
    e0b0:	dec00204 	addi	sp,sp,8
    e0b4:	f800283a 	ret

0000e0b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e0b8:	defffd04 	addi	sp,sp,-12
    e0bc:	dfc00215 	stw	ra,8(sp)
    e0c0:	df000115 	stw	fp,4(sp)
    e0c4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    e0c8:	00800074 	movhi	r2,1
    e0cc:	108ff404 	addi	r2,r2,16336
    e0d0:	10800017 	ldw	r2,0(r2)
    e0d4:	1005003a 	cmpeq	r2,r2,zero
    e0d8:	1000061e 	bne	r2,zero,e0f4 <alt_get_errno+0x3c>
    e0dc:	00800074 	movhi	r2,1
    e0e0:	108ff404 	addi	r2,r2,16336
    e0e4:	10800017 	ldw	r2,0(r2)
    e0e8:	103ee83a 	callr	r2
    e0ec:	e0bfff15 	stw	r2,-4(fp)
    e0f0:	00000306 	br	e100 <alt_get_errno+0x48>
    e0f4:	00800074 	movhi	r2,1
    e0f8:	1096e704 	addi	r2,r2,23452
    e0fc:	e0bfff15 	stw	r2,-4(fp)
    e100:	e0bfff17 	ldw	r2,-4(fp)
}
    e104:	e037883a 	mov	sp,fp
    e108:	dfc00117 	ldw	ra,4(sp)
    e10c:	df000017 	ldw	fp,0(sp)
    e110:	dec00204 	addi	sp,sp,8
    e114:	f800283a 	ret

0000e118 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    e118:	defffd04 	addi	sp,sp,-12
    e11c:	dfc00215 	stw	ra,8(sp)
    e120:	df000115 	stw	fp,4(sp)
    e124:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    e128:	0009883a 	mov	r4,zero
    e12c:	000e6100 	call	e610 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    e130:	000e6440 	call	e644 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    e134:	01000074 	movhi	r4,1
    e138:	21086a04 	addi	r4,r4,8616
    e13c:	01400074 	movhi	r5,1
    e140:	29486a04 	addi	r5,r5,8616
    e144:	01800074 	movhi	r6,1
    e148:	31886a04 	addi	r6,r6,8616
    e14c:	0010a5c0 	call	10a5c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    e150:	00105d40 	call	105d4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    e154:	01000074 	movhi	r4,1
    e158:	21018e04 	addi	r4,r4,1592
    e15c:	00112580 	call	11258 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    e160:	d126ff17 	ldw	r4,-25604(gp)
    e164:	d1670017 	ldw	r5,-25600(gp)
    e168:	d1a70117 	ldw	r6,-25596(gp)
    e16c:	00002dc0 	call	2dc <main>
    e170:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    e174:	01000044 	movi	r4,1
    e178:	000db000 	call	db00 <close>
  exit (result);
    e17c:	e13fff17 	ldw	r4,-4(fp)
    e180:	001126c0 	call	1126c <exit>

0000e184 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    e184:	defffe04 	addi	sp,sp,-8
    e188:	df000115 	stw	fp,4(sp)
    e18c:	df000104 	addi	fp,sp,4
    e190:	e13fff15 	stw	r4,-4(fp)
}
    e194:	e037883a 	mov	sp,fp
    e198:	df000017 	ldw	fp,0(sp)
    e19c:	dec00104 	addi	sp,sp,4
    e1a0:	f800283a 	ret

0000e1a4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    e1a4:	defffe04 	addi	sp,sp,-8
    e1a8:	df000115 	stw	fp,4(sp)
    e1ac:	df000104 	addi	fp,sp,4
    e1b0:	e13fff15 	stw	r4,-4(fp)
}
    e1b4:	e037883a 	mov	sp,fp
    e1b8:	df000017 	ldw	fp,0(sp)
    e1bc:	dec00104 	addi	sp,sp,4
    e1c0:	f800283a 	ret

0000e1c4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    e1c4:	defff704 	addi	sp,sp,-36
    e1c8:	dfc00815 	stw	ra,32(sp)
    e1cc:	df000715 	stw	fp,28(sp)
    e1d0:	df000704 	addi	fp,sp,28
    e1d4:	e13ffb15 	stw	r4,-20(fp)
    e1d8:	e17ffc15 	stw	r5,-16(fp)
    e1dc:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e1e0:	e0bffb17 	ldw	r2,-20(fp)
    e1e4:	1004803a 	cmplt	r2,r2,zero
    e1e8:	1000081e 	bne	r2,zero,e20c <read+0x48>
    e1ec:	e0bffb17 	ldw	r2,-20(fp)
    e1f0:	10800324 	muli	r2,r2,12
    e1f4:	1007883a 	mov	r3,r2
    e1f8:	00800074 	movhi	r2,1
    e1fc:	108b2904 	addi	r2,r2,11428
    e200:	1887883a 	add	r3,r3,r2
    e204:	e0ffff15 	stw	r3,-4(fp)
    e208:	00000106 	br	e210 <read+0x4c>
    e20c:	e03fff15 	stw	zero,-4(fp)
    e210:	e0bfff17 	ldw	r2,-4(fp)
    e214:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    e218:	e0bffa17 	ldw	r2,-24(fp)
    e21c:	1005003a 	cmpeq	r2,r2,zero
    e220:	1000241e 	bne	r2,zero,e2b4 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e224:	e0bffa17 	ldw	r2,-24(fp)
    e228:	10800217 	ldw	r2,8(r2)
    e22c:	108000cc 	andi	r2,r2,3
    e230:	10800060 	cmpeqi	r2,r2,1
    e234:	10001a1e 	bne	r2,zero,e2a0 <read+0xdc>
    e238:	e0bffa17 	ldw	r2,-24(fp)
    e23c:	10800017 	ldw	r2,0(r2)
    e240:	10800517 	ldw	r2,20(r2)
    e244:	1005003a 	cmpeq	r2,r2,zero
    e248:	1000151e 	bne	r2,zero,e2a0 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    e24c:	e0bffa17 	ldw	r2,-24(fp)
    e250:	10800017 	ldw	r2,0(r2)
    e254:	10800517 	ldw	r2,20(r2)
    e258:	e17ffc17 	ldw	r5,-16(fp)
    e25c:	e1bffd17 	ldw	r6,-12(fp)
    e260:	e13ffa17 	ldw	r4,-24(fp)
    e264:	103ee83a 	callr	r2
    e268:	e0bff915 	stw	r2,-28(fp)
    e26c:	e0bff917 	ldw	r2,-28(fp)
    e270:	1004403a 	cmpge	r2,r2,zero
    e274:	1000071e 	bne	r2,zero,e294 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    e278:	000e2e40 	call	e2e4 <alt_get_errno>
    e27c:	e0fff917 	ldw	r3,-28(fp)
    e280:	00c7c83a 	sub	r3,zero,r3
    e284:	10c00015 	stw	r3,0(r2)
          return -1;
    e288:	00bfffc4 	movi	r2,-1
    e28c:	e0bffe15 	stw	r2,-8(fp)
    e290:	00000e06 	br	e2cc <read+0x108>
        }
        return rval;
    e294:	e0bff917 	ldw	r2,-28(fp)
    e298:	e0bffe15 	stw	r2,-8(fp)
    e29c:	00000b06 	br	e2cc <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    e2a0:	000e2e40 	call	e2e4 <alt_get_errno>
    e2a4:	1007883a 	mov	r3,r2
    e2a8:	00800344 	movi	r2,13
    e2ac:	18800015 	stw	r2,0(r3)
    e2b0:	00000406 	br	e2c4 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    e2b4:	000e2e40 	call	e2e4 <alt_get_errno>
    e2b8:	1007883a 	mov	r3,r2
    e2bc:	00801444 	movi	r2,81
    e2c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e2c4:	00bfffc4 	movi	r2,-1
    e2c8:	e0bffe15 	stw	r2,-8(fp)
    e2cc:	e0bffe17 	ldw	r2,-8(fp)
}
    e2d0:	e037883a 	mov	sp,fp
    e2d4:	dfc00117 	ldw	ra,4(sp)
    e2d8:	df000017 	ldw	fp,0(sp)
    e2dc:	dec00204 	addi	sp,sp,8
    e2e0:	f800283a 	ret

0000e2e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e2e4:	defffd04 	addi	sp,sp,-12
    e2e8:	dfc00215 	stw	ra,8(sp)
    e2ec:	df000115 	stw	fp,4(sp)
    e2f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    e2f4:	00800074 	movhi	r2,1
    e2f8:	108ff404 	addi	r2,r2,16336
    e2fc:	10800017 	ldw	r2,0(r2)
    e300:	1005003a 	cmpeq	r2,r2,zero
    e304:	1000061e 	bne	r2,zero,e320 <alt_get_errno+0x3c>
    e308:	00800074 	movhi	r2,1
    e30c:	108ff404 	addi	r2,r2,16336
    e310:	10800017 	ldw	r2,0(r2)
    e314:	103ee83a 	callr	r2
    e318:	e0bfff15 	stw	r2,-4(fp)
    e31c:	00000306 	br	e32c <alt_get_errno+0x48>
    e320:	00800074 	movhi	r2,1
    e324:	1096e704 	addi	r2,r2,23452
    e328:	e0bfff15 	stw	r2,-4(fp)
    e32c:	e0bfff17 	ldw	r2,-4(fp)
}
    e330:	e037883a 	mov	sp,fp
    e334:	dfc00117 	ldw	ra,4(sp)
    e338:	df000017 	ldw	fp,0(sp)
    e33c:	dec00204 	addi	sp,sp,8
    e340:	f800283a 	ret

0000e344 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    e344:	defffe04 	addi	sp,sp,-8
    e348:	df000115 	stw	fp,4(sp)
    e34c:	df000104 	addi	fp,sp,4
    e350:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    e354:	e0bfff17 	ldw	r2,-4(fp)
    e358:	108000d0 	cmplti	r2,r2,3
    e35c:	10000d1e 	bne	r2,zero,e394 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    e360:	e0bfff17 	ldw	r2,-4(fp)
    e364:	00c00074 	movhi	r3,1
    e368:	18cb2904 	addi	r3,r3,11428
    e36c:	10800324 	muli	r2,r2,12
    e370:	10c5883a 	add	r2,r2,r3
    e374:	10800204 	addi	r2,r2,8
    e378:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    e37c:	e0bfff17 	ldw	r2,-4(fp)
    e380:	00c00074 	movhi	r3,1
    e384:	18cb2904 	addi	r3,r3,11428
    e388:	10800324 	muli	r2,r2,12
    e38c:	10c5883a 	add	r2,r2,r3
    e390:	10000015 	stw	zero,0(r2)
  }
}
    e394:	e037883a 	mov	sp,fp
    e398:	df000017 	ldw	fp,0(sp)
    e39c:	dec00104 	addi	sp,sp,4
    e3a0:	f800283a 	ret

0000e3a4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    e3a4:	defff804 	addi	sp,sp,-32
    e3a8:	df000715 	stw	fp,28(sp)
    e3ac:	df000704 	addi	fp,sp,28
    e3b0:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e3b4:	0005303a 	rdctl	r2,status
    e3b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e3bc:	e0fffb17 	ldw	r3,-20(fp)
    e3c0:	00bfff84 	movi	r2,-2
    e3c4:	1884703a 	and	r2,r3,r2
    e3c8:	1001703a 	wrctl	status,r2
  
  return context;
    e3cc:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    e3d0:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    e3d4:	d0a00c17 	ldw	r2,-32720(gp)
    e3d8:	10c000c4 	addi	r3,r2,3
    e3dc:	00bfff04 	movi	r2,-4
    e3e0:	1884703a 	and	r2,r3,r2
    e3e4:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    e3e8:	d0e00c17 	ldw	r3,-32720(gp)
    e3ec:	e0bffe17 	ldw	r2,-8(fp)
    e3f0:	1887883a 	add	r3,r3,r2
    e3f4:	00820034 	movhi	r2,2048
    e3f8:	10800004 	addi	r2,r2,0
    e3fc:	10c0072e 	bgeu	r2,r3,e41c <sbrk+0x78>
    e400:	e0bffd17 	ldw	r2,-12(fp)
    e404:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e408:	e0bffa17 	ldw	r2,-24(fp)
    e40c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    e410:	00bfffc4 	movi	r2,-1
    e414:	e0bfff15 	stw	r2,-4(fp)
    e418:	00000c06 	br	e44c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    e41c:	d0a00c17 	ldw	r2,-32720(gp)
    e420:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    e424:	d0e00c17 	ldw	r3,-32720(gp)
    e428:	e0bffe17 	ldw	r2,-8(fp)
    e42c:	1885883a 	add	r2,r3,r2
    e430:	d0a00c15 	stw	r2,-32720(gp)
    e434:	e0bffd17 	ldw	r2,-12(fp)
    e438:	e0bff915 	stw	r2,-28(fp)
    e43c:	e0bff917 	ldw	r2,-28(fp)
    e440:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    e444:	e0bffc17 	ldw	r2,-16(fp)
    e448:	e0bfff15 	stw	r2,-4(fp)
    e44c:	e0bfff17 	ldw	r2,-4(fp)
} 
    e450:	e037883a 	mov	sp,fp
    e454:	df000017 	ldw	fp,0(sp)
    e458:	dec00104 	addi	sp,sp,4
    e45c:	f800283a 	ret

0000e460 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    e460:	defffd04 	addi	sp,sp,-12
    e464:	dfc00215 	stw	ra,8(sp)
    e468:	df000115 	stw	fp,4(sp)
    e46c:	df000104 	addi	fp,sp,4
    e470:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    e474:	e13fff17 	ldw	r4,-4(fp)
    e478:	00103300 	call	10330 <alt_busy_sleep>
}
    e47c:	e037883a 	mov	sp,fp
    e480:	dfc00117 	ldw	ra,4(sp)
    e484:	df000017 	ldw	fp,0(sp)
    e488:	dec00204 	addi	sp,sp,8
    e48c:	f800283a 	ret

0000e490 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    e490:	defff704 	addi	sp,sp,-36
    e494:	dfc00815 	stw	ra,32(sp)
    e498:	df000715 	stw	fp,28(sp)
    e49c:	df000704 	addi	fp,sp,28
    e4a0:	e13ffb15 	stw	r4,-20(fp)
    e4a4:	e17ffc15 	stw	r5,-16(fp)
    e4a8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e4ac:	e0bffb17 	ldw	r2,-20(fp)
    e4b0:	1004803a 	cmplt	r2,r2,zero
    e4b4:	1000081e 	bne	r2,zero,e4d8 <write+0x48>
    e4b8:	e0bffb17 	ldw	r2,-20(fp)
    e4bc:	10800324 	muli	r2,r2,12
    e4c0:	1007883a 	mov	r3,r2
    e4c4:	00800074 	movhi	r2,1
    e4c8:	108b2904 	addi	r2,r2,11428
    e4cc:	1887883a 	add	r3,r3,r2
    e4d0:	e0ffff15 	stw	r3,-4(fp)
    e4d4:	00000106 	br	e4dc <write+0x4c>
    e4d8:	e03fff15 	stw	zero,-4(fp)
    e4dc:	e0bfff17 	ldw	r2,-4(fp)
    e4e0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    e4e4:	e0bffa17 	ldw	r2,-24(fp)
    e4e8:	1005003a 	cmpeq	r2,r2,zero
    e4ec:	1000241e 	bne	r2,zero,e580 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    e4f0:	e0bffa17 	ldw	r2,-24(fp)
    e4f4:	10800217 	ldw	r2,8(r2)
    e4f8:	108000cc 	andi	r2,r2,3
    e4fc:	1005003a 	cmpeq	r2,r2,zero
    e500:	10001a1e 	bne	r2,zero,e56c <write+0xdc>
    e504:	e0bffa17 	ldw	r2,-24(fp)
    e508:	10800017 	ldw	r2,0(r2)
    e50c:	10800617 	ldw	r2,24(r2)
    e510:	1005003a 	cmpeq	r2,r2,zero
    e514:	1000151e 	bne	r2,zero,e56c <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    e518:	e0bffa17 	ldw	r2,-24(fp)
    e51c:	10800017 	ldw	r2,0(r2)
    e520:	10800617 	ldw	r2,24(r2)
    e524:	e17ffc17 	ldw	r5,-16(fp)
    e528:	e1bffd17 	ldw	r6,-12(fp)
    e52c:	e13ffa17 	ldw	r4,-24(fp)
    e530:	103ee83a 	callr	r2
    e534:	e0bff915 	stw	r2,-28(fp)
    e538:	e0bff917 	ldw	r2,-28(fp)
    e53c:	1004403a 	cmpge	r2,r2,zero
    e540:	1000071e 	bne	r2,zero,e560 <write+0xd0>
      {
        ALT_ERRNO = -rval;
    e544:	000e5b00 	call	e5b0 <alt_get_errno>
    e548:	e0fff917 	ldw	r3,-28(fp)
    e54c:	00c7c83a 	sub	r3,zero,r3
    e550:	10c00015 	stw	r3,0(r2)
        return -1;
    e554:	00bfffc4 	movi	r2,-1
    e558:	e0bffe15 	stw	r2,-8(fp)
    e55c:	00000e06 	br	e598 <write+0x108>
      }
      return rval;
    e560:	e0bff917 	ldw	r2,-28(fp)
    e564:	e0bffe15 	stw	r2,-8(fp)
    e568:	00000b06 	br	e598 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    e56c:	000e5b00 	call	e5b0 <alt_get_errno>
    e570:	1007883a 	mov	r3,r2
    e574:	00800344 	movi	r2,13
    e578:	18800015 	stw	r2,0(r3)
    e57c:	00000406 	br	e590 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    e580:	000e5b00 	call	e5b0 <alt_get_errno>
    e584:	1007883a 	mov	r3,r2
    e588:	00801444 	movi	r2,81
    e58c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e590:	00bfffc4 	movi	r2,-1
    e594:	e0bffe15 	stw	r2,-8(fp)
    e598:	e0bffe17 	ldw	r2,-8(fp)
}
    e59c:	e037883a 	mov	sp,fp
    e5a0:	dfc00117 	ldw	ra,4(sp)
    e5a4:	df000017 	ldw	fp,0(sp)
    e5a8:	dec00204 	addi	sp,sp,8
    e5ac:	f800283a 	ret

0000e5b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e5b0:	defffd04 	addi	sp,sp,-12
    e5b4:	dfc00215 	stw	ra,8(sp)
    e5b8:	df000115 	stw	fp,4(sp)
    e5bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    e5c0:	00800074 	movhi	r2,1
    e5c4:	108ff404 	addi	r2,r2,16336
    e5c8:	10800017 	ldw	r2,0(r2)
    e5cc:	1005003a 	cmpeq	r2,r2,zero
    e5d0:	1000061e 	bne	r2,zero,e5ec <alt_get_errno+0x3c>
    e5d4:	00800074 	movhi	r2,1
    e5d8:	108ff404 	addi	r2,r2,16336
    e5dc:	10800017 	ldw	r2,0(r2)
    e5e0:	103ee83a 	callr	r2
    e5e4:	e0bfff15 	stw	r2,-4(fp)
    e5e8:	00000306 	br	e5f8 <alt_get_errno+0x48>
    e5ec:	00800074 	movhi	r2,1
    e5f0:	1096e704 	addi	r2,r2,23452
    e5f4:	e0bfff15 	stw	r2,-4(fp)
    e5f8:	e0bfff17 	ldw	r2,-4(fp)
}
    e5fc:	e037883a 	mov	sp,fp
    e600:	dfc00117 	ldw	ra,4(sp)
    e604:	df000017 	ldw	fp,0(sp)
    e608:	dec00204 	addi	sp,sp,8
    e60c:	f800283a 	ret

0000e610 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    e610:	defffd04 	addi	sp,sp,-12
    e614:	dfc00215 	stw	ra,8(sp)
    e618:	df000115 	stw	fp,4(sp)
    e61c:	df000104 	addi	fp,sp,4
    e620:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    e624:	0010f3c0 	call	10f3c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    e628:	00800044 	movi	r2,1
    e62c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    e630:	e037883a 	mov	sp,fp
    e634:	dfc00117 	ldw	ra,4(sp)
    e638:	df000017 	ldw	fp,0(sp)
    e63c:	dec00204 	addi	sp,sp,8
    e640:	f800283a 	ret

0000e644 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    e644:	defffe04 	addi	sp,sp,-8
    e648:	dfc00115 	stw	ra,4(sp)
    e64c:	df000015 	stw	fp,0(sp)
    e650:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    e654:	01020034 	movhi	r4,2048
    e658:	21040804 	addi	r4,r4,4128
    e65c:	000b883a 	mov	r5,zero
    e660:	000d883a 	mov	r6,zero
    e664:	01c0fa04 	movi	r7,1000
    e668:	001014c0 	call	1014c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_STAMP, timer_stamp);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    e66c:	01000074 	movhi	r4,1
    e670:	210b9304 	addi	r4,r4,11852
    e674:	000b883a 	mov	r5,zero
    e678:	018000c4 	movi	r6,3
    e67c:	000e8380 	call	e838 <altera_avalon_jtag_uart_init>
    e680:	01000074 	movhi	r4,1
    e684:	210b8904 	addi	r4,r4,11812
    e688:	000e6b80 	call	e6b8 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
    e68c:	01000074 	movhi	r4,1
    e690:	210fab04 	addi	r4,r4,16044
    e694:	000ff480 	call	ff48 <altera_avalon_lcd_16207_init>
    e698:	01000074 	movhi	r4,1
    e69c:	210fa104 	addi	r4,r4,16004
    e6a0:	000e6b80 	call	e6b8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
    e6a4:	e037883a 	mov	sp,fp
    e6a8:	dfc00117 	ldw	ra,4(sp)
    e6ac:	df000017 	ldw	fp,0(sp)
    e6b0:	dec00204 	addi	sp,sp,8
    e6b4:	f800283a 	ret

0000e6b8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    e6b8:	defffd04 	addi	sp,sp,-12
    e6bc:	dfc00215 	stw	ra,8(sp)
    e6c0:	df000115 	stw	fp,4(sp)
    e6c4:	df000104 	addi	fp,sp,4
    e6c8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    e6cc:	e13fff17 	ldw	r4,-4(fp)
    e6d0:	01400074 	movhi	r5,1
    e6d4:	294ff104 	addi	r5,r5,16324
    e6d8:	00104c00 	call	104c0 <alt_dev_llist_insert>
}
    e6dc:	e037883a 	mov	sp,fp
    e6e0:	dfc00117 	ldw	ra,4(sp)
    e6e4:	df000017 	ldw	fp,0(sp)
    e6e8:	dec00204 	addi	sp,sp,8
    e6ec:	f800283a 	ret

0000e6f0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    e6f0:	defffa04 	addi	sp,sp,-24
    e6f4:	dfc00515 	stw	ra,20(sp)
    e6f8:	df000415 	stw	fp,16(sp)
    e6fc:	df000404 	addi	fp,sp,16
    e700:	e13ffd15 	stw	r4,-12(fp)
    e704:	e17ffe15 	stw	r5,-8(fp)
    e708:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e70c:	e0bffd17 	ldw	r2,-12(fp)
    e710:	10800017 	ldw	r2,0(r2)
    e714:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    e718:	e0bffc17 	ldw	r2,-16(fp)
    e71c:	11000a04 	addi	r4,r2,40
    e720:	e0bffd17 	ldw	r2,-12(fp)
    e724:	11c00217 	ldw	r7,8(r2)
    e728:	e17ffe17 	ldw	r5,-8(fp)
    e72c:	e1bfff17 	ldw	r6,-4(fp)
    e730:	000ed380 	call	ed38 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    e734:	e037883a 	mov	sp,fp
    e738:	dfc00117 	ldw	ra,4(sp)
    e73c:	df000017 	ldw	fp,0(sp)
    e740:	dec00204 	addi	sp,sp,8
    e744:	f800283a 	ret

0000e748 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    e748:	defffa04 	addi	sp,sp,-24
    e74c:	dfc00515 	stw	ra,20(sp)
    e750:	df000415 	stw	fp,16(sp)
    e754:	df000404 	addi	fp,sp,16
    e758:	e13ffd15 	stw	r4,-12(fp)
    e75c:	e17ffe15 	stw	r5,-8(fp)
    e760:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e764:	e0bffd17 	ldw	r2,-12(fp)
    e768:	10800017 	ldw	r2,0(r2)
    e76c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    e770:	e0bffc17 	ldw	r2,-16(fp)
    e774:	11000a04 	addi	r4,r2,40
    e778:	e0bffd17 	ldw	r2,-12(fp)
    e77c:	11c00217 	ldw	r7,8(r2)
    e780:	e17ffe17 	ldw	r5,-8(fp)
    e784:	e1bfff17 	ldw	r6,-4(fp)
    e788:	000ef5c0 	call	ef5c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    e78c:	e037883a 	mov	sp,fp
    e790:	dfc00117 	ldw	ra,4(sp)
    e794:	df000017 	ldw	fp,0(sp)
    e798:	dec00204 	addi	sp,sp,8
    e79c:	f800283a 	ret

0000e7a0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    e7a0:	defffc04 	addi	sp,sp,-16
    e7a4:	dfc00315 	stw	ra,12(sp)
    e7a8:	df000215 	stw	fp,8(sp)
    e7ac:	df000204 	addi	fp,sp,8
    e7b0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e7b4:	e0bfff17 	ldw	r2,-4(fp)
    e7b8:	10800017 	ldw	r2,0(r2)
    e7bc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    e7c0:	e0bffe17 	ldw	r2,-8(fp)
    e7c4:	11000a04 	addi	r4,r2,40
    e7c8:	e0bfff17 	ldw	r2,-4(fp)
    e7cc:	11400217 	ldw	r5,8(r2)
    e7d0:	000ebd00 	call	ebd0 <altera_avalon_jtag_uart_close>
}
    e7d4:	e037883a 	mov	sp,fp
    e7d8:	dfc00117 	ldw	ra,4(sp)
    e7dc:	df000017 	ldw	fp,0(sp)
    e7e0:	dec00204 	addi	sp,sp,8
    e7e4:	f800283a 	ret

0000e7e8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    e7e8:	defffa04 	addi	sp,sp,-24
    e7ec:	dfc00515 	stw	ra,20(sp)
    e7f0:	df000415 	stw	fp,16(sp)
    e7f4:	df000404 	addi	fp,sp,16
    e7f8:	e13ffd15 	stw	r4,-12(fp)
    e7fc:	e17ffe15 	stw	r5,-8(fp)
    e800:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    e804:	e0bffd17 	ldw	r2,-12(fp)
    e808:	10800017 	ldw	r2,0(r2)
    e80c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    e810:	e0bffc17 	ldw	r2,-16(fp)
    e814:	11000a04 	addi	r4,r2,40
    e818:	e17ffe17 	ldw	r5,-8(fp)
    e81c:	e1bfff17 	ldw	r6,-4(fp)
    e820:	000ec440 	call	ec44 <altera_avalon_jtag_uart_ioctl>
}
    e824:	e037883a 	mov	sp,fp
    e828:	dfc00117 	ldw	ra,4(sp)
    e82c:	df000017 	ldw	fp,0(sp)
    e830:	dec00204 	addi	sp,sp,8
    e834:	f800283a 	ret

0000e838 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    e838:	defffa04 	addi	sp,sp,-24
    e83c:	dfc00515 	stw	ra,20(sp)
    e840:	df000415 	stw	fp,16(sp)
    e844:	df000404 	addi	fp,sp,16
    e848:	e13ffd15 	stw	r4,-12(fp)
    e84c:	e17ffe15 	stw	r5,-8(fp)
    e850:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e854:	e0fffd17 	ldw	r3,-12(fp)
    e858:	00800044 	movi	r2,1
    e85c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    e860:	e0bffd17 	ldw	r2,-12(fp)
    e864:	10800017 	ldw	r2,0(r2)
    e868:	11000104 	addi	r4,r2,4
    e86c:	e0bffd17 	ldw	r2,-12(fp)
    e870:	10800817 	ldw	r2,32(r2)
    e874:	1007883a 	mov	r3,r2
    e878:	2005883a 	mov	r2,r4
    e87c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    e880:	e13ffe17 	ldw	r4,-8(fp)
    e884:	e17fff17 	ldw	r5,-4(fp)
    e888:	d8000015 	stw	zero,0(sp)
    e88c:	01800074 	movhi	r6,1
    e890:	31ba3e04 	addi	r6,r6,-5896
    e894:	e1fffd17 	ldw	r7,-12(fp)
    e898:	00106cc0 	call	106cc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    e89c:	e0bffd17 	ldw	r2,-12(fp)
    e8a0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    e8a4:	e0bffd17 	ldw	r2,-12(fp)
    e8a8:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    e8ac:	00800074 	movhi	r2,1
    e8b0:	1096ec04 	addi	r2,r2,23472
    e8b4:	10800017 	ldw	r2,0(r2)
    e8b8:	100b883a 	mov	r5,r2
    e8bc:	01800074 	movhi	r6,1
    e8c0:	31bac804 	addi	r6,r6,-5344
    e8c4:	e1fffd17 	ldw	r7,-12(fp)
    e8c8:	00101dc0 	call	101dc <alt_alarm_start>
    e8cc:	1004403a 	cmpge	r2,r2,zero
    e8d0:	1000041e 	bne	r2,zero,e8e4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    e8d4:	e0fffd17 	ldw	r3,-12(fp)
    e8d8:	00a00034 	movhi	r2,32768
    e8dc:	10bfffc4 	addi	r2,r2,-1
    e8e0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    e8e4:	e037883a 	mov	sp,fp
    e8e8:	dfc00117 	ldw	ra,4(sp)
    e8ec:	df000017 	ldw	fp,0(sp)
    e8f0:	dec00204 	addi	sp,sp,8
    e8f4:	f800283a 	ret

0000e8f8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    e8f8:	defff804 	addi	sp,sp,-32
    e8fc:	df000715 	stw	fp,28(sp)
    e900:	df000704 	addi	fp,sp,28
    e904:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    e908:	e0bfff17 	ldw	r2,-4(fp)
    e90c:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    e910:	e0bffe17 	ldw	r2,-8(fp)
    e914:	10800017 	ldw	r2,0(r2)
    e918:	e0bffd15 	stw	r2,-12(fp)
    e91c:	00000006 	br	e920 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e920:	e0bffd17 	ldw	r2,-12(fp)
    e924:	10800104 	addi	r2,r2,4
    e928:	10800037 	ldwio	r2,0(r2)
    e92c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    e930:	e0bffc17 	ldw	r2,-16(fp)
    e934:	1080c00c 	andi	r2,r2,768
    e938:	1005003a 	cmpeq	r2,r2,zero
    e93c:	1000741e 	bne	r2,zero,eb10 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    e940:	e0bffc17 	ldw	r2,-16(fp)
    e944:	1080400c 	andi	r2,r2,256
    e948:	1005003a 	cmpeq	r2,r2,zero
    e94c:	1000351e 	bne	r2,zero,ea24 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    e950:	00800074 	movhi	r2,1
    e954:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e958:	e0bffe17 	ldw	r2,-8(fp)
    e95c:	10800a17 	ldw	r2,40(r2)
    e960:	10800044 	addi	r2,r2,1
    e964:	1081ffcc 	andi	r2,r2,2047
    e968:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    e96c:	e0bffe17 	ldw	r2,-8(fp)
    e970:	10c00b17 	ldw	r3,44(r2)
    e974:	e0bffa17 	ldw	r2,-24(fp)
    e978:	18801626 	beq	r3,r2,e9d4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    e97c:	e0bffd17 	ldw	r2,-12(fp)
    e980:	10800037 	ldwio	r2,0(r2)
    e984:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    e988:	e0bffb17 	ldw	r2,-20(fp)
    e98c:	10a0000c 	andi	r2,r2,32768
    e990:	1005003a 	cmpeq	r2,r2,zero
    e994:	10000f1e 	bne	r2,zero,e9d4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    e998:	e0bffe17 	ldw	r2,-8(fp)
    e99c:	10c00a17 	ldw	r3,40(r2)
    e9a0:	e0bffb17 	ldw	r2,-20(fp)
    e9a4:	1009883a 	mov	r4,r2
    e9a8:	e0bffe17 	ldw	r2,-8(fp)
    e9ac:	1885883a 	add	r2,r3,r2
    e9b0:	10800e04 	addi	r2,r2,56
    e9b4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e9b8:	e0bffe17 	ldw	r2,-8(fp)
    e9bc:	10800a17 	ldw	r2,40(r2)
    e9c0:	10800044 	addi	r2,r2,1
    e9c4:	10c1ffcc 	andi	r3,r2,2047
    e9c8:	e0bffe17 	ldw	r2,-8(fp)
    e9cc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    e9d0:	003fe106 	br	e958 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    e9d4:	e0bffb17 	ldw	r2,-20(fp)
    e9d8:	10bfffec 	andhi	r2,r2,65535
    e9dc:	1005003a 	cmpeq	r2,r2,zero
    e9e0:	1000101e 	bne	r2,zero,ea24 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e9e4:	e0bffe17 	ldw	r2,-8(fp)
    e9e8:	10c00817 	ldw	r3,32(r2)
    e9ec:	00bfff84 	movi	r2,-2
    e9f0:	1886703a 	and	r3,r3,r2
    e9f4:	e0bffe17 	ldw	r2,-8(fp)
    e9f8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    e9fc:	e0bffd17 	ldw	r2,-12(fp)
    ea00:	11000104 	addi	r4,r2,4
    ea04:	e0bffe17 	ldw	r2,-8(fp)
    ea08:	10800817 	ldw	r2,32(r2)
    ea0c:	1007883a 	mov	r3,r2
    ea10:	2005883a 	mov	r2,r4
    ea14:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ea18:	e0bffd17 	ldw	r2,-12(fp)
    ea1c:	10800104 	addi	r2,r2,4
    ea20:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    ea24:	e0bffc17 	ldw	r2,-16(fp)
    ea28:	1080800c 	andi	r2,r2,512
    ea2c:	1005003a 	cmpeq	r2,r2,zero
    ea30:	103fbb1e 	bne	r2,zero,e920 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    ea34:	e0bffc17 	ldw	r2,-16(fp)
    ea38:	10bfffec 	andhi	r2,r2,65535
    ea3c:	1004d43a 	srli	r2,r2,16
    ea40:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    ea44:	00001506 	br	ea9c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    ea48:	e13ffd17 	ldw	r4,-12(fp)
    ea4c:	e0bffe17 	ldw	r2,-8(fp)
    ea50:	10c00d17 	ldw	r3,52(r2)
    ea54:	e0bffe17 	ldw	r2,-8(fp)
    ea58:	1885883a 	add	r2,r3,r2
    ea5c:	10820e04 	addi	r2,r2,2104
    ea60:	10800003 	ldbu	r2,0(r2)
    ea64:	10c03fcc 	andi	r3,r2,255
    ea68:	18c0201c 	xori	r3,r3,128
    ea6c:	18ffe004 	addi	r3,r3,-128
    ea70:	2005883a 	mov	r2,r4
    ea74:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ea78:	e0bffe17 	ldw	r2,-8(fp)
    ea7c:	10800d17 	ldw	r2,52(r2)
    ea80:	10800044 	addi	r2,r2,1
    ea84:	10c1ffcc 	andi	r3,r2,2047
    ea88:	e0bffe17 	ldw	r2,-8(fp)
    ea8c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    ea90:	e0bff917 	ldw	r2,-28(fp)
    ea94:	10bfffc4 	addi	r2,r2,-1
    ea98:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    ea9c:	e0bff917 	ldw	r2,-28(fp)
    eaa0:	1005003a 	cmpeq	r2,r2,zero
    eaa4:	1000051e 	bne	r2,zero,eabc <altera_avalon_jtag_uart_irq+0x1c4>
    eaa8:	e0bffe17 	ldw	r2,-8(fp)
    eaac:	10c00d17 	ldw	r3,52(r2)
    eab0:	e0bffe17 	ldw	r2,-8(fp)
    eab4:	10800c17 	ldw	r2,48(r2)
    eab8:	18bfe31e 	bne	r3,r2,ea48 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    eabc:	e0bff917 	ldw	r2,-28(fp)
    eac0:	1005003a 	cmpeq	r2,r2,zero
    eac4:	103f961e 	bne	r2,zero,e920 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    eac8:	e0bffe17 	ldw	r2,-8(fp)
    eacc:	10c00817 	ldw	r3,32(r2)
    ead0:	00bfff44 	movi	r2,-3
    ead4:	1886703a 	and	r3,r3,r2
    ead8:	e0bffe17 	ldw	r2,-8(fp)
    eadc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    eae0:	e0bffe17 	ldw	r2,-8(fp)
    eae4:	10800017 	ldw	r2,0(r2)
    eae8:	11000104 	addi	r4,r2,4
    eaec:	e0bffe17 	ldw	r2,-8(fp)
    eaf0:	10800817 	ldw	r2,32(r2)
    eaf4:	1007883a 	mov	r3,r2
    eaf8:	2005883a 	mov	r2,r4
    eafc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    eb00:	e0bffd17 	ldw	r2,-12(fp)
    eb04:	10800104 	addi	r2,r2,4
    eb08:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    eb0c:	003f8406 	br	e920 <altera_avalon_jtag_uart_irq+0x28>
}
    eb10:	e037883a 	mov	sp,fp
    eb14:	df000017 	ldw	fp,0(sp)
    eb18:	dec00104 	addi	sp,sp,4
    eb1c:	f800283a 	ret

0000eb20 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    eb20:	defffc04 	addi	sp,sp,-16
    eb24:	df000315 	stw	fp,12(sp)
    eb28:	df000304 	addi	fp,sp,12
    eb2c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    eb30:	e0bfff17 	ldw	r2,-4(fp)
    eb34:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    eb38:	e0bffe17 	ldw	r2,-8(fp)
    eb3c:	10800017 	ldw	r2,0(r2)
    eb40:	10800104 	addi	r2,r2,4
    eb44:	10800037 	ldwio	r2,0(r2)
    eb48:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    eb4c:	e0bffd17 	ldw	r2,-12(fp)
    eb50:	1081000c 	andi	r2,r2,1024
    eb54:	1005003a 	cmpeq	r2,r2,zero
    eb58:	10000c1e 	bne	r2,zero,eb8c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    eb5c:	e0bffe17 	ldw	r2,-8(fp)
    eb60:	10800017 	ldw	r2,0(r2)
    eb64:	11000104 	addi	r4,r2,4
    eb68:	e0bffe17 	ldw	r2,-8(fp)
    eb6c:	10800817 	ldw	r2,32(r2)
    eb70:	10810014 	ori	r2,r2,1024
    eb74:	1007883a 	mov	r3,r2
    eb78:	2005883a 	mov	r2,r4
    eb7c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    eb80:	e0bffe17 	ldw	r2,-8(fp)
    eb84:	10000915 	stw	zero,36(r2)
    eb88:	00000a06 	br	ebb4 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    eb8c:	e0bffe17 	ldw	r2,-8(fp)
    eb90:	10c00917 	ldw	r3,36(r2)
    eb94:	00a00034 	movhi	r2,32768
    eb98:	10bfff04 	addi	r2,r2,-4
    eb9c:	10c00536 	bltu	r2,r3,ebb4 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    eba0:	e0bffe17 	ldw	r2,-8(fp)
    eba4:	10800917 	ldw	r2,36(r2)
    eba8:	10c00044 	addi	r3,r2,1
    ebac:	e0bffe17 	ldw	r2,-8(fp)
    ebb0:	10c00915 	stw	r3,36(r2)
    ebb4:	00800074 	movhi	r2,1
    ebb8:	1096ec04 	addi	r2,r2,23472
    ebbc:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    ebc0:	e037883a 	mov	sp,fp
    ebc4:	df000017 	ldw	fp,0(sp)
    ebc8:	dec00104 	addi	sp,sp,4
    ebcc:	f800283a 	ret

0000ebd0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    ebd0:	defffc04 	addi	sp,sp,-16
    ebd4:	df000315 	stw	fp,12(sp)
    ebd8:	df000304 	addi	fp,sp,12
    ebdc:	e13ffd15 	stw	r4,-12(fp)
    ebe0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ebe4:	00000706 	br	ec04 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    ebe8:	e0bffe17 	ldw	r2,-8(fp)
    ebec:	1090000c 	andi	r2,r2,16384
    ebf0:	1005003a 	cmpeq	r2,r2,zero
    ebf4:	1000031e 	bne	r2,zero,ec04 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    ebf8:	00bffd44 	movi	r2,-11
    ebfc:	e0bfff15 	stw	r2,-4(fp)
    ec00:	00000b06 	br	ec30 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ec04:	e0bffd17 	ldw	r2,-12(fp)
    ec08:	10c00d17 	ldw	r3,52(r2)
    ec0c:	e0bffd17 	ldw	r2,-12(fp)
    ec10:	10800c17 	ldw	r2,48(r2)
    ec14:	18800526 	beq	r3,r2,ec2c <altera_avalon_jtag_uart_close+0x5c>
    ec18:	e0bffd17 	ldw	r2,-12(fp)
    ec1c:	10c00917 	ldw	r3,36(r2)
    ec20:	e0bffd17 	ldw	r2,-12(fp)
    ec24:	10800117 	ldw	r2,4(r2)
    ec28:	18bfef36 	bltu	r3,r2,ebe8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    ec2c:	e03fff15 	stw	zero,-4(fp)
    ec30:	e0bfff17 	ldw	r2,-4(fp)
}
    ec34:	e037883a 	mov	sp,fp
    ec38:	df000017 	ldw	fp,0(sp)
    ec3c:	dec00104 	addi	sp,sp,4
    ec40:	f800283a 	ret

0000ec44 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    ec44:	defff804 	addi	sp,sp,-32
    ec48:	df000715 	stw	fp,28(sp)
    ec4c:	df000704 	addi	fp,sp,28
    ec50:	e13ffb15 	stw	r4,-20(fp)
    ec54:	e17ffc15 	stw	r5,-16(fp)
    ec58:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    ec5c:	00bff9c4 	movi	r2,-25
    ec60:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    ec64:	e0bffc17 	ldw	r2,-16(fp)
    ec68:	e0bfff15 	stw	r2,-4(fp)
    ec6c:	e0ffff17 	ldw	r3,-4(fp)
    ec70:	189a8060 	cmpeqi	r2,r3,27137
    ec74:	1000041e 	bne	r2,zero,ec88 <altera_avalon_jtag_uart_ioctl+0x44>
    ec78:	e0ffff17 	ldw	r3,-4(fp)
    ec7c:	189a80a0 	cmpeqi	r2,r3,27138
    ec80:	10001b1e 	bne	r2,zero,ecf0 <altera_avalon_jtag_uart_ioctl+0xac>
    ec84:	00002706 	br	ed24 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    ec88:	e0bffb17 	ldw	r2,-20(fp)
    ec8c:	10c00117 	ldw	r3,4(r2)
    ec90:	00a00034 	movhi	r2,32768
    ec94:	10bfffc4 	addi	r2,r2,-1
    ec98:	18802226 	beq	r3,r2,ed24 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    ec9c:	e0bffd17 	ldw	r2,-12(fp)
    eca0:	10800017 	ldw	r2,0(r2)
    eca4:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    eca8:	e0bff917 	ldw	r2,-28(fp)
    ecac:	10800090 	cmplti	r2,r2,2
    ecb0:	1000071e 	bne	r2,zero,ecd0 <altera_avalon_jtag_uart_ioctl+0x8c>
    ecb4:	e0fff917 	ldw	r3,-28(fp)
    ecb8:	00a00034 	movhi	r2,32768
    ecbc:	10bfffc4 	addi	r2,r2,-1
    ecc0:	18800326 	beq	r3,r2,ecd0 <altera_avalon_jtag_uart_ioctl+0x8c>
    ecc4:	e0bff917 	ldw	r2,-28(fp)
    ecc8:	e0bffe15 	stw	r2,-8(fp)
    eccc:	00000306 	br	ecdc <altera_avalon_jtag_uart_ioctl+0x98>
    ecd0:	00e00034 	movhi	r3,32768
    ecd4:	18ffff84 	addi	r3,r3,-2
    ecd8:	e0fffe15 	stw	r3,-8(fp)
    ecdc:	e0bffb17 	ldw	r2,-20(fp)
    ece0:	e0fffe17 	ldw	r3,-8(fp)
    ece4:	10c00115 	stw	r3,4(r2)
      rc = 0;
    ece8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    ecec:	00000d06 	br	ed24 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    ecf0:	e0bffb17 	ldw	r2,-20(fp)
    ecf4:	10c00117 	ldw	r3,4(r2)
    ecf8:	00a00034 	movhi	r2,32768
    ecfc:	10bfffc4 	addi	r2,r2,-1
    ed00:	18800826 	beq	r3,r2,ed24 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    ed04:	e13ffd17 	ldw	r4,-12(fp)
    ed08:	e0bffb17 	ldw	r2,-20(fp)
    ed0c:	10c00917 	ldw	r3,36(r2)
    ed10:	e0bffb17 	ldw	r2,-20(fp)
    ed14:	10800117 	ldw	r2,4(r2)
    ed18:	1885803a 	cmpltu	r2,r3,r2
    ed1c:	20800015 	stw	r2,0(r4)
      rc = 0;
    ed20:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    ed24:	e0bffa17 	ldw	r2,-24(fp)
}
    ed28:	e037883a 	mov	sp,fp
    ed2c:	df000017 	ldw	fp,0(sp)
    ed30:	dec00104 	addi	sp,sp,4
    ed34:	f800283a 	ret

0000ed38 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    ed38:	defff204 	addi	sp,sp,-56
    ed3c:	dfc00d15 	stw	ra,52(sp)
    ed40:	df000c15 	stw	fp,48(sp)
    ed44:	df000c04 	addi	fp,sp,48
    ed48:	e13ffb15 	stw	r4,-20(fp)
    ed4c:	e17ffc15 	stw	r5,-16(fp)
    ed50:	e1bffd15 	stw	r6,-12(fp)
    ed54:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    ed58:	e0bffc17 	ldw	r2,-16(fp)
    ed5c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ed60:	00004806 	br	ee84 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    ed64:	e0bffb17 	ldw	r2,-20(fp)
    ed68:	10800a17 	ldw	r2,40(r2)
    ed6c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    ed70:	e0bffb17 	ldw	r2,-20(fp)
    ed74:	10800b17 	ldw	r2,44(r2)
    ed78:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    ed7c:	e0fff717 	ldw	r3,-36(fp)
    ed80:	e0bff617 	ldw	r2,-40(fp)
    ed84:	18800536 	bltu	r3,r2,ed9c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    ed88:	e0bff717 	ldw	r2,-36(fp)
    ed8c:	e0fff617 	ldw	r3,-40(fp)
    ed90:	10c5c83a 	sub	r2,r2,r3
    ed94:	e0bff815 	stw	r2,-32(fp)
    ed98:	00000406 	br	edac <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    ed9c:	00820004 	movi	r2,2048
    eda0:	e0fff617 	ldw	r3,-40(fp)
    eda4:	10c5c83a 	sub	r2,r2,r3
    eda8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    edac:	e0bff817 	ldw	r2,-32(fp)
    edb0:	1005003a 	cmpeq	r2,r2,zero
    edb4:	10001f1e 	bne	r2,zero,ee34 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    edb8:	e0fffd17 	ldw	r3,-12(fp)
    edbc:	e0bff817 	ldw	r2,-32(fp)
    edc0:	1880022e 	bgeu	r3,r2,edcc <altera_avalon_jtag_uart_read+0x94>
        n = space;
    edc4:	e0bffd17 	ldw	r2,-12(fp)
    edc8:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    edcc:	e0bffb17 	ldw	r2,-20(fp)
    edd0:	10c00e04 	addi	r3,r2,56
    edd4:	e0bff617 	ldw	r2,-40(fp)
    edd8:	1887883a 	add	r3,r3,r2
    eddc:	e0bffa17 	ldw	r2,-24(fp)
    ede0:	1009883a 	mov	r4,r2
    ede4:	180b883a 	mov	r5,r3
    ede8:	e1bff817 	ldw	r6,-32(fp)
    edec:	00098a00 	call	98a0 <memcpy>
      ptr   += n;
    edf0:	e0fff817 	ldw	r3,-32(fp)
    edf4:	e0bffa17 	ldw	r2,-24(fp)
    edf8:	10c5883a 	add	r2,r2,r3
    edfc:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    ee00:	e0fffd17 	ldw	r3,-12(fp)
    ee04:	e0bff817 	ldw	r2,-32(fp)
    ee08:	1885c83a 	sub	r2,r3,r2
    ee0c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ee10:	e0fff617 	ldw	r3,-40(fp)
    ee14:	e0bff817 	ldw	r2,-32(fp)
    ee18:	1885883a 	add	r2,r3,r2
    ee1c:	10c1ffcc 	andi	r3,r2,2047
    ee20:	e0bffb17 	ldw	r2,-20(fp)
    ee24:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    ee28:	e0bffd17 	ldw	r2,-12(fp)
    ee2c:	10800048 	cmpgei	r2,r2,1
    ee30:	103fcc1e 	bne	r2,zero,ed64 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    ee34:	e0fffa17 	ldw	r3,-24(fp)
    ee38:	e0bffc17 	ldw	r2,-16(fp)
    ee3c:	1880141e 	bne	r3,r2,ee90 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    ee40:	e0bffe17 	ldw	r2,-8(fp)
    ee44:	1090000c 	andi	r2,r2,16384
    ee48:	1004c03a 	cmpne	r2,r2,zero
    ee4c:	1000101e 	bne	r2,zero,ee90 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    ee50:	e0bffb17 	ldw	r2,-20(fp)
    ee54:	10c00a17 	ldw	r3,40(r2)
    ee58:	e0bff717 	ldw	r2,-36(fp)
    ee5c:	1880051e 	bne	r3,r2,ee74 <altera_avalon_jtag_uart_read+0x13c>
    ee60:	e0bffb17 	ldw	r2,-20(fp)
    ee64:	10c00917 	ldw	r3,36(r2)
    ee68:	e0bffb17 	ldw	r2,-20(fp)
    ee6c:	10800117 	ldw	r2,4(r2)
    ee70:	18bff736 	bltu	r3,r2,ee50 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    ee74:	e0bffb17 	ldw	r2,-20(fp)
    ee78:	10c00a17 	ldw	r3,40(r2)
    ee7c:	e0bff717 	ldw	r2,-36(fp)
    ee80:	18800326 	beq	r3,r2,ee90 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ee84:	e0bffd17 	ldw	r2,-12(fp)
    ee88:	10800048 	cmpgei	r2,r2,1
    ee8c:	103fb51e 	bne	r2,zero,ed64 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    ee90:	e0fffa17 	ldw	r3,-24(fp)
    ee94:	e0bffc17 	ldw	r2,-16(fp)
    ee98:	18801926 	beq	r3,r2,ef00 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ee9c:	0005303a 	rdctl	r2,status
    eea0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eea4:	e0fff517 	ldw	r3,-44(fp)
    eea8:	00bfff84 	movi	r2,-2
    eeac:	1884703a 	and	r2,r3,r2
    eeb0:	1001703a 	wrctl	status,r2
  
  return context;
    eeb4:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    eeb8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    eebc:	e0bffb17 	ldw	r2,-20(fp)
    eec0:	10800817 	ldw	r2,32(r2)
    eec4:	10c00054 	ori	r3,r2,1
    eec8:	e0bffb17 	ldw	r2,-20(fp)
    eecc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    eed0:	e0bffb17 	ldw	r2,-20(fp)
    eed4:	10800017 	ldw	r2,0(r2)
    eed8:	11000104 	addi	r4,r2,4
    eedc:	e0bffb17 	ldw	r2,-20(fp)
    eee0:	10800817 	ldw	r2,32(r2)
    eee4:	1007883a 	mov	r3,r2
    eee8:	2005883a 	mov	r2,r4
    eeec:	10c00035 	stwio	r3,0(r2)
    eef0:	e0bff917 	ldw	r2,-28(fp)
    eef4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eef8:	e0bff417 	ldw	r2,-48(fp)
    eefc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    ef00:	e0fffa17 	ldw	r3,-24(fp)
    ef04:	e0bffc17 	ldw	r2,-16(fp)
    ef08:	18800526 	beq	r3,r2,ef20 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    ef0c:	e0fffa17 	ldw	r3,-24(fp)
    ef10:	e0bffc17 	ldw	r2,-16(fp)
    ef14:	1887c83a 	sub	r3,r3,r2
    ef18:	e0ffff15 	stw	r3,-4(fp)
    ef1c:	00000906 	br	ef44 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    ef20:	e0bffe17 	ldw	r2,-8(fp)
    ef24:	1090000c 	andi	r2,r2,16384
    ef28:	1005003a 	cmpeq	r2,r2,zero
    ef2c:	1000031e 	bne	r2,zero,ef3c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    ef30:	00bffd44 	movi	r2,-11
    ef34:	e0bfff15 	stw	r2,-4(fp)
    ef38:	00000206 	br	ef44 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    ef3c:	00bffec4 	movi	r2,-5
    ef40:	e0bfff15 	stw	r2,-4(fp)
    ef44:	e0bfff17 	ldw	r2,-4(fp)
}
    ef48:	e037883a 	mov	sp,fp
    ef4c:	dfc00117 	ldw	ra,4(sp)
    ef50:	df000017 	ldw	fp,0(sp)
    ef54:	dec00204 	addi	sp,sp,8
    ef58:	f800283a 	ret

0000ef5c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    ef5c:	defff204 	addi	sp,sp,-56
    ef60:	dfc00d15 	stw	ra,52(sp)
    ef64:	df000c15 	stw	fp,48(sp)
    ef68:	df000c04 	addi	fp,sp,48
    ef6c:	e13ffb15 	stw	r4,-20(fp)
    ef70:	e17ffc15 	stw	r5,-16(fp)
    ef74:	e1bffd15 	stw	r6,-12(fp)
    ef78:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    ef7c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    ef80:	e0bffc17 	ldw	r2,-16(fp)
    ef84:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    ef88:	00003a06 	br	f074 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    ef8c:	e0bffb17 	ldw	r2,-20(fp)
    ef90:	10800c17 	ldw	r2,48(r2)
    ef94:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    ef98:	e0bffb17 	ldw	r2,-20(fp)
    ef9c:	10800d17 	ldw	r2,52(r2)
    efa0:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    efa4:	e0fffa17 	ldw	r3,-24(fp)
    efa8:	e0bff917 	ldw	r2,-28(fp)
    efac:	1880062e 	bgeu	r3,r2,efc8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    efb0:	e0fff917 	ldw	r3,-28(fp)
    efb4:	e0bffa17 	ldw	r2,-24(fp)
    efb8:	1885c83a 	sub	r2,r3,r2
    efbc:	10bfffc4 	addi	r2,r2,-1
    efc0:	e0bff815 	stw	r2,-32(fp)
    efc4:	00000c06 	br	eff8 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    efc8:	e0bff917 	ldw	r2,-28(fp)
    efcc:	1005003a 	cmpeq	r2,r2,zero
    efd0:	1000051e 	bne	r2,zero,efe8 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    efd4:	00820004 	movi	r2,2048
    efd8:	e0fffa17 	ldw	r3,-24(fp)
    efdc:	10c5c83a 	sub	r2,r2,r3
    efe0:	e0bff815 	stw	r2,-32(fp)
    efe4:	00000406 	br	eff8 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    efe8:	0081ffc4 	movi	r2,2047
    efec:	e0fffa17 	ldw	r3,-24(fp)
    eff0:	10c5c83a 	sub	r2,r2,r3
    eff4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    eff8:	e0bff817 	ldw	r2,-32(fp)
    effc:	1005003a 	cmpeq	r2,r2,zero
    f000:	10001f1e 	bne	r2,zero,f080 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    f004:	e0fffd17 	ldw	r3,-12(fp)
    f008:	e0bff817 	ldw	r2,-32(fp)
    f00c:	1880022e 	bgeu	r3,r2,f018 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    f010:	e0bffd17 	ldw	r2,-12(fp)
    f014:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    f018:	e0bffb17 	ldw	r2,-20(fp)
    f01c:	10c20e04 	addi	r3,r2,2104
    f020:	e0bffa17 	ldw	r2,-24(fp)
    f024:	1885883a 	add	r2,r3,r2
    f028:	e0fffc17 	ldw	r3,-16(fp)
    f02c:	1009883a 	mov	r4,r2
    f030:	180b883a 	mov	r5,r3
    f034:	e1bff817 	ldw	r6,-32(fp)
    f038:	00098a00 	call	98a0 <memcpy>
      ptr   += n;
    f03c:	e0fff817 	ldw	r3,-32(fp)
    f040:	e0bffc17 	ldw	r2,-16(fp)
    f044:	10c5883a 	add	r2,r2,r3
    f048:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    f04c:	e0fffd17 	ldw	r3,-12(fp)
    f050:	e0bff817 	ldw	r2,-32(fp)
    f054:	1885c83a 	sub	r2,r3,r2
    f058:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f05c:	e0fffa17 	ldw	r3,-24(fp)
    f060:	e0bff817 	ldw	r2,-32(fp)
    f064:	1885883a 	add	r2,r3,r2
    f068:	10c1ffcc 	andi	r3,r2,2047
    f06c:	e0bffb17 	ldw	r2,-20(fp)
    f070:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f074:	e0bffd17 	ldw	r2,-12(fp)
    f078:	10800048 	cmpgei	r2,r2,1
    f07c:	103fc31e 	bne	r2,zero,ef8c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f080:	0005303a 	rdctl	r2,status
    f084:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f088:	e0fff517 	ldw	r3,-44(fp)
    f08c:	00bfff84 	movi	r2,-2
    f090:	1884703a 	and	r2,r3,r2
    f094:	1001703a 	wrctl	status,r2
  
  return context;
    f098:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    f09c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f0a0:	e0bffb17 	ldw	r2,-20(fp)
    f0a4:	10800817 	ldw	r2,32(r2)
    f0a8:	10c00094 	ori	r3,r2,2
    f0ac:	e0bffb17 	ldw	r2,-20(fp)
    f0b0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f0b4:	e0bffb17 	ldw	r2,-20(fp)
    f0b8:	10800017 	ldw	r2,0(r2)
    f0bc:	11000104 	addi	r4,r2,4
    f0c0:	e0bffb17 	ldw	r2,-20(fp)
    f0c4:	10800817 	ldw	r2,32(r2)
    f0c8:	1007883a 	mov	r3,r2
    f0cc:	2005883a 	mov	r2,r4
    f0d0:	10c00035 	stwio	r3,0(r2)
    f0d4:	e0bff717 	ldw	r2,-36(fp)
    f0d8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f0dc:	e0bff417 	ldw	r2,-48(fp)
    f0e0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    f0e4:	e0bffd17 	ldw	r2,-12(fp)
    f0e8:	10800050 	cmplti	r2,r2,1
    f0ec:	1000111e 	bne	r2,zero,f134 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    f0f0:	e0bffe17 	ldw	r2,-8(fp)
    f0f4:	1090000c 	andi	r2,r2,16384
    f0f8:	1004c03a 	cmpne	r2,r2,zero
    f0fc:	1000101e 	bne	r2,zero,f140 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    f100:	e0bffb17 	ldw	r2,-20(fp)
    f104:	10c00d17 	ldw	r3,52(r2)
    f108:	e0bff917 	ldw	r2,-28(fp)
    f10c:	1880051e 	bne	r3,r2,f124 <altera_avalon_jtag_uart_write+0x1c8>
    f110:	e0bffb17 	ldw	r2,-20(fp)
    f114:	10c00917 	ldw	r3,36(r2)
    f118:	e0bffb17 	ldw	r2,-20(fp)
    f11c:	10800117 	ldw	r2,4(r2)
    f120:	18bff736 	bltu	r3,r2,f100 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    f124:	e0bffb17 	ldw	r2,-20(fp)
    f128:	10c00d17 	ldw	r3,52(r2)
    f12c:	e0bff917 	ldw	r2,-28(fp)
    f130:	18800326 	beq	r3,r2,f140 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
    f134:	e0bffd17 	ldw	r2,-12(fp)
    f138:	10800048 	cmpgei	r2,r2,1
    f13c:	103fcd1e 	bne	r2,zero,f074 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f140:	e0fffc17 	ldw	r3,-16(fp)
    f144:	e0bff617 	ldw	r2,-40(fp)
    f148:	18800526 	beq	r3,r2,f160 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    f14c:	e0fffc17 	ldw	r3,-16(fp)
    f150:	e0bff617 	ldw	r2,-40(fp)
    f154:	1887c83a 	sub	r3,r3,r2
    f158:	e0ffff15 	stw	r3,-4(fp)
    f15c:	00000906 	br	f184 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    f160:	e0bffe17 	ldw	r2,-8(fp)
    f164:	1090000c 	andi	r2,r2,16384
    f168:	1005003a 	cmpeq	r2,r2,zero
    f16c:	1000031e 	bne	r2,zero,f17c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    f170:	00bffd44 	movi	r2,-11
    f174:	e0bfff15 	stw	r2,-4(fp)
    f178:	00000206 	br	f184 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
    f17c:	00bffec4 	movi	r2,-5
    f180:	e0bfff15 	stw	r2,-4(fp)
    f184:	e0bfff17 	ldw	r2,-4(fp)
}
    f188:	e037883a 	mov	sp,fp
    f18c:	dfc00117 	ldw	ra,4(sp)
    f190:	df000017 	ldw	fp,0(sp)
    f194:	dec00204 	addi	sp,sp,8
    f198:	f800283a 	ret

0000f19c <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
    f19c:	defffa04 	addi	sp,sp,-24
    f1a0:	dfc00515 	stw	ra,20(sp)
    f1a4:	df000415 	stw	fp,16(sp)
    f1a8:	df000404 	addi	fp,sp,16
    f1ac:	e13ffe15 	stw	r4,-8(fp)
    f1b0:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
    f1b4:	e0bffe17 	ldw	r2,-8(fp)
    f1b8:	10800017 	ldw	r2,0(r2)
    f1bc:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
    f1c0:	008003f4 	movhi	r2,15
    f1c4:	10909004 	addi	r2,r2,16960
    f1c8:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    f1cc:	e0bffe17 	ldw	r2,-8(fp)
    f1d0:	10800803 	ldbu	r2,32(r2)
    f1d4:	10803fcc 	andi	r2,r2,255
    f1d8:	1080201c 	xori	r2,r2,128
    f1dc:	10bfe004 	addi	r2,r2,-128
    f1e0:	1004c03a 	cmpne	r2,r2,zero
    f1e4:	1000161e 	bne	r2,zero,f240 <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    f1e8:	00000a06 	br	f214 <lcd_write_command+0x78>
    if (--i == 0)
    f1ec:	e0bffc17 	ldw	r2,-16(fp)
    f1f0:	10bfffc4 	addi	r2,r2,-1
    f1f4:	e0bffc15 	stw	r2,-16(fp)
    f1f8:	e0bffc17 	ldw	r2,-16(fp)
    f1fc:	1004c03a 	cmpne	r2,r2,zero
    f200:	1000041e 	bne	r2,zero,f214 <lcd_write_command+0x78>
    {
      sp->broken = 1;
    f204:	e0fffe17 	ldw	r3,-8(fp)
    f208:	00800044 	movi	r2,1
    f20c:	18800805 	stb	r2,32(r3)
      return;
    f210:	00000b06 	br	f240 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    f214:	e0bffd17 	ldw	r2,-12(fp)
    f218:	10800104 	addi	r2,r2,4
    f21c:	10800037 	ldwio	r2,0(r2)
    f220:	1080200c 	andi	r2,r2,128
    f224:	1004c03a 	cmpne	r2,r2,zero
    f228:	103ff01e 	bne	r2,zero,f1ec <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
    f22c:	01001904 	movi	r4,100
    f230:	000e4600 	call	e460 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
    f234:	e0bffd17 	ldw	r2,-12(fp)
    f238:	e0ffff03 	ldbu	r3,-4(fp)
    f23c:	10c00035 	stwio	r3,0(r2)
}
    f240:	e037883a 	mov	sp,fp
    f244:	dfc00117 	ldw	ra,4(sp)
    f248:	df000017 	ldw	fp,0(sp)
    f24c:	dec00204 	addi	sp,sp,8
    f250:	f800283a 	ret

0000f254 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
    f254:	defffa04 	addi	sp,sp,-24
    f258:	dfc00515 	stw	ra,20(sp)
    f25c:	df000415 	stw	fp,16(sp)
    f260:	df000404 	addi	fp,sp,16
    f264:	e13ffe15 	stw	r4,-8(fp)
    f268:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
    f26c:	e0bffe17 	ldw	r2,-8(fp)
    f270:	10800017 	ldw	r2,0(r2)
    f274:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
    f278:	008003f4 	movhi	r2,15
    f27c:	10909004 	addi	r2,r2,16960
    f280:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    f284:	e0bffe17 	ldw	r2,-8(fp)
    f288:	10800803 	ldbu	r2,32(r2)
    f28c:	10803fcc 	andi	r2,r2,255
    f290:	1080201c 	xori	r2,r2,128
    f294:	10bfe004 	addi	r2,r2,-128
    f298:	1004c03a 	cmpne	r2,r2,zero
    f29c:	10001d1e 	bne	r2,zero,f314 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    f2a0:	00000a06 	br	f2cc <lcd_write_data+0x78>
    if (--i == 0)
    f2a4:	e0bffc17 	ldw	r2,-16(fp)
    f2a8:	10bfffc4 	addi	r2,r2,-1
    f2ac:	e0bffc15 	stw	r2,-16(fp)
    f2b0:	e0bffc17 	ldw	r2,-16(fp)
    f2b4:	1004c03a 	cmpne	r2,r2,zero
    f2b8:	1000041e 	bne	r2,zero,f2cc <lcd_write_data+0x78>
    {
      sp->broken = 1;
    f2bc:	e0fffe17 	ldw	r3,-8(fp)
    f2c0:	00800044 	movi	r2,1
    f2c4:	18800805 	stb	r2,32(r3)
      return;
    f2c8:	00001206 	br	f314 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    f2cc:	e0bffd17 	ldw	r2,-12(fp)
    f2d0:	10800104 	addi	r2,r2,4
    f2d4:	10800037 	ldwio	r2,0(r2)
    f2d8:	1080200c 	andi	r2,r2,128
    f2dc:	1004c03a 	cmpne	r2,r2,zero
    f2e0:	103ff01e 	bne	r2,zero,f2a4 <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
    f2e4:	01001904 	movi	r4,100
    f2e8:	000e4600 	call	e460 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
    f2ec:	e0bffd17 	ldw	r2,-12(fp)
    f2f0:	10800204 	addi	r2,r2,8
    f2f4:	e0ffff03 	ldbu	r3,-4(fp)
    f2f8:	10c00035 	stwio	r3,0(r2)

  sp->address++;
    f2fc:	e0bffe17 	ldw	r2,-8(fp)
    f300:	108008c3 	ldbu	r2,35(r2)
    f304:	10800044 	addi	r2,r2,1
    f308:	1007883a 	mov	r3,r2
    f30c:	e0bffe17 	ldw	r2,-8(fp)
    f310:	10c008c5 	stb	r3,35(r2)
}
    f314:	e037883a 	mov	sp,fp
    f318:	dfc00117 	ldw	ra,4(sp)
    f31c:	df000017 	ldw	fp,0(sp)
    f320:	dec00204 	addi	sp,sp,8
    f324:	f800283a 	ret

0000f328 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
    f328:	defffc04 	addi	sp,sp,-16
    f32c:	dfc00315 	stw	ra,12(sp)
    f330:	df000215 	stw	fp,8(sp)
    f334:	df000204 	addi	fp,sp,8
    f338:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
    f33c:	e13fff17 	ldw	r4,-4(fp)
    f340:	01400044 	movi	r5,1
    f344:	000f19c0 	call	f19c <lcd_write_command>

  sp->x = 0;
    f348:	e0bfff17 	ldw	r2,-4(fp)
    f34c:	10000845 	stb	zero,33(r2)
  sp->y = 0;
    f350:	e0bfff17 	ldw	r2,-4(fp)
    f354:	10000885 	stb	zero,34(r2)
  sp->address = 0;
    f358:	e0bfff17 	ldw	r2,-4(fp)
    f35c:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    f360:	e03ffe15 	stw	zero,-8(fp)
    f364:	00001906 	br	f3cc <lcd_clear_screen+0xa4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    f368:	e0bffe17 	ldw	r2,-8(fp)
    f36c:	108018e4 	muli	r2,r2,99
    f370:	10c01004 	addi	r3,r2,64
    f374:	e0bfff17 	ldw	r2,-4(fp)
    f378:	1889883a 	add	r4,r3,r2
    f37c:	01400804 	movi	r5,32
    f380:	01801444 	movi	r6,81
    f384:	0009a200 	call	9a20 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    f388:	e0bffe17 	ldw	r2,-8(fp)
    f38c:	108018e4 	muli	r2,r2,99
    f390:	10c00c04 	addi	r3,r2,48
    f394:	e0bfff17 	ldw	r2,-4(fp)
    f398:	1889883a 	add	r4,r3,r2
    f39c:	01400804 	movi	r5,32
    f3a0:	01800404 	movi	r6,16
    f3a4:	0009a200 	call	9a20 <memset>
    sp->line[y].width = 0;
    f3a8:	e0bffe17 	ldw	r2,-8(fp)
    f3ac:	e0ffff17 	ldw	r3,-4(fp)
    f3b0:	108018e4 	muli	r2,r2,99
    f3b4:	10c5883a 	add	r2,r2,r3
    f3b8:	10802404 	addi	r2,r2,144
    f3bc:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    f3c0:	e0bffe17 	ldw	r2,-8(fp)
    f3c4:	10800044 	addi	r2,r2,1
    f3c8:	e0bffe15 	stw	r2,-8(fp)
    f3cc:	e0bffe17 	ldw	r2,-8(fp)
    f3d0:	10800090 	cmplti	r2,r2,2
    f3d4:	103fe41e 	bne	r2,zero,f368 <lcd_clear_screen+0x40>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
    f3d8:	e037883a 	mov	sp,fp
    f3dc:	dfc00117 	ldw	ra,4(sp)
    f3e0:	df000017 	ldw	fp,0(sp)
    f3e4:	dec00204 	addi	sp,sp,8
    f3e8:	f800283a 	ret

0000f3ec <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
    f3ec:	defff604 	addi	sp,sp,-40
    f3f0:	dfc00915 	stw	ra,36(sp)
    f3f4:	df000815 	stw	fp,32(sp)
    f3f8:	dc000715 	stw	r16,28(sp)
    f3fc:	df000704 	addi	fp,sp,28
    f400:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
    f404:	e0bfff17 	ldw	r2,-4(fp)
    f408:	10800943 	ldbu	r2,37(r2)
    f40c:	10803fcc 	andi	r2,r2,255
    f410:	1080201c 	xori	r2,r2,128
    f414:	10bfe004 	addi	r2,r2,-128
    f418:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    f41c:	e03ffe15 	stw	zero,-8(fp)
    f420:	00006406 	br	f5b4 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
    f424:	e0bffe17 	ldw	r2,-8(fp)
    f428:	e0ffff17 	ldw	r3,-4(fp)
    f42c:	108018e4 	muli	r2,r2,99
    f430:	10c5883a 	add	r2,r2,r3
    f434:	10802404 	addi	r2,r2,144
    f438:	10800043 	ldbu	r2,1(r2)
    f43c:	10803fcc 	andi	r2,r2,255
    f440:	1080201c 	xori	r2,r2,128
    f444:	10bfe004 	addi	r2,r2,-128
    f448:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    f44c:	e0bffe17 	ldw	r2,-8(fp)
    f450:	e0ffff17 	ldw	r3,-4(fp)
    f454:	108018e4 	muli	r2,r2,99
    f458:	10c5883a 	add	r2,r2,r3
    f45c:	10802404 	addi	r2,r2,144
    f460:	10800083 	ldbu	r2,2(r2)
    f464:	10c03fcc 	andi	r3,r2,255
    f468:	e0bffc17 	ldw	r2,-16(fp)
    f46c:	1885383a 	mul	r2,r3,r2
    f470:	1005d23a 	srai	r2,r2,8
    f474:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
    f478:	e0fffa17 	ldw	r3,-24(fp)
    f47c:	e0bffb17 	ldw	r2,-20(fp)
    f480:	18800116 	blt	r3,r2,f488 <lcd_repaint_screen+0x9c>
      offset = 0;
    f484:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
    f488:	e03ffd15 	stw	zero,-12(fp)
    f48c:	00004306 	br	f59c <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
    f490:	e43ffe17 	ldw	r16,-8(fp)
    f494:	e0fffd17 	ldw	r3,-12(fp)
    f498:	e0bffa17 	ldw	r2,-24(fp)
    f49c:	1889883a 	add	r4,r3,r2
    f4a0:	e17ffb17 	ldw	r5,-20(fp)
    f4a4:	00044980 	call	4498 <__modsi3>
    f4a8:	1009883a 	mov	r4,r2
    f4ac:	e0ffff17 	ldw	r3,-4(fp)
    f4b0:	808018e4 	muli	r2,r16,99
    f4b4:	10c5883a 	add	r2,r2,r3
    f4b8:	1105883a 	add	r2,r2,r4
    f4bc:	10801004 	addi	r2,r2,64
    f4c0:	10800003 	ldbu	r2,0(r2)
    f4c4:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
    f4c8:	e0bffe17 	ldw	r2,-8(fp)
    f4cc:	e13ffd17 	ldw	r4,-12(fp)
    f4d0:	e0ffff17 	ldw	r3,-4(fp)
    f4d4:	108018e4 	muli	r2,r2,99
    f4d8:	10c5883a 	add	r2,r2,r3
    f4dc:	1105883a 	add	r2,r2,r4
    f4e0:	10800c04 	addi	r2,r2,48
    f4e4:	10800003 	ldbu	r2,0(r2)
    f4e8:	10c03fcc 	andi	r3,r2,255
    f4ec:	18c0201c 	xori	r3,r3,128
    f4f0:	18ffe004 	addi	r3,r3,-128
    f4f4:	e0bff947 	ldb	r2,-27(fp)
    f4f8:	18802526 	beq	r3,r2,f590 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
    f4fc:	e0fffe17 	ldw	r3,-8(fp)
    f500:	d0a00d04 	addi	r2,gp,-32716
    f504:	1885883a 	add	r2,r3,r2
    f508:	10800003 	ldbu	r2,0(r2)
    f50c:	1007883a 	mov	r3,r2
    f510:	e0bffd17 	ldw	r2,-12(fp)
    f514:	1885883a 	add	r2,r3,r2
    f518:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
    f51c:	e0fff903 	ldbu	r3,-28(fp)
    f520:	e0bfff17 	ldw	r2,-4(fp)
    f524:	108008c3 	ldbu	r2,35(r2)
    f528:	10803fcc 	andi	r2,r2,255
    f52c:	1080201c 	xori	r2,r2,128
    f530:	10bfe004 	addi	r2,r2,-128
    f534:	18800926 	beq	r3,r2,f55c <lcd_repaint_screen+0x170>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
    f538:	e0fff903 	ldbu	r3,-28(fp)
    f53c:	00bfe004 	movi	r2,-128
    f540:	1884b03a 	or	r2,r3,r2
    f544:	11403fcc 	andi	r5,r2,255
    f548:	e13fff17 	ldw	r4,-4(fp)
    f54c:	000f19c0 	call	f19c <lcd_write_command>
          sp->address = address;
    f550:	e0fff903 	ldbu	r3,-28(fp)
    f554:	e0bfff17 	ldw	r2,-4(fp)
    f558:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
    f55c:	e0bff943 	ldbu	r2,-27(fp)
    f560:	11403fcc 	andi	r5,r2,255
    f564:	e13fff17 	ldw	r4,-4(fp)
    f568:	000f2540 	call	f254 <lcd_write_data>
        sp->line[y].visible[x] = c;
    f56c:	e0bffe17 	ldw	r2,-8(fp)
    f570:	e13ffd17 	ldw	r4,-12(fp)
    f574:	e0ffff17 	ldw	r3,-4(fp)
    f578:	108018e4 	muli	r2,r2,99
    f57c:	10c5883a 	add	r2,r2,r3
    f580:	1105883a 	add	r2,r2,r4
    f584:	10c00c04 	addi	r3,r2,48
    f588:	e0bff943 	ldbu	r2,-27(fp)
    f58c:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
    f590:	e0bffd17 	ldw	r2,-12(fp)
    f594:	10800044 	addi	r2,r2,1
    f598:	e0bffd15 	stw	r2,-12(fp)
    f59c:	e0bffd17 	ldw	r2,-12(fp)
    f5a0:	10800410 	cmplti	r2,r2,16
    f5a4:	103fba1e 	bne	r2,zero,f490 <lcd_repaint_screen+0xa4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    f5a8:	e0bffe17 	ldw	r2,-8(fp)
    f5ac:	10800044 	addi	r2,r2,1
    f5b0:	e0bffe15 	stw	r2,-8(fp)
    f5b4:	e0bffe17 	ldw	r2,-8(fp)
    f5b8:	10800090 	cmplti	r2,r2,2
    f5bc:	103f991e 	bne	r2,zero,f424 <lcd_repaint_screen+0x38>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
    f5c0:	e037883a 	mov	sp,fp
    f5c4:	dfc00217 	ldw	ra,8(sp)
    f5c8:	df000117 	ldw	fp,4(sp)
    f5cc:	dc000017 	ldw	r16,0(sp)
    f5d0:	dec00304 	addi	sp,sp,12
    f5d4:	f800283a 	ret

0000f5d8 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
    f5d8:	defffc04 	addi	sp,sp,-16
    f5dc:	dfc00315 	stw	ra,12(sp)
    f5e0:	df000215 	stw	fp,8(sp)
    f5e4:	df000204 	addi	fp,sp,8
    f5e8:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    f5ec:	e03ffe15 	stw	zero,-8(fp)
    f5f0:	00001d06 	br	f668 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
    f5f4:	e0bffe17 	ldw	r2,-8(fp)
    f5f8:	10800048 	cmpgei	r2,r2,1
    f5fc:	10000f1e 	bne	r2,zero,f63c <lcd_scroll_up+0x64>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    f600:	e0bffe17 	ldw	r2,-8(fp)
    f604:	108018e4 	muli	r2,r2,99
    f608:	10c01004 	addi	r3,r2,64
    f60c:	e0bfff17 	ldw	r2,-4(fp)
    f610:	1889883a 	add	r4,r3,r2
    f614:	e0bffe17 	ldw	r2,-8(fp)
    f618:	10800044 	addi	r2,r2,1
    f61c:	108018e4 	muli	r2,r2,99
    f620:	10c01004 	addi	r3,r2,64
    f624:	e0bfff17 	ldw	r2,-4(fp)
    f628:	1885883a 	add	r2,r3,r2
    f62c:	100b883a 	mov	r5,r2
    f630:	01801404 	movi	r6,80
    f634:	00098a00 	call	98a0 <memcpy>
    f638:	00000806 	br	f65c <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
    f63c:	e0bffe17 	ldw	r2,-8(fp)
    f640:	108018e4 	muli	r2,r2,99
    f644:	10c01004 	addi	r3,r2,64
    f648:	e0bfff17 	ldw	r2,-4(fp)
    f64c:	1889883a 	add	r4,r3,r2
    f650:	01400804 	movi	r5,32
    f654:	01801404 	movi	r6,80
    f658:	0009a200 	call	9a20 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    f65c:	e0bffe17 	ldw	r2,-8(fp)
    f660:	10800044 	addi	r2,r2,1
    f664:	e0bffe15 	stw	r2,-8(fp)
    f668:	e0bffe17 	ldw	r2,-8(fp)
    f66c:	10800090 	cmplti	r2,r2,2
    f670:	103fe01e 	bne	r2,zero,f5f4 <lcd_scroll_up+0x1c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
    f674:	e0bfff17 	ldw	r2,-4(fp)
    f678:	10800883 	ldbu	r2,34(r2)
    f67c:	10bfffc4 	addi	r2,r2,-1
    f680:	1007883a 	mov	r3,r2
    f684:	e0bfff17 	ldw	r2,-4(fp)
    f688:	10c00885 	stb	r3,34(r2)
}
    f68c:	e037883a 	mov	sp,fp
    f690:	dfc00117 	ldw	ra,4(sp)
    f694:	df000017 	ldw	fp,0(sp)
    f698:	dec00204 	addi	sp,sp,8
    f69c:	f800283a 	ret

0000f6a0 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
    f6a0:	defff804 	addi	sp,sp,-32
    f6a4:	dfc00715 	stw	ra,28(sp)
    f6a8:	df000615 	stw	fp,24(sp)
    f6ac:	df000604 	addi	fp,sp,24
    f6b0:	e13ffd15 	stw	r4,-12(fp)
    f6b4:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
    f6b8:	e03ffc15 	stw	zero,-16(fp)
    f6bc:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
    f6c0:	e0bffd17 	ldw	r2,-12(fp)
    f6c4:	10800a03 	ldbu	r2,40(r2)
    f6c8:	10803fcc 	andi	r2,r2,255
    f6cc:	1080201c 	xori	r2,r2,128
    f6d0:	10bfe004 	addi	r2,r2,-128
    f6d4:	108016d8 	cmpnei	r2,r2,91
    f6d8:	1000491e 	bne	r2,zero,f800 <lcd_handle_escape+0x160>
  {
    char * ptr = sp->escape+1;
    f6dc:	e0bffd17 	ldw	r2,-12(fp)
    f6e0:	10800a04 	addi	r2,r2,40
    f6e4:	10800044 	addi	r2,r2,1
    f6e8:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
    f6ec:	00000d06 	br	f724 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
    f6f0:	e0bffc17 	ldw	r2,-16(fp)
    f6f4:	10c002a4 	muli	r3,r2,10
    f6f8:	e0bffa17 	ldw	r2,-24(fp)
    f6fc:	10800003 	ldbu	r2,0(r2)
    f700:	10803fcc 	andi	r2,r2,255
    f704:	1080201c 	xori	r2,r2,128
    f708:	10bfe004 	addi	r2,r2,-128
    f70c:	1885883a 	add	r2,r3,r2
    f710:	10bff404 	addi	r2,r2,-48
    f714:	e0bffc15 	stw	r2,-16(fp)
    f718:	e0bffa17 	ldw	r2,-24(fp)
    f71c:	10800044 	addi	r2,r2,1
    f720:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
    f724:	e0bffa17 	ldw	r2,-24(fp)
    f728:	10800003 	ldbu	r2,0(r2)
    f72c:	10803fcc 	andi	r2,r2,255
    f730:	1080201c 	xori	r2,r2,128
    f734:	10bfe004 	addi	r2,r2,-128
    f738:	1007883a 	mov	r3,r2
    f73c:	00800074 	movhi	r2,1
    f740:	108ffa04 	addi	r2,r2,16360
    f744:	10800017 	ldw	r2,0(r2)
    f748:	1885883a 	add	r2,r3,r2
    f74c:	10800003 	ldbu	r2,0(r2)
    f750:	10803fcc 	andi	r2,r2,255
    f754:	1080010c 	andi	r2,r2,4
    f758:	1004c03a 	cmpne	r2,r2,zero
    f75c:	103fe41e 	bne	r2,zero,f6f0 <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    f760:	e0bffa17 	ldw	r2,-24(fp)
    f764:	10800003 	ldbu	r2,0(r2)
    f768:	10803fcc 	andi	r2,r2,255
    f76c:	1080201c 	xori	r2,r2,128
    f770:	10bfe004 	addi	r2,r2,-128
    f774:	10800ed8 	cmpnei	r2,r2,59
    f778:	1000231e 	bne	r2,zero,f808 <lcd_handle_escape+0x168>
    {
      ptr++;
    f77c:	e0bffa17 	ldw	r2,-24(fp)
    f780:	10800044 	addi	r2,r2,1
    f784:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
    f788:	00000d06 	br	f7c0 <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    f78c:	e0bffb17 	ldw	r2,-20(fp)
    f790:	10c002a4 	muli	r3,r2,10
    f794:	e0bffa17 	ldw	r2,-24(fp)
    f798:	10800003 	ldbu	r2,0(r2)
    f79c:	10803fcc 	andi	r2,r2,255
    f7a0:	1080201c 	xori	r2,r2,128
    f7a4:	10bfe004 	addi	r2,r2,-128
    f7a8:	1885883a 	add	r2,r3,r2
    f7ac:	10bff404 	addi	r2,r2,-48
    f7b0:	e0bffb15 	stw	r2,-20(fp)
    f7b4:	e0bffa17 	ldw	r2,-24(fp)
    f7b8:	10800044 	addi	r2,r2,1
    f7bc:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
    f7c0:	e0bffa17 	ldw	r2,-24(fp)
    f7c4:	10800003 	ldbu	r2,0(r2)
    f7c8:	10803fcc 	andi	r2,r2,255
    f7cc:	1080201c 	xori	r2,r2,128
    f7d0:	10bfe004 	addi	r2,r2,-128
    f7d4:	1007883a 	mov	r3,r2
    f7d8:	00800074 	movhi	r2,1
    f7dc:	108ffa04 	addi	r2,r2,16360
    f7e0:	10800017 	ldw	r2,0(r2)
    f7e4:	1885883a 	add	r2,r3,r2
    f7e8:	10800003 	ldbu	r2,0(r2)
    f7ec:	10803fcc 	andi	r2,r2,255
    f7f0:	1080010c 	andi	r2,r2,4
    f7f4:	1004c03a 	cmpne	r2,r2,zero
    f7f8:	103fe41e 	bne	r2,zero,f78c <lcd_handle_escape+0xec>
    f7fc:	00000206 	br	f808 <lcd_handle_escape+0x168>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
    f800:	00bfffc4 	movi	r2,-1
    f804:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
    f808:	e0bffe07 	ldb	r2,-8(fp)
    f80c:	e0bfff15 	stw	r2,-4(fp)
    f810:	e0ffff17 	ldw	r3,-4(fp)
    f814:	188012a0 	cmpeqi	r2,r3,74
    f818:	10002f1e 	bne	r2,zero,f8d8 <lcd_handle_escape+0x238>
    f81c:	e0ffff17 	ldw	r3,-4(fp)
    f820:	188012c8 	cmpgei	r2,r3,75
    f824:	1000041e 	bne	r2,zero,f838 <lcd_handle_escape+0x198>
    f828:	e0ffff17 	ldw	r3,-4(fp)
    f82c:	18801220 	cmpeqi	r2,r3,72
    f830:	1000081e 	bne	r2,zero,f854 <lcd_handle_escape+0x1b4>
    f834:	00004906 	br	f95c <lcd_handle_escape+0x2bc>
    f838:	e0ffff17 	ldw	r3,-4(fp)
    f83c:	188012e0 	cmpeqi	r2,r3,75
    f840:	10002b1e 	bne	r2,zero,f8f0 <lcd_handle_escape+0x250>
    f844:	e0ffff17 	ldw	r3,-4(fp)
    f848:	188019a0 	cmpeqi	r2,r3,102
    f84c:	1000011e 	bne	r2,zero,f854 <lcd_handle_escape+0x1b4>
    f850:	00004206 	br	f95c <lcd_handle_escape+0x2bc>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
    f854:	e0bffb17 	ldw	r2,-20(fp)
    f858:	10800050 	cmplti	r2,r2,1
    f85c:	1000051e 	bne	r2,zero,f874 <lcd_handle_escape+0x1d4>
      sp->x = parm2 - 1;
    f860:	e0bffb17 	ldw	r2,-20(fp)
    f864:	10bfffc4 	addi	r2,r2,-1
    f868:	1007883a 	mov	r3,r2
    f86c:	e0bffd17 	ldw	r2,-12(fp)
    f870:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
    f874:	e0bffc17 	ldw	r2,-16(fp)
    f878:	10800050 	cmplti	r2,r2,1
    f87c:	1000371e 	bne	r2,zero,f95c <lcd_handle_escape+0x2bc>
    {
      sp->y = parm1 - 1;
    f880:	e0bffc17 	ldw	r2,-16(fp)
    f884:	10bfffc4 	addi	r2,r2,-1
    f888:	1007883a 	mov	r3,r2
    f88c:	e0bffd17 	ldw	r2,-12(fp)
    f890:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
    f894:	e0bffd17 	ldw	r2,-12(fp)
    f898:	10800883 	ldbu	r2,34(r2)
    f89c:	10803fcc 	andi	r2,r2,255
    f8a0:	10800170 	cmpltui	r2,r2,5
    f8a4:	1000061e 	bne	r2,zero,f8c0 <lcd_handle_escape+0x220>
        sp->y = ALT_LCD_HEIGHT * 2;
    f8a8:	e0fffd17 	ldw	r3,-12(fp)
    f8ac:	00800104 	movi	r2,4
    f8b0:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
    f8b4:	00000206 	br	f8c0 <lcd_handle_escape+0x220>
        lcd_scroll_up(sp);
    f8b8:	e13ffd17 	ldw	r4,-12(fp)
    f8bc:	000f5d80 	call	f5d8 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
    f8c0:	e0bffd17 	ldw	r2,-12(fp)
    f8c4:	10800883 	ldbu	r2,34(r2)
    f8c8:	10803fcc 	andi	r2,r2,255
    f8cc:	108000e8 	cmpgeui	r2,r2,3
    f8d0:	103ff91e 	bne	r2,zero,f8b8 <lcd_handle_escape+0x218>
        lcd_scroll_up(sp);
    }
    break;
    f8d4:	00002106 	br	f95c <lcd_handle_escape+0x2bc>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
    f8d8:	e0bffc17 	ldw	r2,-16(fp)
    f8dc:	10800098 	cmpnei	r2,r2,2
    f8e0:	10001e1e 	bne	r2,zero,f95c <lcd_handle_escape+0x2bc>
      lcd_clear_screen(sp);
    f8e4:	e13ffd17 	ldw	r4,-12(fp)
    f8e8:	000f3280 	call	f328 <lcd_clear_screen>
    break;
    f8ec:	00001b06 	br	f95c <lcd_handle_escape+0x2bc>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
    f8f0:	e0bffc17 	ldw	r2,-16(fp)
    f8f4:	10800048 	cmpgei	r2,r2,1
    f8f8:	1000181e 	bne	r2,zero,f95c <lcd_handle_escape+0x2bc>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
    f8fc:	e0bffd17 	ldw	r2,-12(fp)
    f900:	10800843 	ldbu	r2,33(r2)
    f904:	10803fcc 	andi	r2,r2,255
    f908:	10801428 	cmpgeui	r2,r2,80
    f90c:	1000131e 	bne	r2,zero,f95c <lcd_handle_escape+0x2bc>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    f910:	e0bffd17 	ldw	r2,-12(fp)
    f914:	10800883 	ldbu	r2,34(r2)
    f918:	10803fcc 	andi	r2,r2,255
    f91c:	108018e4 	muli	r2,r2,99
    f920:	10c01004 	addi	r3,r2,64
    f924:	e0bffd17 	ldw	r2,-12(fp)
    f928:	1887883a 	add	r3,r3,r2
    f92c:	e0bffd17 	ldw	r2,-12(fp)
    f930:	10800843 	ldbu	r2,33(r2)
    f934:	10803fcc 	andi	r2,r2,255
    f938:	1889883a 	add	r4,r3,r2
    f93c:	e0bffd17 	ldw	r2,-12(fp)
    f940:	10800843 	ldbu	r2,33(r2)
    f944:	10c03fcc 	andi	r3,r2,255
    f948:	00801404 	movi	r2,80
    f94c:	10c5c83a 	sub	r2,r2,r3
    f950:	100d883a 	mov	r6,r2
    f954:	01400804 	movi	r5,32
    f958:	0009a200 	call	9a20 <memset>
    }
    break;
  }
}
    f95c:	e037883a 	mov	sp,fp
    f960:	dfc00117 	ldw	ra,4(sp)
    f964:	df000017 	ldw	fp,0(sp)
    f968:	dec00204 	addi	sp,sp,8
    f96c:	f800283a 	ret

0000f970 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
    f970:	defff204 	addi	sp,sp,-56
    f974:	dfc00d15 	stw	ra,52(sp)
    f978:	df000c15 	stw	fp,48(sp)
    f97c:	dc000b15 	stw	r16,44(sp)
    f980:	df000b04 	addi	fp,sp,44
    f984:	e13ffc15 	stw	r4,-16(fp)
    f988:	e17ffd15 	stw	r5,-12(fp)
    f98c:	e1bffe15 	stw	r6,-8(fp)
    f990:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
    f994:	e0bffe17 	ldw	r2,-8(fp)
    f998:	1007883a 	mov	r3,r2
    f99c:	e0bffd17 	ldw	r2,-12(fp)
    f9a0:	10c5883a 	add	r2,r2,r3
    f9a4:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
    f9a8:	e0fffc17 	ldw	r3,-16(fp)
    f9ac:	00800044 	movi	r2,1
    f9b0:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
    f9b4:	0000a206 	br	fc40 <altera_avalon_lcd_16207_write+0x2d0>
  {
    char c = *ptr;
    f9b8:	e0bffd17 	ldw	r2,-12(fp)
    f9bc:	10800003 	ldbu	r2,0(r2)
    f9c0:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
    f9c4:	e0bffc17 	ldw	r2,-16(fp)
    f9c8:	10800903 	ldbu	r2,36(r2)
    f9cc:	10803fcc 	andi	r2,r2,255
    f9d0:	1080201c 	xori	r2,r2,128
    f9d4:	10bfe004 	addi	r2,r2,-128
    f9d8:	1004803a 	cmplt	r2,r2,zero
    f9dc:	10003b1e 	bne	r2,zero,facc <altera_avalon_lcd_16207_write+0x15c>
    {
      unsigned int esccount = sp->esccount;
    f9e0:	e0bffc17 	ldw	r2,-16(fp)
    f9e4:	10800903 	ldbu	r2,36(r2)
    f9e8:	10803fcc 	andi	r2,r2,255
    f9ec:	1080201c 	xori	r2,r2,128
    f9f0:	10bfe004 	addi	r2,r2,-128
    f9f4:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
    f9f8:	e0bff717 	ldw	r2,-36(fp)
    f9fc:	1004c03a 	cmpne	r2,r2,zero
    fa00:	1000031e 	bne	r2,zero,fa10 <altera_avalon_lcd_16207_write+0xa0>
    fa04:	e0bff807 	ldb	r2,-32(fp)
    fa08:	108016d8 	cmpnei	r2,r2,91
    fa0c:	1000111e 	bne	r2,zero,fa54 <altera_avalon_lcd_16207_write+0xe4>
    fa10:	e0bff717 	ldw	r2,-36(fp)
    fa14:	1005003a 	cmpeq	r2,r2,zero
    fa18:	10001a1e 	bne	r2,zero,fa84 <altera_avalon_lcd_16207_write+0x114>
    fa1c:	e0bff807 	ldb	r2,-32(fp)
    fa20:	1007883a 	mov	r3,r2
    fa24:	00800074 	movhi	r2,1
    fa28:	108ffa04 	addi	r2,r2,16360
    fa2c:	10800017 	ldw	r2,0(r2)
    fa30:	1885883a 	add	r2,r3,r2
    fa34:	10800003 	ldbu	r2,0(r2)
    fa38:	10803fcc 	andi	r2,r2,255
    fa3c:	1080010c 	andi	r2,r2,4
    fa40:	1004c03a 	cmpne	r2,r2,zero
    fa44:	10000f1e 	bne	r2,zero,fa84 <altera_avalon_lcd_16207_write+0x114>
    fa48:	e0bff807 	ldb	r2,-32(fp)
    fa4c:	10800ee0 	cmpeqi	r2,r2,59
    fa50:	10000c1e 	bne	r2,zero,fa84 <altera_avalon_lcd_16207_write+0x114>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
    fa54:	e0fff717 	ldw	r3,-36(fp)
    fa58:	e0bffc17 	ldw	r2,-16(fp)
    fa5c:	1885883a 	add	r2,r3,r2
    fa60:	10800a04 	addi	r2,r2,40
    fa64:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
    fa68:	e17ff807 	ldb	r5,-32(fp)
    fa6c:	e13ffc17 	ldw	r4,-16(fp)
    fa70:	000f6a00 	call	f6a0 <lcd_handle_escape>

        sp->esccount = -1;
    fa74:	e0fffc17 	ldw	r3,-16(fp)
    fa78:	00bfffc4 	movi	r2,-1
    fa7c:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
    fa80:	00006c06 	br	fc34 <altera_avalon_lcd_16207_write+0x2c4>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
    fa84:	e0bffc17 	ldw	r2,-16(fp)
    fa88:	10800903 	ldbu	r2,36(r2)
    fa8c:	10803fcc 	andi	r2,r2,255
    fa90:	108001e8 	cmpgeui	r2,r2,7
    fa94:	1000671e 	bne	r2,zero,fc34 <altera_avalon_lcd_16207_write+0x2c4>
      {
        sp->escape[esccount] = c;
    fa98:	e0fff717 	ldw	r3,-36(fp)
    fa9c:	e0bffc17 	ldw	r2,-16(fp)
    faa0:	1885883a 	add	r2,r3,r2
    faa4:	10c00a04 	addi	r3,r2,40
    faa8:	e0bff803 	ldbu	r2,-32(fp)
    faac:	18800005 	stb	r2,0(r3)
        sp->esccount++;
    fab0:	e0bffc17 	ldw	r2,-16(fp)
    fab4:	10800903 	ldbu	r2,36(r2)
    fab8:	10800044 	addi	r2,r2,1
    fabc:	1007883a 	mov	r3,r2
    fac0:	e0bffc17 	ldw	r2,-16(fp)
    fac4:	10c00905 	stb	r3,36(r2)
    fac8:	00005a06 	br	fc34 <altera_avalon_lcd_16207_write+0x2c4>
      }
    }
    else if (c == 27) /* ESC */
    facc:	e0bff807 	ldb	r2,-32(fp)
    fad0:	108006d8 	cmpnei	r2,r2,27
    fad4:	1000031e 	bne	r2,zero,fae4 <altera_avalon_lcd_16207_write+0x174>
    {
      sp->esccount = 0;
    fad8:	e0bffc17 	ldw	r2,-16(fp)
    fadc:	10000905 	stb	zero,36(r2)
    fae0:	00005406 	br	fc34 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\r')
    fae4:	e0bff807 	ldb	r2,-32(fp)
    fae8:	10800358 	cmpnei	r2,r2,13
    faec:	1000031e 	bne	r2,zero,fafc <altera_avalon_lcd_16207_write+0x18c>
    {
      sp->x = 0;
    faf0:	e0bffc17 	ldw	r2,-16(fp)
    faf4:	10000845 	stb	zero,33(r2)
    faf8:	00004e06 	br	fc34 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\n')
    fafc:	e0bff807 	ldb	r2,-32(fp)
    fb00:	10800298 	cmpnei	r2,r2,10
    fb04:	1000101e 	bne	r2,zero,fb48 <altera_avalon_lcd_16207_write+0x1d8>
    {
      sp->x = 0;
    fb08:	e0bffc17 	ldw	r2,-16(fp)
    fb0c:	10000845 	stb	zero,33(r2)
      sp->y++;
    fb10:	e0bffc17 	ldw	r2,-16(fp)
    fb14:	10800883 	ldbu	r2,34(r2)
    fb18:	10800044 	addi	r2,r2,1
    fb1c:	1007883a 	mov	r3,r2
    fb20:	e0bffc17 	ldw	r2,-16(fp)
    fb24:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
    fb28:	e0bffc17 	ldw	r2,-16(fp)
    fb2c:	10800883 	ldbu	r2,34(r2)
    fb30:	10803fcc 	andi	r2,r2,255
    fb34:	108000f0 	cmpltui	r2,r2,3
    fb38:	10003e1e 	bne	r2,zero,fc34 <altera_avalon_lcd_16207_write+0x2c4>
        lcd_scroll_up(sp);
    fb3c:	e13ffc17 	ldw	r4,-16(fp)
    fb40:	000f5d80 	call	f5d8 <lcd_scroll_up>
    fb44:	00003b06 	br	fc34 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\b')
    fb48:	e0bff807 	ldb	r2,-32(fp)
    fb4c:	10800218 	cmpnei	r2,r2,8
    fb50:	10000c1e 	bne	r2,zero,fb84 <altera_avalon_lcd_16207_write+0x214>
    {
      if (sp->x > 0)
    fb54:	e0bffc17 	ldw	r2,-16(fp)
    fb58:	10800843 	ldbu	r2,33(r2)
    fb5c:	10803fcc 	andi	r2,r2,255
    fb60:	1005003a 	cmpeq	r2,r2,zero
    fb64:	1000331e 	bne	r2,zero,fc34 <altera_avalon_lcd_16207_write+0x2c4>
        sp->x--;
    fb68:	e0bffc17 	ldw	r2,-16(fp)
    fb6c:	10800843 	ldbu	r2,33(r2)
    fb70:	10bfffc4 	addi	r2,r2,-1
    fb74:	1007883a 	mov	r3,r2
    fb78:	e0bffc17 	ldw	r2,-16(fp)
    fb7c:	10c00845 	stb	r3,33(r2)
    fb80:	00002c06 	br	fc34 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (isprint(c))
    fb84:	e0bff807 	ldb	r2,-32(fp)
    fb88:	1007883a 	mov	r3,r2
    fb8c:	00800074 	movhi	r2,1
    fb90:	108ffa04 	addi	r2,r2,16360
    fb94:	10800017 	ldw	r2,0(r2)
    fb98:	1885883a 	add	r2,r3,r2
    fb9c:	10800003 	ldbu	r2,0(r2)
    fba0:	10803fcc 	andi	r2,r2,255
    fba4:	1080201c 	xori	r2,r2,128
    fba8:	10bfe004 	addi	r2,r2,-128
    fbac:	108025cc 	andi	r2,r2,151
    fbb0:	1005003a 	cmpeq	r2,r2,zero
    fbb4:	10001f1e 	bne	r2,zero,fc34 <altera_avalon_lcd_16207_write+0x2c4>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
    fbb8:	e0bffc17 	ldw	r2,-16(fp)
    fbbc:	10800883 	ldbu	r2,34(r2)
    fbc0:	10803fcc 	andi	r2,r2,255
    fbc4:	108000b0 	cmpltui	r2,r2,2
    fbc8:	1000021e 	bne	r2,zero,fbd4 <altera_avalon_lcd_16207_write+0x264>
        lcd_scroll_up(sp);
    fbcc:	e13ffc17 	ldw	r4,-16(fp)
    fbd0:	000f5d80 	call	f5d8 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
    fbd4:	e0bffc17 	ldw	r2,-16(fp)
    fbd8:	10800843 	ldbu	r2,33(r2)
    fbdc:	10803fcc 	andi	r2,r2,255
    fbe0:	10801428 	cmpgeui	r2,r2,80
    fbe4:	10000d1e 	bne	r2,zero,fc1c <altera_avalon_lcd_16207_write+0x2ac>
        sp->line[sp->y].data[sp->x] = c;
    fbe8:	e0bffc17 	ldw	r2,-16(fp)
    fbec:	10800883 	ldbu	r2,34(r2)
    fbf0:	11003fcc 	andi	r4,r2,255
    fbf4:	e0bffc17 	ldw	r2,-16(fp)
    fbf8:	10800843 	ldbu	r2,33(r2)
    fbfc:	11403fcc 	andi	r5,r2,255
    fc00:	e0fffc17 	ldw	r3,-16(fp)
    fc04:	208018e4 	muli	r2,r4,99
    fc08:	10c5883a 	add	r2,r2,r3
    fc0c:	1145883a 	add	r2,r2,r5
    fc10:	10c01004 	addi	r3,r2,64
    fc14:	e0bff803 	ldbu	r2,-32(fp)
    fc18:	18800005 	stb	r2,0(r3)

      sp->x++;
    fc1c:	e0bffc17 	ldw	r2,-16(fp)
    fc20:	10800843 	ldbu	r2,33(r2)
    fc24:	10800044 	addi	r2,r2,1
    fc28:	1007883a 	mov	r3,r2
    fc2c:	e0bffc17 	ldw	r2,-16(fp)
    fc30:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
    fc34:	e0bffd17 	ldw	r2,-12(fp)
    fc38:	10800044 	addi	r2,r2,1
    fc3c:	e0bffd15 	stw	r2,-12(fp)
    fc40:	e0fffd17 	ldw	r3,-12(fp)
    fc44:	e0bffb17 	ldw	r2,-20(fp)
    fc48:	18bf5b36 	bltu	r3,r2,f9b8 <altera_avalon_lcd_16207_write+0x48>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
    fc4c:	00800404 	movi	r2,16
    fc50:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    fc54:	e03ffa15 	stw	zero,-24(fp)
    fc58:	00003606 	br	fd34 <altera_avalon_lcd_16207_write+0x3c4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
    fc5c:	00801404 	movi	r2,80
    fc60:	e0bff615 	stw	r2,-40(fp)
    fc64:	00001106 	br	fcac <altera_avalon_lcd_16207_write+0x33c>
      if (sp->line[y].data[width-1] != ' ')
    fc68:	e13ffa17 	ldw	r4,-24(fp)
    fc6c:	e0bff617 	ldw	r2,-40(fp)
    fc70:	117fffc4 	addi	r5,r2,-1
    fc74:	e0fffc17 	ldw	r3,-16(fp)
    fc78:	208018e4 	muli	r2,r4,99
    fc7c:	10c5883a 	add	r2,r2,r3
    fc80:	1145883a 	add	r2,r2,r5
    fc84:	10801004 	addi	r2,r2,64
    fc88:	10800003 	ldbu	r2,0(r2)
    fc8c:	10803fcc 	andi	r2,r2,255
    fc90:	1080201c 	xori	r2,r2,128
    fc94:	10bfe004 	addi	r2,r2,-128
    fc98:	10800818 	cmpnei	r2,r2,32
    fc9c:	1000061e 	bne	r2,zero,fcb8 <altera_avalon_lcd_16207_write+0x348>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
    fca0:	e0bff617 	ldw	r2,-40(fp)
    fca4:	10bfffc4 	addi	r2,r2,-1
    fca8:	e0bff615 	stw	r2,-40(fp)
    fcac:	e0bff617 	ldw	r2,-40(fp)
    fcb0:	10800048 	cmpgei	r2,r2,1
    fcb4:	103fec1e 	bne	r2,zero,fc68 <altera_avalon_lcd_16207_write+0x2f8>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
    fcb8:	e0bff617 	ldw	r2,-40(fp)
    fcbc:	10800448 	cmpgei	r2,r2,17
    fcc0:	1000031e 	bne	r2,zero,fcd0 <altera_avalon_lcd_16207_write+0x360>
      width = ALT_LCD_WIDTH;
    fcc4:	00800404 	movi	r2,16
    fcc8:	e0bff615 	stw	r2,-40(fp)
    fccc:	00000306 	br	fcdc <altera_avalon_lcd_16207_write+0x36c>
    else
      width++;
    fcd0:	e0bff617 	ldw	r2,-40(fp)
    fcd4:	10800044 	addi	r2,r2,1
    fcd8:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
    fcdc:	e13ffa17 	ldw	r4,-24(fp)
    fce0:	e0bff617 	ldw	r2,-40(fp)
    fce4:	100b883a 	mov	r5,r2
    fce8:	e0fffc17 	ldw	r3,-16(fp)
    fcec:	208018e4 	muli	r2,r4,99
    fcf0:	10c5883a 	add	r2,r2,r3
    fcf4:	10802404 	addi	r2,r2,144
    fcf8:	11400045 	stb	r5,1(r2)
    if (widthmax < width)
    fcfc:	e0fff917 	ldw	r3,-28(fp)
    fd00:	e0bff617 	ldw	r2,-40(fp)
    fd04:	1880020e 	bge	r3,r2,fd10 <altera_avalon_lcd_16207_write+0x3a0>
      widthmax = width;
    fd08:	e0bff617 	ldw	r2,-40(fp)
    fd0c:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
    fd10:	e0bffa17 	ldw	r2,-24(fp)
    fd14:	e0fffc17 	ldw	r3,-16(fp)
    fd18:	108018e4 	muli	r2,r2,99
    fd1c:	10c5883a 	add	r2,r2,r3
    fd20:	10802404 	addi	r2,r2,144
    fd24:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    fd28:	e0bffa17 	ldw	r2,-24(fp)
    fd2c:	10800044 	addi	r2,r2,1
    fd30:	e0bffa15 	stw	r2,-24(fp)
    fd34:	e0bffa17 	ldw	r2,-24(fp)
    fd38:	10800090 	cmplti	r2,r2,2
    fd3c:	103fc71e 	bne	r2,zero,fc5c <altera_avalon_lcd_16207_write+0x2ec>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
    fd40:	e0bff917 	ldw	r2,-28(fp)
    fd44:	10800448 	cmpgei	r2,r2,17
    fd48:	1000031e 	bne	r2,zero,fd58 <altera_avalon_lcd_16207_write+0x3e8>
    sp->scrollmax = 0;
    fd4c:	e0bffc17 	ldw	r2,-16(fp)
    fd50:	10000985 	stb	zero,38(r2)
    fd54:	00002d06 	br	fe0c <altera_avalon_lcd_16207_write+0x49c>
  else
  {
    widthmax *= 2;
    fd58:	e0bff917 	ldw	r2,-28(fp)
    fd5c:	1085883a 	add	r2,r2,r2
    fd60:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
    fd64:	e0bff917 	ldw	r2,-28(fp)
    fd68:	1007883a 	mov	r3,r2
    fd6c:	e0bffc17 	ldw	r2,-16(fp)
    fd70:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    fd74:	e03ffa15 	stw	zero,-24(fp)
    fd78:	00002106 	br	fe00 <altera_avalon_lcd_16207_write+0x490>
      if (sp->line[y].width > ALT_LCD_WIDTH)
    fd7c:	e0bffa17 	ldw	r2,-24(fp)
    fd80:	e0fffc17 	ldw	r3,-16(fp)
    fd84:	108018e4 	muli	r2,r2,99
    fd88:	10c5883a 	add	r2,r2,r3
    fd8c:	10802404 	addi	r2,r2,144
    fd90:	10800043 	ldbu	r2,1(r2)
    fd94:	10803fcc 	andi	r2,r2,255
    fd98:	1080201c 	xori	r2,r2,128
    fd9c:	10bfe004 	addi	r2,r2,-128
    fda0:	10800450 	cmplti	r2,r2,17
    fda4:	1000131e 	bne	r2,zero,fdf4 <altera_avalon_lcd_16207_write+0x484>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
    fda8:	e43ffa17 	ldw	r16,-24(fp)
    fdac:	e0bffa17 	ldw	r2,-24(fp)
    fdb0:	e0fffc17 	ldw	r3,-16(fp)
    fdb4:	108018e4 	muli	r2,r2,99
    fdb8:	10c5883a 	add	r2,r2,r3
    fdbc:	10802404 	addi	r2,r2,144
    fdc0:	10800043 	ldbu	r2,1(r2)
    fdc4:	10803fcc 	andi	r2,r2,255
    fdc8:	1080201c 	xori	r2,r2,128
    fdcc:	10bfe004 	addi	r2,r2,-128
    fdd0:	1008923a 	slli	r4,r2,8
    fdd4:	e17ff917 	ldw	r5,-28(fp)
    fdd8:	00044380 	call	4438 <__divsi3>
    fddc:	1009883a 	mov	r4,r2
    fde0:	e0fffc17 	ldw	r3,-16(fp)
    fde4:	808018e4 	muli	r2,r16,99
    fde8:	10c5883a 	add	r2,r2,r3
    fdec:	10802404 	addi	r2,r2,144
    fdf0:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    fdf4:	e0bffa17 	ldw	r2,-24(fp)
    fdf8:	10800044 	addi	r2,r2,1
    fdfc:	e0bffa15 	stw	r2,-24(fp)
    fe00:	e0bffa17 	ldw	r2,-24(fp)
    fe04:	10800090 	cmplti	r2,r2,2
    fe08:	103fdc1e 	bne	r2,zero,fd7c <altera_avalon_lcd_16207_write+0x40c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
    fe0c:	e0bffc17 	ldw	r2,-16(fp)
    fe10:	10800943 	ldbu	r2,37(r2)
    fe14:	10803fcc 	andi	r2,r2,255
    fe18:	1080201c 	xori	r2,r2,128
    fe1c:	10bfe004 	addi	r2,r2,-128
    fe20:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
    fe24:	e13ffc17 	ldw	r4,-16(fp)
    fe28:	000f3ec0 	call	f3ec <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
    fe2c:	e0bffc17 	ldw	r2,-16(fp)
    fe30:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
    fe34:	e0bffc17 	ldw	r2,-16(fp)
    fe38:	10800943 	ldbu	r2,37(r2)
    fe3c:	10c03fcc 	andi	r3,r2,255
    fe40:	18c0201c 	xori	r3,r3,128
    fe44:	18ffe004 	addi	r3,r3,-128
    fe48:	e0bff517 	ldw	r2,-44(fp)
    fe4c:	18800426 	beq	r3,r2,fe60 <altera_avalon_lcd_16207_write+0x4f0>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
    fe50:	e0fffc17 	ldw	r3,-16(fp)
    fe54:	00800044 	movi	r2,1
    fe58:	188009c5 	stb	r2,39(r3)
  }
    fe5c:	003feb06 	br	fe0c <altera_avalon_lcd_16207_write+0x49c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
    fe60:	e0bffe17 	ldw	r2,-8(fp)
}
    fe64:	e037883a 	mov	sp,fp
    fe68:	dfc00217 	ldw	ra,8(sp)
    fe6c:	df000117 	ldw	fp,4(sp)
    fe70:	dc000017 	ldw	r16,0(sp)
    fe74:	dec00304 	addi	sp,sp,12
    fe78:	f800283a 	ret

0000fe7c <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
    fe7c:	defffc04 	addi	sp,sp,-16
    fe80:	dfc00315 	stw	ra,12(sp)
    fe84:	df000215 	stw	fp,8(sp)
    fe88:	df000204 	addi	fp,sp,8
    fe8c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
    fe90:	e0bfff17 	ldw	r2,-4(fp)
    fe94:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
    fe98:	e0bffe17 	ldw	r2,-8(fp)
    fe9c:	10800943 	ldbu	r2,37(r2)
    fea0:	10803fcc 	andi	r2,r2,255
    fea4:	1080201c 	xori	r2,r2,128
    fea8:	10bfe004 	addi	r2,r2,-128
    feac:	10c00044 	addi	r3,r2,1
    feb0:	e0bffe17 	ldw	r2,-8(fp)
    feb4:	10800983 	ldbu	r2,38(r2)
    feb8:	10803fcc 	andi	r2,r2,255
    febc:	1080201c 	xori	r2,r2,128
    fec0:	10bfe004 	addi	r2,r2,-128
    fec4:	18800316 	blt	r3,r2,fed4 <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
    fec8:	e0bffe17 	ldw	r2,-8(fp)
    fecc:	10000945 	stb	zero,37(r2)
    fed0:	00000606 	br	feec <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
    fed4:	e0bffe17 	ldw	r2,-8(fp)
    fed8:	10800943 	ldbu	r2,37(r2)
    fedc:	10800044 	addi	r2,r2,1
    fee0:	1007883a 	mov	r3,r2
    fee4:	e0bffe17 	ldw	r2,-8(fp)
    fee8:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
    feec:	e0bffe17 	ldw	r2,-8(fp)
    fef0:	10800983 	ldbu	r2,38(r2)
    fef4:	10803fcc 	andi	r2,r2,255
    fef8:	1080201c 	xori	r2,r2,128
    fefc:	10bfe004 	addi	r2,r2,-128
    ff00:	10800050 	cmplti	r2,r2,1
    ff04:	1000091e 	bne	r2,zero,ff2c <alt_lcd_16207_timeout+0xb0>
    ff08:	e0bffe17 	ldw	r2,-8(fp)
    ff0c:	108009c3 	ldbu	r2,39(r2)
    ff10:	10803fcc 	andi	r2,r2,255
    ff14:	1080201c 	xori	r2,r2,128
    ff18:	10bfe004 	addi	r2,r2,-128
    ff1c:	1004c03a 	cmpne	r2,r2,zero
    ff20:	1000021e 	bne	r2,zero,ff2c <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
    ff24:	e13ffe17 	ldw	r4,-8(fp)
    ff28:	000f3ec0 	call	f3ec <lcd_repaint_screen>

  return sp->period;
    ff2c:	e0bffe17 	ldw	r2,-8(fp)
    ff30:	10800717 	ldw	r2,28(r2)
}
    ff34:	e037883a 	mov	sp,fp
    ff38:	dfc00117 	ldw	ra,4(sp)
    ff3c:	df000017 	ldw	fp,0(sp)
    ff40:	dec00204 	addi	sp,sp,8
    ff44:	f800283a 	ret

0000ff48 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
    ff48:	defffc04 	addi	sp,sp,-16
    ff4c:	dfc00315 	stw	ra,12(sp)
    ff50:	df000215 	stw	fp,8(sp)
    ff54:	df000204 	addi	fp,sp,8
    ff58:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
    ff5c:	e0bfff17 	ldw	r2,-4(fp)
    ff60:	10800017 	ldw	r2,0(r2)
    ff64:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
    ff68:	e0bfff17 	ldw	r2,-4(fp)
    ff6c:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
    ff70:	010ea604 	movi	r4,15000
    ff74:	000e4600 	call	e460 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
    ff78:	e0bffe17 	ldw	r2,-8(fp)
    ff7c:	1007883a 	mov	r3,r2
    ff80:	00800c04 	movi	r2,48
    ff84:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
    ff88:	01040104 	movi	r4,4100
    ff8c:	000e4600 	call	e460 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
    ff90:	e0bffe17 	ldw	r2,-8(fp)
    ff94:	1007883a 	mov	r3,r2
    ff98:	00800c04 	movi	r2,48
    ff9c:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
    ffa0:	0100fa04 	movi	r4,1000
    ffa4:	000e4600 	call	e460 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
    ffa8:	e0bffe17 	ldw	r2,-8(fp)
    ffac:	1007883a 	mov	r3,r2
    ffb0:	00800c04 	movi	r2,48
    ffb4:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
    ffb8:	e13fff17 	ldw	r4,-4(fp)
    ffbc:	01400e04 	movi	r5,56
    ffc0:	000f19c0 	call	f19c <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
    ffc4:	e13fff17 	ldw	r4,-4(fp)
    ffc8:	01400204 	movi	r5,8
    ffcc:	000f19c0 	call	f19c <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
    ffd0:	e13fff17 	ldw	r4,-4(fp)
    ffd4:	000f3280 	call	f328 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
    ffd8:	e13fff17 	ldw	r4,-4(fp)
    ffdc:	01400184 	movi	r5,6
    ffe0:	000f19c0 	call	f19c <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
    ffe4:	e13fff17 	ldw	r4,-4(fp)
    ffe8:	01400304 	movi	r5,12
    ffec:	000f19c0 	call	f19c <lcd_write_command>

  sp->esccount = -1;
    fff0:	e0ffff17 	ldw	r3,-4(fp)
    fff4:	00bfffc4 	movi	r2,-1
    fff8:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
    fffc:	e0bfff17 	ldw	r2,-4(fp)
   10000:	11000a04 	addi	r4,r2,40
   10004:	000b883a 	mov	r5,zero
   10008:	01800204 	movi	r6,8
   1000c:	0009a200 	call	9a20 <memset>

  sp->scrollpos = 0;
   10010:	e0bfff17 	ldw	r2,-4(fp)
   10014:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
   10018:	e0bfff17 	ldw	r2,-4(fp)
   1001c:	10000985 	stb	zero,38(r2)
  sp->active = 0;
   10020:	e0bfff17 	ldw	r2,-4(fp)
   10024:	100009c5 	stb	zero,39(r2)
   10028:	00800074 	movhi	r2,1
   1002c:	1096ec04 	addi	r2,r2,23472
   10030:	10800017 	ldw	r2,0(r2)
   10034:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
   10038:	01400284 	movi	r5,10
   1003c:	00044f80 	call	44f8 <__udivsi3>
   10040:	1007883a 	mov	r3,r2
   10044:	e0bfff17 	ldw	r2,-4(fp)
   10048:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
   1004c:	e0bfff17 	ldw	r2,-4(fp)
   10050:	11000104 	addi	r4,r2,4
   10054:	e0bfff17 	ldw	r2,-4(fp)
   10058:	10800717 	ldw	r2,28(r2)
   1005c:	100b883a 	mov	r5,r2
   10060:	01800074 	movhi	r6,1
   10064:	31bf9f04 	addi	r6,r6,-388
   10068:	e1ffff17 	ldw	r7,-4(fp)
   1006c:	00101dc0 	call	101dc <alt_alarm_start>
}
   10070:	e037883a 	mov	sp,fp
   10074:	dfc00117 	ldw	ra,4(sp)
   10078:	df000017 	ldw	fp,0(sp)
   1007c:	dec00204 	addi	sp,sp,8
   10080:	f800283a 	ret

00010084 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
   10084:	defffa04 	addi	sp,sp,-24
   10088:	dfc00515 	stw	ra,20(sp)
   1008c:	df000415 	stw	fp,16(sp)
   10090:	df000404 	addi	fp,sp,16
   10094:	e13ffd15 	stw	r4,-12(fp)
   10098:	e17ffe15 	stw	r5,-8(fp)
   1009c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
   100a0:	e0bffd17 	ldw	r2,-12(fp)
   100a4:	10800017 	ldw	r2,0(r2)
   100a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
   100ac:	e0bffc17 	ldw	r2,-16(fp)
   100b0:	11000a04 	addi	r4,r2,40
   100b4:	e0bffd17 	ldw	r2,-12(fp)
   100b8:	11c00217 	ldw	r7,8(r2)
   100bc:	e17ffe17 	ldw	r5,-8(fp)
   100c0:	e1bfff17 	ldw	r6,-4(fp)
   100c4:	000f9700 	call	f970 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
   100c8:	e037883a 	mov	sp,fp
   100cc:	dfc00117 	ldw	ra,4(sp)
   100d0:	df000017 	ldw	fp,0(sp)
   100d4:	dec00204 	addi	sp,sp,8
   100d8:	f800283a 	ret

000100dc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   100dc:	defffa04 	addi	sp,sp,-24
   100e0:	dfc00515 	stw	ra,20(sp)
   100e4:	df000415 	stw	fp,16(sp)
   100e8:	df000404 	addi	fp,sp,16
   100ec:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   100f0:	e0bfff17 	ldw	r2,-4(fp)
   100f4:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   100f8:	e0bfff17 	ldw	r2,-4(fp)
   100fc:	10800104 	addi	r2,r2,4
   10100:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10104:	0005303a 	rdctl	r2,status
   10108:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1010c:	e0fffd17 	ldw	r3,-12(fp)
   10110:	00bfff84 	movi	r2,-2
   10114:	1884703a 	and	r2,r3,r2
   10118:	1001703a 	wrctl	status,r2
  
  return context;
   1011c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   10120:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   10124:	0010e300 	call	10e30 <alt_tick>
   10128:	e0bffe17 	ldw	r2,-8(fp)
   1012c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   10138:	e037883a 	mov	sp,fp
   1013c:	dfc00117 	ldw	ra,4(sp)
   10140:	df000017 	ldw	fp,0(sp)
   10144:	dec00204 	addi	sp,sp,8
   10148:	f800283a 	ret

0001014c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1014c:	defff804 	addi	sp,sp,-32
   10150:	dfc00715 	stw	ra,28(sp)
   10154:	df000615 	stw	fp,24(sp)
   10158:	df000604 	addi	fp,sp,24
   1015c:	e13ffc15 	stw	r4,-16(fp)
   10160:	e17ffd15 	stw	r5,-12(fp)
   10164:	e1bffe15 	stw	r6,-8(fp)
   10168:	e1ffff15 	stw	r7,-4(fp)
   1016c:	e0bfff17 	ldw	r2,-4(fp)
   10170:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   10174:	00800074 	movhi	r2,1
   10178:	1096ec04 	addi	r2,r2,23472
   1017c:	10800017 	ldw	r2,0(r2)
   10180:	1004c03a 	cmpne	r2,r2,zero
   10184:	1000041e 	bne	r2,zero,10198 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   10188:	00c00074 	movhi	r3,1
   1018c:	18d6ec04 	addi	r3,r3,23472
   10190:	e0bffb17 	ldw	r2,-20(fp)
   10194:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   10198:	e0bffc17 	ldw	r2,-16(fp)
   1019c:	10800104 	addi	r2,r2,4
   101a0:	1007883a 	mov	r3,r2
   101a4:	008001c4 	movi	r2,7
   101a8:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   101ac:	d8000015 	stw	zero,0(sp)
   101b0:	e13ffd17 	ldw	r4,-12(fp)
   101b4:	e17ffe17 	ldw	r5,-8(fp)
   101b8:	01800074 	movhi	r6,1
   101bc:	31803704 	addi	r6,r6,220
   101c0:	e1fffc17 	ldw	r7,-16(fp)
   101c4:	00106cc0 	call	106cc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   101c8:	e037883a 	mov	sp,fp
   101cc:	dfc00117 	ldw	ra,4(sp)
   101d0:	df000017 	ldw	fp,0(sp)
   101d4:	dec00204 	addi	sp,sp,8
   101d8:	f800283a 	ret

000101dc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   101dc:	defff404 	addi	sp,sp,-48
   101e0:	df000b15 	stw	fp,44(sp)
   101e4:	df000b04 	addi	fp,sp,44
   101e8:	e13ffb15 	stw	r4,-20(fp)
   101ec:	e17ffc15 	stw	r5,-16(fp)
   101f0:	e1bffd15 	stw	r6,-12(fp)
   101f4:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   101f8:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   101fc:	00800074 	movhi	r2,1
   10200:	1096ec04 	addi	r2,r2,23472
   10204:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   10208:	1005003a 	cmpeq	r2,r2,zero
   1020c:	1000411e 	bne	r2,zero,10314 <alt_alarm_start+0x138>
  {
    if (alarm)
   10210:	e0bffb17 	ldw	r2,-20(fp)
   10214:	1005003a 	cmpeq	r2,r2,zero
   10218:	10003b1e 	bne	r2,zero,10308 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   1021c:	e0fffb17 	ldw	r3,-20(fp)
   10220:	e0bffd17 	ldw	r2,-12(fp)
   10224:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   10228:	e0fffb17 	ldw	r3,-20(fp)
   1022c:	e0bffe17 	ldw	r2,-8(fp)
   10230:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10234:	0005303a 	rdctl	r2,status
   10238:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1023c:	e0fff817 	ldw	r3,-32(fp)
   10240:	00bfff84 	movi	r2,-2
   10244:	1884703a 	and	r2,r3,r2
   10248:	1001703a 	wrctl	status,r2
  
  return context;
   1024c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   10250:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10254:	00800074 	movhi	r2,1
   10258:	1096ed04 	addi	r2,r2,23476
   1025c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   10260:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10264:	e0fffc17 	ldw	r3,-16(fp)
   10268:	e0bff917 	ldw	r2,-28(fp)
   1026c:	1885883a 	add	r2,r3,r2
   10270:	10c00044 	addi	r3,r2,1
   10274:	e0bffb17 	ldw	r2,-20(fp)
   10278:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1027c:	e0bffb17 	ldw	r2,-20(fp)
   10280:	10c00217 	ldw	r3,8(r2)
   10284:	e0bff917 	ldw	r2,-28(fp)
   10288:	1880042e 	bgeu	r3,r2,1029c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   1028c:	e0fffb17 	ldw	r3,-20(fp)
   10290:	00800044 	movi	r2,1
   10294:	18800405 	stb	r2,16(r3)
   10298:	00000206 	br	102a4 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   1029c:	e0bffb17 	ldw	r2,-20(fp)
   102a0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   102a4:	e0fffb17 	ldw	r3,-20(fp)
   102a8:	00800074 	movhi	r2,1
   102ac:	108ff804 	addi	r2,r2,16352
   102b0:	e0bff615 	stw	r2,-40(fp)
   102b4:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   102b8:	e0fff717 	ldw	r3,-36(fp)
   102bc:	e0bff617 	ldw	r2,-40(fp)
   102c0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   102c4:	e0bff617 	ldw	r2,-40(fp)
   102c8:	10c00017 	ldw	r3,0(r2)
   102cc:	e0bff717 	ldw	r2,-36(fp)
   102d0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   102d4:	e0bff617 	ldw	r2,-40(fp)
   102d8:	10c00017 	ldw	r3,0(r2)
   102dc:	e0bff717 	ldw	r2,-36(fp)
   102e0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   102e4:	e0fff617 	ldw	r3,-40(fp)
   102e8:	e0bff717 	ldw	r2,-36(fp)
   102ec:	18800015 	stw	r2,0(r3)
   102f0:	e0bffa17 	ldw	r2,-24(fp)
   102f4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   102f8:	e0bff517 	ldw	r2,-44(fp)
   102fc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   10300:	e03fff15 	stw	zero,-4(fp)
   10304:	00000506 	br	1031c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   10308:	00bffa84 	movi	r2,-22
   1030c:	e0bfff15 	stw	r2,-4(fp)
   10310:	00000206 	br	1031c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   10314:	00bfde84 	movi	r2,-134
   10318:	e0bfff15 	stw	r2,-4(fp)
   1031c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   10320:	e037883a 	mov	sp,fp
   10324:	df000017 	ldw	fp,0(sp)
   10328:	dec00104 	addi	sp,sp,4
   1032c:	f800283a 	ret

00010330 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10330:	defffa04 	addi	sp,sp,-24
   10334:	dfc00515 	stw	ra,20(sp)
   10338:	df000415 	stw	fp,16(sp)
   1033c:	df000404 	addi	fp,sp,16
   10340:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   10344:	008000c4 	movi	r2,3
   10348:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
   1034c:	e0fffc17 	ldw	r3,-16(fp)
   10350:	008003f4 	movhi	r2,15
   10354:	10909004 	addi	r2,r2,16960
   10358:	188b383a 	mul	r5,r3,r2
   1035c:	01017db4 	movhi	r4,1526
   10360:	21384004 	addi	r4,r4,-7936
   10364:	00044f80 	call	44f8 <__udivsi3>
   10368:	100b883a 	mov	r5,r2
   1036c:	01200034 	movhi	r4,32768
   10370:	213fffc4 	addi	r4,r4,-1
   10374:	00044f80 	call	44f8 <__udivsi3>
   10378:	100b883a 	mov	r5,r2
   1037c:	e13fff17 	ldw	r4,-4(fp)
   10380:	00044f80 	call	44f8 <__udivsi3>
   10384:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   10388:	e0bffd17 	ldw	r2,-12(fp)
   1038c:	1005003a 	cmpeq	r2,r2,zero
   10390:	1000281e 	bne	r2,zero,10434 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
   10394:	e03ffe15 	stw	zero,-8(fp)
   10398:	00001606 	br	103f4 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   1039c:	00a00034 	movhi	r2,32768
   103a0:	10bfffc4 	addi	r2,r2,-1
   103a4:	10bfffc4 	addi	r2,r2,-1
   103a8:	103ffe1e 	bne	r2,zero,103a4 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   103ac:	e0fffc17 	ldw	r3,-16(fp)
   103b0:	008003f4 	movhi	r2,15
   103b4:	10909004 	addi	r2,r2,16960
   103b8:	188b383a 	mul	r5,r3,r2
   103bc:	01017db4 	movhi	r4,1526
   103c0:	21384004 	addi	r4,r4,-7936
   103c4:	00044f80 	call	44f8 <__udivsi3>
   103c8:	100b883a 	mov	r5,r2
   103cc:	01200034 	movhi	r4,32768
   103d0:	213fffc4 	addi	r4,r4,-1
   103d4:	00044f80 	call	44f8 <__udivsi3>
   103d8:	1007883a 	mov	r3,r2
   103dc:	e0bfff17 	ldw	r2,-4(fp)
   103e0:	10c5c83a 	sub	r2,r2,r3
   103e4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   103e8:	e0bffe17 	ldw	r2,-8(fp)
   103ec:	10800044 	addi	r2,r2,1
   103f0:	e0bffe15 	stw	r2,-8(fp)
   103f4:	e0fffe17 	ldw	r3,-8(fp)
   103f8:	e0bffd17 	ldw	r2,-12(fp)
   103fc:	18bfe716 	blt	r3,r2,1039c <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10400:	e0fffc17 	ldw	r3,-16(fp)
   10404:	008003f4 	movhi	r2,15
   10408:	10909004 	addi	r2,r2,16960
   1040c:	188b383a 	mul	r5,r3,r2
   10410:	01017db4 	movhi	r4,1526
   10414:	21384004 	addi	r4,r4,-7936
   10418:	00044f80 	call	44f8 <__udivsi3>
   1041c:	1007883a 	mov	r3,r2
   10420:	e0bfff17 	ldw	r2,-4(fp)
   10424:	1885383a 	mul	r2,r3,r2
   10428:	10bfffc4 	addi	r2,r2,-1
   1042c:	103ffe1e 	bne	r2,zero,10428 <alt_busy_sleep+0xf8>
   10430:	00000c06 	br	10464 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10434:	e0fffc17 	ldw	r3,-16(fp)
   10438:	008003f4 	movhi	r2,15
   1043c:	10909004 	addi	r2,r2,16960
   10440:	188b383a 	mul	r5,r3,r2
   10444:	01017db4 	movhi	r4,1526
   10448:	21384004 	addi	r4,r4,-7936
   1044c:	00044f80 	call	44f8 <__udivsi3>
   10450:	1007883a 	mov	r3,r2
   10454:	e0bfff17 	ldw	r2,-4(fp)
   10458:	1885383a 	mul	r2,r3,r2
   1045c:	10bfffc4 	addi	r2,r2,-1
   10460:	00bffe16 	blt	zero,r2,1045c <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   10464:	0005883a 	mov	r2,zero
}
   10468:	e037883a 	mov	sp,fp
   1046c:	dfc00117 	ldw	ra,4(sp)
   10470:	df000017 	ldw	fp,0(sp)
   10474:	dec00204 	addi	sp,sp,8
   10478:	f800283a 	ret

0001047c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1047c:	defffe04 	addi	sp,sp,-8
   10480:	df000115 	stw	fp,4(sp)
   10484:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   10488:	e03fff15 	stw	zero,-4(fp)
   1048c:	00000506 	br	104a4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   10490:	e0bfff17 	ldw	r2,-4(fp)
   10494:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   10498:	e0bfff17 	ldw	r2,-4(fp)
   1049c:	10800804 	addi	r2,r2,32
   104a0:	e0bfff15 	stw	r2,-4(fp)
   104a4:	e0bfff17 	ldw	r2,-4(fp)
   104a8:	10820030 	cmpltui	r2,r2,2048
   104ac:	103ff81e 	bne	r2,zero,10490 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   104b0:	e037883a 	mov	sp,fp
   104b4:	df000017 	ldw	fp,0(sp)
   104b8:	dec00104 	addi	sp,sp,4
   104bc:	f800283a 	ret

000104c0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   104c0:	defff904 	addi	sp,sp,-28
   104c4:	dfc00615 	stw	ra,24(sp)
   104c8:	df000515 	stw	fp,20(sp)
   104cc:	df000504 	addi	fp,sp,20
   104d0:	e13ffd15 	stw	r4,-12(fp)
   104d4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   104d8:	e0bffd17 	ldw	r2,-12(fp)
   104dc:	1005003a 	cmpeq	r2,r2,zero
   104e0:	1000041e 	bne	r2,zero,104f4 <alt_dev_llist_insert+0x34>
   104e4:	e0bffd17 	ldw	r2,-12(fp)
   104e8:	10800217 	ldw	r2,8(r2)
   104ec:	1004c03a 	cmpne	r2,r2,zero
   104f0:	1000071e 	bne	r2,zero,10510 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   104f4:	00105740 	call	10574 <alt_get_errno>
   104f8:	1007883a 	mov	r3,r2
   104fc:	00800584 	movi	r2,22
   10500:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   10504:	00bffa84 	movi	r2,-22
   10508:	e0bfff15 	stw	r2,-4(fp)
   1050c:	00001306 	br	1055c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   10510:	e0fffd17 	ldw	r3,-12(fp)
   10514:	e0bffe17 	ldw	r2,-8(fp)
   10518:	e0bffb15 	stw	r2,-20(fp)
   1051c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10520:	e0fffc17 	ldw	r3,-16(fp)
   10524:	e0bffb17 	ldw	r2,-20(fp)
   10528:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   1052c:	e0bffb17 	ldw	r2,-20(fp)
   10530:	10c00017 	ldw	r3,0(r2)
   10534:	e0bffc17 	ldw	r2,-16(fp)
   10538:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1053c:	e0bffb17 	ldw	r2,-20(fp)
   10540:	10c00017 	ldw	r3,0(r2)
   10544:	e0bffc17 	ldw	r2,-16(fp)
   10548:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   1054c:	e0fffb17 	ldw	r3,-20(fp)
   10550:	e0bffc17 	ldw	r2,-16(fp)
   10554:	18800015 	stw	r2,0(r3)

  return 0;  
   10558:	e03fff15 	stw	zero,-4(fp)
   1055c:	e0bfff17 	ldw	r2,-4(fp)
}
   10560:	e037883a 	mov	sp,fp
   10564:	dfc00117 	ldw	ra,4(sp)
   10568:	df000017 	ldw	fp,0(sp)
   1056c:	dec00204 	addi	sp,sp,8
   10570:	f800283a 	ret

00010574 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10574:	defffd04 	addi	sp,sp,-12
   10578:	dfc00215 	stw	ra,8(sp)
   1057c:	df000115 	stw	fp,4(sp)
   10580:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   10584:	00800074 	movhi	r2,1
   10588:	108ff404 	addi	r2,r2,16336
   1058c:	10800017 	ldw	r2,0(r2)
   10590:	1005003a 	cmpeq	r2,r2,zero
   10594:	1000061e 	bne	r2,zero,105b0 <alt_get_errno+0x3c>
   10598:	00800074 	movhi	r2,1
   1059c:	108ff404 	addi	r2,r2,16336
   105a0:	10800017 	ldw	r2,0(r2)
   105a4:	103ee83a 	callr	r2
   105a8:	e0bfff15 	stw	r2,-4(fp)
   105ac:	00000306 	br	105bc <alt_get_errno+0x48>
   105b0:	00800074 	movhi	r2,1
   105b4:	1096e704 	addi	r2,r2,23452
   105b8:	e0bfff15 	stw	r2,-4(fp)
   105bc:	e0bfff17 	ldw	r2,-4(fp)
}
   105c0:	e037883a 	mov	sp,fp
   105c4:	dfc00117 	ldw	ra,4(sp)
   105c8:	df000017 	ldw	fp,0(sp)
   105cc:	dec00204 	addi	sp,sp,8
   105d0:	f800283a 	ret

000105d4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   105d4:	defffd04 	addi	sp,sp,-12
   105d8:	dfc00215 	stw	ra,8(sp)
   105dc:	df000115 	stw	fp,4(sp)
   105e0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   105e4:	00bfff04 	movi	r2,-4
   105e8:	00c00074 	movhi	r3,1
   105ec:	18c5b404 	addi	r3,r3,5840
   105f0:	1885883a 	add	r2,r3,r2
   105f4:	e0bfff15 	stw	r2,-4(fp)
   105f8:	00000606 	br	10614 <_do_ctors+0x40>
        (*ctor) (); 
   105fc:	e0bfff17 	ldw	r2,-4(fp)
   10600:	10800017 	ldw	r2,0(r2)
   10604:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10608:	e0bfff17 	ldw	r2,-4(fp)
   1060c:	10bfff04 	addi	r2,r2,-4
   10610:	e0bfff15 	stw	r2,-4(fp)
   10614:	e0ffff17 	ldw	r3,-4(fp)
   10618:	00800074 	movhi	r2,1
   1061c:	1085b304 	addi	r2,r2,5836
   10620:	18bff62e 	bgeu	r3,r2,105fc <_do_ctors+0x28>
        (*ctor) (); 
}
   10624:	e037883a 	mov	sp,fp
   10628:	dfc00117 	ldw	ra,4(sp)
   1062c:	df000017 	ldw	fp,0(sp)
   10630:	dec00204 	addi	sp,sp,8
   10634:	f800283a 	ret

00010638 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   10638:	defffd04 	addi	sp,sp,-12
   1063c:	dfc00215 	stw	ra,8(sp)
   10640:	df000115 	stw	fp,4(sp)
   10644:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10648:	00bfff04 	movi	r2,-4
   1064c:	00c00074 	movhi	r3,1
   10650:	18c5b404 	addi	r3,r3,5840
   10654:	1885883a 	add	r2,r3,r2
   10658:	e0bfff15 	stw	r2,-4(fp)
   1065c:	00000606 	br	10678 <_do_dtors+0x40>
        (*dtor) (); 
   10660:	e0bfff17 	ldw	r2,-4(fp)
   10664:	10800017 	ldw	r2,0(r2)
   10668:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1066c:	e0bfff17 	ldw	r2,-4(fp)
   10670:	10bfff04 	addi	r2,r2,-4
   10674:	e0bfff15 	stw	r2,-4(fp)
   10678:	e0ffff17 	ldw	r3,-4(fp)
   1067c:	00800074 	movhi	r2,1
   10680:	1085b404 	addi	r2,r2,5840
   10684:	18bff62e 	bgeu	r3,r2,10660 <_do_dtors+0x28>
        (*dtor) (); 
}
   10688:	e037883a 	mov	sp,fp
   1068c:	dfc00117 	ldw	ra,4(sp)
   10690:	df000017 	ldw	fp,0(sp)
   10694:	dec00204 	addi	sp,sp,8
   10698:	f800283a 	ret

0001069c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1069c:	defffe04 	addi	sp,sp,-8
   106a0:	dfc00115 	stw	ra,4(sp)
   106a4:	df000015 	stw	fp,0(sp)
   106a8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   106ac:	0009883a 	mov	r4,zero
   106b0:	01440004 	movi	r5,4096
   106b4:	00111c80 	call	111c8 <alt_icache_flush>
#endif
}
   106b8:	e037883a 	mov	sp,fp
   106bc:	dfc00117 	ldw	ra,4(sp)
   106c0:	df000017 	ldw	fp,0(sp)
   106c4:	dec00204 	addi	sp,sp,8
   106c8:	f800283a 	ret

000106cc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   106cc:	defff904 	addi	sp,sp,-28
   106d0:	dfc00615 	stw	ra,24(sp)
   106d4:	df000515 	stw	fp,20(sp)
   106d8:	df000504 	addi	fp,sp,20
   106dc:	e13ffc15 	stw	r4,-16(fp)
   106e0:	e17ffd15 	stw	r5,-12(fp)
   106e4:	e1bffe15 	stw	r6,-8(fp)
   106e8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   106ec:	e0800217 	ldw	r2,8(fp)
   106f0:	d8800015 	stw	r2,0(sp)
   106f4:	e13ffc17 	ldw	r4,-16(fp)
   106f8:	e17ffd17 	ldw	r5,-12(fp)
   106fc:	e1bffe17 	ldw	r6,-8(fp)
   10700:	e1ffff17 	ldw	r7,-4(fp)
   10704:	00108a00 	call	108a0 <alt_iic_isr_register>
}  
   10708:	e037883a 	mov	sp,fp
   1070c:	dfc00117 	ldw	ra,4(sp)
   10710:	df000017 	ldw	fp,0(sp)
   10714:	dec00204 	addi	sp,sp,8
   10718:	f800283a 	ret

0001071c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1071c:	defff904 	addi	sp,sp,-28
   10720:	df000615 	stw	fp,24(sp)
   10724:	df000604 	addi	fp,sp,24
   10728:	e13ffe15 	stw	r4,-8(fp)
   1072c:	e17fff15 	stw	r5,-4(fp)
   10730:	e0bfff17 	ldw	r2,-4(fp)
   10734:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10738:	0005303a 	rdctl	r2,status
   1073c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10740:	e0fffb17 	ldw	r3,-20(fp)
   10744:	00bfff84 	movi	r2,-2
   10748:	1884703a 	and	r2,r3,r2
   1074c:	1001703a 	wrctl	status,r2
  
  return context;
   10750:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10754:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   10758:	e0fffc17 	ldw	r3,-16(fp)
   1075c:	00800044 	movi	r2,1
   10760:	10c4983a 	sll	r2,r2,r3
   10764:	1007883a 	mov	r3,r2
   10768:	00800074 	movhi	r2,1
   1076c:	1096eb04 	addi	r2,r2,23468
   10770:	10800017 	ldw	r2,0(r2)
   10774:	1886b03a 	or	r3,r3,r2
   10778:	00800074 	movhi	r2,1
   1077c:	1096eb04 	addi	r2,r2,23468
   10780:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10784:	00800074 	movhi	r2,1
   10788:	1096eb04 	addi	r2,r2,23468
   1078c:	10800017 	ldw	r2,0(r2)
   10790:	100170fa 	wrctl	ienable,r2
   10794:	e0bffd17 	ldw	r2,-12(fp)
   10798:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1079c:	e0bffa17 	ldw	r2,-24(fp)
   107a0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   107a4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   107a8:	e037883a 	mov	sp,fp
   107ac:	df000017 	ldw	fp,0(sp)
   107b0:	dec00104 	addi	sp,sp,4
   107b4:	f800283a 	ret

000107b8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   107b8:	defff904 	addi	sp,sp,-28
   107bc:	df000615 	stw	fp,24(sp)
   107c0:	df000604 	addi	fp,sp,24
   107c4:	e13ffe15 	stw	r4,-8(fp)
   107c8:	e17fff15 	stw	r5,-4(fp)
   107cc:	e0bfff17 	ldw	r2,-4(fp)
   107d0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   107d4:	0005303a 	rdctl	r2,status
   107d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   107dc:	e0fffb17 	ldw	r3,-20(fp)
   107e0:	00bfff84 	movi	r2,-2
   107e4:	1884703a 	and	r2,r3,r2
   107e8:	1001703a 	wrctl	status,r2
  
  return context;
   107ec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   107f0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   107f4:	e0fffc17 	ldw	r3,-16(fp)
   107f8:	00800044 	movi	r2,1
   107fc:	10c4983a 	sll	r2,r2,r3
   10800:	0084303a 	nor	r2,zero,r2
   10804:	1007883a 	mov	r3,r2
   10808:	00800074 	movhi	r2,1
   1080c:	1096eb04 	addi	r2,r2,23468
   10810:	10800017 	ldw	r2,0(r2)
   10814:	1886703a 	and	r3,r3,r2
   10818:	00800074 	movhi	r2,1
   1081c:	1096eb04 	addi	r2,r2,23468
   10820:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10824:	00800074 	movhi	r2,1
   10828:	1096eb04 	addi	r2,r2,23468
   1082c:	10800017 	ldw	r2,0(r2)
   10830:	100170fa 	wrctl	ienable,r2
   10834:	e0bffd17 	ldw	r2,-12(fp)
   10838:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1083c:	e0bffa17 	ldw	r2,-24(fp)
   10840:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10844:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   10848:	e037883a 	mov	sp,fp
   1084c:	df000017 	ldw	fp,0(sp)
   10850:	dec00104 	addi	sp,sp,4
   10854:	f800283a 	ret

00010858 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   10858:	defffc04 	addi	sp,sp,-16
   1085c:	df000315 	stw	fp,12(sp)
   10860:	df000304 	addi	fp,sp,12
   10864:	e13ffe15 	stw	r4,-8(fp)
   10868:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   1086c:	000530fa 	rdctl	r2,ienable
   10870:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   10874:	e0ffff17 	ldw	r3,-4(fp)
   10878:	00800044 	movi	r2,1
   1087c:	10c4983a 	sll	r2,r2,r3
   10880:	1007883a 	mov	r3,r2
   10884:	e0bffd17 	ldw	r2,-12(fp)
   10888:	1884703a 	and	r2,r3,r2
   1088c:	1004c03a 	cmpne	r2,r2,zero
}
   10890:	e037883a 	mov	sp,fp
   10894:	df000017 	ldw	fp,0(sp)
   10898:	dec00104 	addi	sp,sp,4
   1089c:	f800283a 	ret

000108a0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   108a0:	defff404 	addi	sp,sp,-48
   108a4:	dfc00b15 	stw	ra,44(sp)
   108a8:	df000a15 	stw	fp,40(sp)
   108ac:	df000a04 	addi	fp,sp,40
   108b0:	e13ffb15 	stw	r4,-20(fp)
   108b4:	e17ffc15 	stw	r5,-16(fp)
   108b8:	e1bffd15 	stw	r6,-12(fp)
   108bc:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   108c0:	00bffa84 	movi	r2,-22
   108c4:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   108c8:	e0bffc17 	ldw	r2,-16(fp)
   108cc:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   108d0:	e0bff917 	ldw	r2,-28(fp)
   108d4:	10800808 	cmpgei	r2,r2,32
   108d8:	1000291e 	bne	r2,zero,10980 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   108dc:	0005303a 	rdctl	r2,status
   108e0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   108e4:	e0fff717 	ldw	r3,-36(fp)
   108e8:	00bfff84 	movi	r2,-2
   108ec:	1884703a 	and	r2,r3,r2
   108f0:	1001703a 	wrctl	status,r2
  
  return context;
   108f4:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   108f8:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   108fc:	e0bff917 	ldw	r2,-28(fp)
   10900:	00c00074 	movhi	r3,1
   10904:	18d6f804 	addi	r3,r3,23520
   10908:	100490fa 	slli	r2,r2,3
   1090c:	10c7883a 	add	r3,r2,r3
   10910:	e0bffd17 	ldw	r2,-12(fp)
   10914:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   10918:	e0bff917 	ldw	r2,-28(fp)
   1091c:	00c00074 	movhi	r3,1
   10920:	18d6f804 	addi	r3,r3,23520
   10924:	100490fa 	slli	r2,r2,3
   10928:	10c5883a 	add	r2,r2,r3
   1092c:	10c00104 	addi	r3,r2,4
   10930:	e0bffe17 	ldw	r2,-8(fp)
   10934:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10938:	e0bffd17 	ldw	r2,-12(fp)
   1093c:	1005003a 	cmpeq	r2,r2,zero
   10940:	1000051e 	bne	r2,zero,10958 <alt_iic_isr_register+0xb8>
   10944:	e17ff917 	ldw	r5,-28(fp)
   10948:	e13ffb17 	ldw	r4,-20(fp)
   1094c:	001071c0 	call	1071c <alt_ic_irq_enable>
   10950:	e0bfff15 	stw	r2,-4(fp)
   10954:	00000406 	br	10968 <alt_iic_isr_register+0xc8>
   10958:	e17ff917 	ldw	r5,-28(fp)
   1095c:	e13ffb17 	ldw	r4,-20(fp)
   10960:	00107b80 	call	107b8 <alt_ic_irq_disable>
   10964:	e0bfff15 	stw	r2,-4(fp)
   10968:	e0bfff17 	ldw	r2,-4(fp)
   1096c:	e0bffa15 	stw	r2,-24(fp)
   10970:	e0bff817 	ldw	r2,-32(fp)
   10974:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10978:	e0bff617 	ldw	r2,-40(fp)
   1097c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   10980:	e0bffa17 	ldw	r2,-24(fp)
}
   10984:	e037883a 	mov	sp,fp
   10988:	dfc00117 	ldw	ra,4(sp)
   1098c:	df000017 	ldw	fp,0(sp)
   10990:	dec00204 	addi	sp,sp,8
   10994:	f800283a 	ret

00010998 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   10998:	defff904 	addi	sp,sp,-28
   1099c:	dfc00615 	stw	ra,24(sp)
   109a0:	df000515 	stw	fp,20(sp)
   109a4:	df000504 	addi	fp,sp,20
   109a8:	e13ffc15 	stw	r4,-16(fp)
   109ac:	e17ffd15 	stw	r5,-12(fp)
   109b0:	e1bffe15 	stw	r6,-8(fp)
   109b4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   109b8:	e13ffd17 	ldw	r4,-12(fp)
   109bc:	e17ffe17 	ldw	r5,-8(fp)
   109c0:	e1bfff17 	ldw	r6,-4(fp)
   109c4:	0010bb00 	call	10bb0 <open>
   109c8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   109cc:	e0bffb17 	ldw	r2,-20(fp)
   109d0:	1004803a 	cmplt	r2,r2,zero
   109d4:	10001c1e 	bne	r2,zero,10a48 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   109d8:	e0bffb17 	ldw	r2,-20(fp)
   109dc:	00c00074 	movhi	r3,1
   109e0:	18cb2904 	addi	r3,r3,11428
   109e4:	10800324 	muli	r2,r2,12
   109e8:	10c5883a 	add	r2,r2,r3
   109ec:	10c00017 	ldw	r3,0(r2)
   109f0:	e0bffc17 	ldw	r2,-16(fp)
   109f4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   109f8:	e0bffb17 	ldw	r2,-20(fp)
   109fc:	00c00074 	movhi	r3,1
   10a00:	18cb2904 	addi	r3,r3,11428
   10a04:	10800324 	muli	r2,r2,12
   10a08:	10c5883a 	add	r2,r2,r3
   10a0c:	10800104 	addi	r2,r2,4
   10a10:	10c00017 	ldw	r3,0(r2)
   10a14:	e0bffc17 	ldw	r2,-16(fp)
   10a18:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   10a1c:	e0bffb17 	ldw	r2,-20(fp)
   10a20:	00c00074 	movhi	r3,1
   10a24:	18cb2904 	addi	r3,r3,11428
   10a28:	10800324 	muli	r2,r2,12
   10a2c:	10c5883a 	add	r2,r2,r3
   10a30:	10800204 	addi	r2,r2,8
   10a34:	10c00017 	ldw	r3,0(r2)
   10a38:	e0bffc17 	ldw	r2,-16(fp)
   10a3c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   10a40:	e13ffb17 	ldw	r4,-20(fp)
   10a44:	000e3440 	call	e344 <alt_release_fd>
  }
} 
   10a48:	e037883a 	mov	sp,fp
   10a4c:	dfc00117 	ldw	ra,4(sp)
   10a50:	df000017 	ldw	fp,0(sp)
   10a54:	dec00204 	addi	sp,sp,8
   10a58:	f800283a 	ret

00010a5c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   10a5c:	defffb04 	addi	sp,sp,-20
   10a60:	dfc00415 	stw	ra,16(sp)
   10a64:	df000315 	stw	fp,12(sp)
   10a68:	df000304 	addi	fp,sp,12
   10a6c:	e13ffd15 	stw	r4,-12(fp)
   10a70:	e17ffe15 	stw	r5,-8(fp)
   10a74:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   10a78:	01000074 	movhi	r4,1
   10a7c:	210b2c04 	addi	r4,r4,11440
   10a80:	e17ffd17 	ldw	r5,-12(fp)
   10a84:	01800044 	movi	r6,1
   10a88:	01c07fc4 	movi	r7,511
   10a8c:	00109980 	call	10998 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   10a90:	01000074 	movhi	r4,1
   10a94:	210b2904 	addi	r4,r4,11428
   10a98:	e17ffe17 	ldw	r5,-8(fp)
   10a9c:	000d883a 	mov	r6,zero
   10aa0:	01c07fc4 	movi	r7,511
   10aa4:	00109980 	call	10998 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   10aa8:	01000074 	movhi	r4,1
   10aac:	210b2f04 	addi	r4,r4,11452
   10ab0:	e17fff17 	ldw	r5,-4(fp)
   10ab4:	01800044 	movi	r6,1
   10ab8:	01c07fc4 	movi	r7,511
   10abc:	00109980 	call	10998 <alt_open_fd>
}  
   10ac0:	e037883a 	mov	sp,fp
   10ac4:	dfc00117 	ldw	ra,4(sp)
   10ac8:	df000017 	ldw	fp,0(sp)
   10acc:	dec00204 	addi	sp,sp,8
   10ad0:	f800283a 	ret

00010ad4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   10ad4:	defffc04 	addi	sp,sp,-16
   10ad8:	df000315 	stw	fp,12(sp)
   10adc:	df000304 	addi	fp,sp,12
   10ae0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   10ae4:	e0bffe17 	ldw	r2,-8(fp)
   10ae8:	10800217 	ldw	r2,8(r2)
   10aec:	10d00034 	orhi	r3,r2,16384
   10af0:	e0bffe17 	ldw	r2,-8(fp)
   10af4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10af8:	e03ffd15 	stw	zero,-12(fp)
   10afc:	00002006 	br	10b80 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10b00:	e0bffd17 	ldw	r2,-12(fp)
   10b04:	00c00074 	movhi	r3,1
   10b08:	18cb2904 	addi	r3,r3,11428
   10b0c:	10800324 	muli	r2,r2,12
   10b10:	10c5883a 	add	r2,r2,r3
   10b14:	10c00017 	ldw	r3,0(r2)
   10b18:	e0bffe17 	ldw	r2,-8(fp)
   10b1c:	10800017 	ldw	r2,0(r2)
   10b20:	1880141e 	bne	r3,r2,10b74 <alt_file_locked+0xa0>
   10b24:	e0bffd17 	ldw	r2,-12(fp)
   10b28:	00c00074 	movhi	r3,1
   10b2c:	18cb2904 	addi	r3,r3,11428
   10b30:	10800324 	muli	r2,r2,12
   10b34:	10c5883a 	add	r2,r2,r3
   10b38:	10800204 	addi	r2,r2,8
   10b3c:	10800017 	ldw	r2,0(r2)
   10b40:	1004403a 	cmpge	r2,r2,zero
   10b44:	10000b1e 	bne	r2,zero,10b74 <alt_file_locked+0xa0>
   10b48:	e0bffd17 	ldw	r2,-12(fp)
   10b4c:	10800324 	muli	r2,r2,12
   10b50:	1007883a 	mov	r3,r2
   10b54:	00800074 	movhi	r2,1
   10b58:	108b2904 	addi	r2,r2,11428
   10b5c:	1887883a 	add	r3,r3,r2
   10b60:	e0bffe17 	ldw	r2,-8(fp)
   10b64:	18800326 	beq	r3,r2,10b74 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   10b68:	00bffcc4 	movi	r2,-13
   10b6c:	e0bfff15 	stw	r2,-4(fp)
   10b70:	00000a06 	br	10b9c <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10b74:	e0bffd17 	ldw	r2,-12(fp)
   10b78:	10800044 	addi	r2,r2,1
   10b7c:	e0bffd15 	stw	r2,-12(fp)
   10b80:	00800074 	movhi	r2,1
   10b84:	108ff304 	addi	r2,r2,16332
   10b88:	10800017 	ldw	r2,0(r2)
   10b8c:	1007883a 	mov	r3,r2
   10b90:	e0bffd17 	ldw	r2,-12(fp)
   10b94:	18bfda2e 	bgeu	r3,r2,10b00 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   10b98:	e03fff15 	stw	zero,-4(fp)
   10b9c:	e0bfff17 	ldw	r2,-4(fp)
}
   10ba0:	e037883a 	mov	sp,fp
   10ba4:	df000017 	ldw	fp,0(sp)
   10ba8:	dec00104 	addi	sp,sp,4
   10bac:	f800283a 	ret

00010bb0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   10bb0:	defff404 	addi	sp,sp,-48
   10bb4:	dfc00b15 	stw	ra,44(sp)
   10bb8:	df000a15 	stw	fp,40(sp)
   10bbc:	df000a04 	addi	fp,sp,40
   10bc0:	e13ffb15 	stw	r4,-20(fp)
   10bc4:	e17ffc15 	stw	r5,-16(fp)
   10bc8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   10bcc:	00bfffc4 	movi	r2,-1
   10bd0:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   10bd4:	00bffb44 	movi	r2,-19
   10bd8:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   10bdc:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   10be0:	e13ffb17 	ldw	r4,-20(fp)
   10be4:	01400074 	movhi	r5,1
   10be8:	294ff104 	addi	r5,r5,16324
   10bec:	0010f5c0 	call	10f5c <alt_find_dev>
   10bf0:	e0bffa15 	stw	r2,-24(fp)
   10bf4:	e0bffa17 	ldw	r2,-24(fp)
   10bf8:	1004c03a 	cmpne	r2,r2,zero
   10bfc:	1000051e 	bne	r2,zero,10c14 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   10c00:	e13ffb17 	ldw	r4,-20(fp)
   10c04:	0010ff00 	call	10ff0 <alt_find_file>
   10c08:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   10c0c:	00800044 	movi	r2,1
   10c10:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   10c14:	e0bffa17 	ldw	r2,-24(fp)
   10c18:	1005003a 	cmpeq	r2,r2,zero
   10c1c:	1000301e 	bne	r2,zero,10ce0 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   10c20:	e13ffa17 	ldw	r4,-24(fp)
   10c24:	00111100 	call	11110 <alt_get_fd>
   10c28:	e0bff815 	stw	r2,-32(fp)
   10c2c:	e0bff817 	ldw	r2,-32(fp)
   10c30:	1004403a 	cmpge	r2,r2,zero
   10c34:	1000031e 	bne	r2,zero,10c44 <open+0x94>
    {
      status = index;
   10c38:	e0bff817 	ldw	r2,-32(fp)
   10c3c:	e0bff715 	stw	r2,-36(fp)
   10c40:	00002906 	br	10ce8 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   10c44:	e0bff817 	ldw	r2,-32(fp)
   10c48:	10800324 	muli	r2,r2,12
   10c4c:	1007883a 	mov	r3,r2
   10c50:	00800074 	movhi	r2,1
   10c54:	108b2904 	addi	r2,r2,11428
   10c58:	1885883a 	add	r2,r3,r2
   10c5c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   10c60:	e0fffc17 	ldw	r3,-16(fp)
   10c64:	00900034 	movhi	r2,16384
   10c68:	10bfffc4 	addi	r2,r2,-1
   10c6c:	1886703a 	and	r3,r3,r2
   10c70:	e0bff917 	ldw	r2,-28(fp)
   10c74:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   10c78:	e0bff617 	ldw	r2,-40(fp)
   10c7c:	1004c03a 	cmpne	r2,r2,zero
   10c80:	1000061e 	bne	r2,zero,10c9c <open+0xec>
   10c84:	e13ff917 	ldw	r4,-28(fp)
   10c88:	0010ad40 	call	10ad4 <alt_file_locked>
   10c8c:	e0bff715 	stw	r2,-36(fp)
   10c90:	e0bff717 	ldw	r2,-36(fp)
   10c94:	1004803a 	cmplt	r2,r2,zero
   10c98:	1000131e 	bne	r2,zero,10ce8 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   10c9c:	e0bffa17 	ldw	r2,-24(fp)
   10ca0:	10800317 	ldw	r2,12(r2)
   10ca4:	1005003a 	cmpeq	r2,r2,zero
   10ca8:	1000091e 	bne	r2,zero,10cd0 <open+0x120>
   10cac:	e0bffa17 	ldw	r2,-24(fp)
   10cb0:	10800317 	ldw	r2,12(r2)
   10cb4:	e13ff917 	ldw	r4,-28(fp)
   10cb8:	e17ffb17 	ldw	r5,-20(fp)
   10cbc:	e1bffc17 	ldw	r6,-16(fp)
   10cc0:	e1fffd17 	ldw	r7,-12(fp)
   10cc4:	103ee83a 	callr	r2
   10cc8:	e0bfff15 	stw	r2,-4(fp)
   10ccc:	00000106 	br	10cd4 <open+0x124>
   10cd0:	e03fff15 	stw	zero,-4(fp)
   10cd4:	e0bfff17 	ldw	r2,-4(fp)
   10cd8:	e0bff715 	stw	r2,-36(fp)
   10cdc:	00000206 	br	10ce8 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   10ce0:	00bffb44 	movi	r2,-19
   10ce4:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   10ce8:	e0bff717 	ldw	r2,-36(fp)
   10cec:	1004403a 	cmpge	r2,r2,zero
   10cf0:	1000091e 	bne	r2,zero,10d18 <open+0x168>
  {
    alt_release_fd (index);  
   10cf4:	e13ff817 	ldw	r4,-32(fp)
   10cf8:	000e3440 	call	e344 <alt_release_fd>
    ALT_ERRNO = -status;
   10cfc:	0010d380 	call	10d38 <alt_get_errno>
   10d00:	e0fff717 	ldw	r3,-36(fp)
   10d04:	00c7c83a 	sub	r3,zero,r3
   10d08:	10c00015 	stw	r3,0(r2)
    return -1;
   10d0c:	00bfffc4 	movi	r2,-1
   10d10:	e0bffe15 	stw	r2,-8(fp)
   10d14:	00000206 	br	10d20 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   10d18:	e0bff817 	ldw	r2,-32(fp)
   10d1c:	e0bffe15 	stw	r2,-8(fp)
   10d20:	e0bffe17 	ldw	r2,-8(fp)
}
   10d24:	e037883a 	mov	sp,fp
   10d28:	dfc00117 	ldw	ra,4(sp)
   10d2c:	df000017 	ldw	fp,0(sp)
   10d30:	dec00204 	addi	sp,sp,8
   10d34:	f800283a 	ret

00010d38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10d38:	defffd04 	addi	sp,sp,-12
   10d3c:	dfc00215 	stw	ra,8(sp)
   10d40:	df000115 	stw	fp,4(sp)
   10d44:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   10d48:	00800074 	movhi	r2,1
   10d4c:	108ff404 	addi	r2,r2,16336
   10d50:	10800017 	ldw	r2,0(r2)
   10d54:	1005003a 	cmpeq	r2,r2,zero
   10d58:	1000061e 	bne	r2,zero,10d74 <alt_get_errno+0x3c>
   10d5c:	00800074 	movhi	r2,1
   10d60:	108ff404 	addi	r2,r2,16336
   10d64:	10800017 	ldw	r2,0(r2)
   10d68:	103ee83a 	callr	r2
   10d6c:	e0bfff15 	stw	r2,-4(fp)
   10d70:	00000306 	br	10d80 <alt_get_errno+0x48>
   10d74:	00800074 	movhi	r2,1
   10d78:	1096e704 	addi	r2,r2,23452
   10d7c:	e0bfff15 	stw	r2,-4(fp)
   10d80:	e0bfff17 	ldw	r2,-4(fp)
}
   10d84:	e037883a 	mov	sp,fp
   10d88:	dfc00117 	ldw	ra,4(sp)
   10d8c:	df000017 	ldw	fp,0(sp)
   10d90:	dec00204 	addi	sp,sp,8
   10d94:	f800283a 	ret

00010d98 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   10d98:	defffa04 	addi	sp,sp,-24
   10d9c:	df000515 	stw	fp,20(sp)
   10da0:	df000504 	addi	fp,sp,20
   10da4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10da8:	0005303a 	rdctl	r2,status
   10dac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10db0:	e0fffd17 	ldw	r3,-12(fp)
   10db4:	00bfff84 	movi	r2,-2
   10db8:	1884703a 	and	r2,r3,r2
   10dbc:	1001703a 	wrctl	status,r2
  
  return context;
   10dc0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   10dc4:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   10dc8:	e0bfff17 	ldw	r2,-4(fp)
   10dcc:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   10dd0:	e0bffc17 	ldw	r2,-16(fp)
   10dd4:	10c00017 	ldw	r3,0(r2)
   10dd8:	e0bffc17 	ldw	r2,-16(fp)
   10ddc:	10800117 	ldw	r2,4(r2)
   10de0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   10de4:	e0bffc17 	ldw	r2,-16(fp)
   10de8:	10c00117 	ldw	r3,4(r2)
   10dec:	e0bffc17 	ldw	r2,-16(fp)
   10df0:	10800017 	ldw	r2,0(r2)
   10df4:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   10df8:	e0fffc17 	ldw	r3,-16(fp)
   10dfc:	e0bffc17 	ldw	r2,-16(fp)
   10e00:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   10e04:	e0fffc17 	ldw	r3,-16(fp)
   10e08:	e0bffc17 	ldw	r2,-16(fp)
   10e0c:	18800015 	stw	r2,0(r3)
   10e10:	e0bffe17 	ldw	r2,-8(fp)
   10e14:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10e18:	e0bffb17 	ldw	r2,-20(fp)
   10e1c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   10e20:	e037883a 	mov	sp,fp
   10e24:	df000017 	ldw	fp,0(sp)
   10e28:	dec00104 	addi	sp,sp,4
   10e2c:	f800283a 	ret

00010e30 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   10e30:	defffb04 	addi	sp,sp,-20
   10e34:	dfc00415 	stw	ra,16(sp)
   10e38:	df000315 	stw	fp,12(sp)
   10e3c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   10e40:	d0a00f17 	ldw	r2,-32708(gp)
   10e44:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10e48:	d0a70417 	ldw	r2,-25584(gp)
   10e4c:	10800044 	addi	r2,r2,1
   10e50:	d0a70415 	stw	r2,-25584(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10e54:	00003106 	br	10f1c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   10e58:	e0bffe17 	ldw	r2,-8(fp)
   10e5c:	10800017 	ldw	r2,0(r2)
   10e60:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10e64:	e0bffe17 	ldw	r2,-8(fp)
   10e68:	10800403 	ldbu	r2,16(r2)
   10e6c:	10803fcc 	andi	r2,r2,255
   10e70:	1005003a 	cmpeq	r2,r2,zero
   10e74:	1000051e 	bne	r2,zero,10e8c <alt_tick+0x5c>
   10e78:	d0a70417 	ldw	r2,-25584(gp)
   10e7c:	1004c03a 	cmpne	r2,r2,zero
   10e80:	1000021e 	bne	r2,zero,10e8c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   10e84:	e0bffe17 	ldw	r2,-8(fp)
   10e88:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   10e8c:	e0bffe17 	ldw	r2,-8(fp)
   10e90:	10c00217 	ldw	r3,8(r2)
   10e94:	d0a70417 	ldw	r2,-25584(gp)
   10e98:	10c01e36 	bltu	r2,r3,10f14 <alt_tick+0xe4>
   10e9c:	e0bffe17 	ldw	r2,-8(fp)
   10ea0:	10800403 	ldbu	r2,16(r2)
   10ea4:	10803fcc 	andi	r2,r2,255
   10ea8:	1004c03a 	cmpne	r2,r2,zero
   10eac:	1000191e 	bne	r2,zero,10f14 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   10eb0:	e0bffe17 	ldw	r2,-8(fp)
   10eb4:	10c00317 	ldw	r3,12(r2)
   10eb8:	e0bffe17 	ldw	r2,-8(fp)
   10ebc:	11000517 	ldw	r4,20(r2)
   10ec0:	183ee83a 	callr	r3
   10ec4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   10ec8:	e0bffd17 	ldw	r2,-12(fp)
   10ecc:	1004c03a 	cmpne	r2,r2,zero
   10ed0:	1000031e 	bne	r2,zero,10ee0 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   10ed4:	e13ffe17 	ldw	r4,-8(fp)
   10ed8:	0010d980 	call	10d98 <alt_alarm_stop>
   10edc:	00000d06 	br	10f14 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   10ee0:	e0bffe17 	ldw	r2,-8(fp)
   10ee4:	10c00217 	ldw	r3,8(r2)
   10ee8:	e0bffd17 	ldw	r2,-12(fp)
   10eec:	1887883a 	add	r3,r3,r2
   10ef0:	e0bffe17 	ldw	r2,-8(fp)
   10ef4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   10ef8:	e0bffe17 	ldw	r2,-8(fp)
   10efc:	10c00217 	ldw	r3,8(r2)
   10f00:	d0a70417 	ldw	r2,-25584(gp)
   10f04:	1880032e 	bgeu	r3,r2,10f14 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   10f08:	e0fffe17 	ldw	r3,-8(fp)
   10f0c:	00800044 	movi	r2,1
   10f10:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   10f14:	e0bfff17 	ldw	r2,-4(fp)
   10f18:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10f1c:	d0e00f04 	addi	r3,gp,-32708
   10f20:	e0bffe17 	ldw	r2,-8(fp)
   10f24:	10ffcc1e 	bne	r2,r3,10e58 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   10f28:	e037883a 	mov	sp,fp
   10f2c:	dfc00117 	ldw	ra,4(sp)
   10f30:	df000017 	ldw	fp,0(sp)
   10f34:	dec00204 	addi	sp,sp,8
   10f38:	f800283a 	ret

00010f3c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   10f3c:	deffff04 	addi	sp,sp,-4
   10f40:	df000015 	stw	fp,0(sp)
   10f44:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   10f48:	000170fa 	wrctl	ienable,zero
}
   10f4c:	e037883a 	mov	sp,fp
   10f50:	df000017 	ldw	fp,0(sp)
   10f54:	dec00104 	addi	sp,sp,4
   10f58:	f800283a 	ret

00010f5c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   10f5c:	defff904 	addi	sp,sp,-28
   10f60:	dfc00615 	stw	ra,24(sp)
   10f64:	df000515 	stw	fp,20(sp)
   10f68:	df000504 	addi	fp,sp,20
   10f6c:	e13ffd15 	stw	r4,-12(fp)
   10f70:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   10f74:	e0bffe17 	ldw	r2,-8(fp)
   10f78:	10800017 	ldw	r2,0(r2)
   10f7c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   10f80:	e13ffd17 	ldw	r4,-12(fp)
   10f84:	00046340 	call	4634 <strlen>
   10f88:	10800044 	addi	r2,r2,1
   10f8c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10f90:	00000d06 	br	10fc8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   10f94:	e0bffc17 	ldw	r2,-16(fp)
   10f98:	11000217 	ldw	r4,8(r2)
   10f9c:	e1bffb17 	ldw	r6,-20(fp)
   10fa0:	e17ffd17 	ldw	r5,-12(fp)
   10fa4:	00112a40 	call	112a4 <memcmp>
   10fa8:	1004c03a 	cmpne	r2,r2,zero
   10fac:	1000031e 	bne	r2,zero,10fbc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   10fb0:	e0bffc17 	ldw	r2,-16(fp)
   10fb4:	e0bfff15 	stw	r2,-4(fp)
   10fb8:	00000706 	br	10fd8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   10fbc:	e0bffc17 	ldw	r2,-16(fp)
   10fc0:	10800017 	ldw	r2,0(r2)
   10fc4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10fc8:	e0fffe17 	ldw	r3,-8(fp)
   10fcc:	e0bffc17 	ldw	r2,-16(fp)
   10fd0:	10fff01e 	bne	r2,r3,10f94 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   10fd4:	e03fff15 	stw	zero,-4(fp)
   10fd8:	e0bfff17 	ldw	r2,-4(fp)
}
   10fdc:	e037883a 	mov	sp,fp
   10fe0:	dfc00117 	ldw	ra,4(sp)
   10fe4:	df000017 	ldw	fp,0(sp)
   10fe8:	dec00204 	addi	sp,sp,8
   10fec:	f800283a 	ret

00010ff0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   10ff0:	defffa04 	addi	sp,sp,-24
   10ff4:	dfc00515 	stw	ra,20(sp)
   10ff8:	df000415 	stw	fp,16(sp)
   10ffc:	df000404 	addi	fp,sp,16
   11000:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   11004:	00800074 	movhi	r2,1
   11008:	108fef04 	addi	r2,r2,16316
   1100c:	10800017 	ldw	r2,0(r2)
   11010:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11014:	00003306 	br	110e4 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   11018:	e0bffd17 	ldw	r2,-12(fp)
   1101c:	11000217 	ldw	r4,8(r2)
   11020:	00046340 	call	4634 <strlen>
   11024:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   11028:	e0bffd17 	ldw	r2,-12(fp)
   1102c:	10c00217 	ldw	r3,8(r2)
   11030:	e0bffc17 	ldw	r2,-16(fp)
   11034:	1885883a 	add	r2,r3,r2
   11038:	10bfffc4 	addi	r2,r2,-1
   1103c:	10800003 	ldbu	r2,0(r2)
   11040:	10803fcc 	andi	r2,r2,255
   11044:	1080201c 	xori	r2,r2,128
   11048:	10bfe004 	addi	r2,r2,-128
   1104c:	10800bd8 	cmpnei	r2,r2,47
   11050:	1000031e 	bne	r2,zero,11060 <alt_find_file+0x70>
    {
      len -= 1;
   11054:	e0bffc17 	ldw	r2,-16(fp)
   11058:	10bfffc4 	addi	r2,r2,-1
   1105c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11060:	e0bffc17 	ldw	r2,-16(fp)
   11064:	1007883a 	mov	r3,r2
   11068:	e0bffe17 	ldw	r2,-8(fp)
   1106c:	1885883a 	add	r2,r3,r2
   11070:	10800003 	ldbu	r2,0(r2)
   11074:	10803fcc 	andi	r2,r2,255
   11078:	1080201c 	xori	r2,r2,128
   1107c:	10bfe004 	addi	r2,r2,-128
   11080:	10800be0 	cmpeqi	r2,r2,47
   11084:	10000a1e 	bne	r2,zero,110b0 <alt_find_file+0xc0>
   11088:	e0bffc17 	ldw	r2,-16(fp)
   1108c:	1007883a 	mov	r3,r2
   11090:	e0bffe17 	ldw	r2,-8(fp)
   11094:	1885883a 	add	r2,r3,r2
   11098:	10800003 	ldbu	r2,0(r2)
   1109c:	10803fcc 	andi	r2,r2,255
   110a0:	1080201c 	xori	r2,r2,128
   110a4:	10bfe004 	addi	r2,r2,-128
   110a8:	1004c03a 	cmpne	r2,r2,zero
   110ac:	10000a1e 	bne	r2,zero,110d8 <alt_find_file+0xe8>
   110b0:	e0bffd17 	ldw	r2,-12(fp)
   110b4:	11000217 	ldw	r4,8(r2)
   110b8:	e1bffc17 	ldw	r6,-16(fp)
   110bc:	e17ffe17 	ldw	r5,-8(fp)
   110c0:	00112a40 	call	112a4 <memcmp>
   110c4:	1004c03a 	cmpne	r2,r2,zero
   110c8:	1000031e 	bne	r2,zero,110d8 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   110cc:	e0bffd17 	ldw	r2,-12(fp)
   110d0:	e0bfff15 	stw	r2,-4(fp)
   110d4:	00000806 	br	110f8 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   110d8:	e0bffd17 	ldw	r2,-12(fp)
   110dc:	10800017 	ldw	r2,0(r2)
   110e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   110e4:	00c00074 	movhi	r3,1
   110e8:	18cfef04 	addi	r3,r3,16316
   110ec:	e0bffd17 	ldw	r2,-12(fp)
   110f0:	10ffc91e 	bne	r2,r3,11018 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   110f4:	e03fff15 	stw	zero,-4(fp)
   110f8:	e0bfff17 	ldw	r2,-4(fp)
}
   110fc:	e037883a 	mov	sp,fp
   11100:	dfc00117 	ldw	ra,4(sp)
   11104:	df000017 	ldw	fp,0(sp)
   11108:	dec00204 	addi	sp,sp,8
   1110c:	f800283a 	ret

00011110 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   11110:	defffc04 	addi	sp,sp,-16
   11114:	df000315 	stw	fp,12(sp)
   11118:	df000304 	addi	fp,sp,12
   1111c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   11120:	00bffa04 	movi	r2,-24
   11124:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11128:	e03ffe15 	stw	zero,-8(fp)
   1112c:	00001e06 	br	111a8 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   11130:	e0bffe17 	ldw	r2,-8(fp)
   11134:	00c00074 	movhi	r3,1
   11138:	18cb2904 	addi	r3,r3,11428
   1113c:	10800324 	muli	r2,r2,12
   11140:	10c5883a 	add	r2,r2,r3
   11144:	10800017 	ldw	r2,0(r2)
   11148:	1004c03a 	cmpne	r2,r2,zero
   1114c:	1000131e 	bne	r2,zero,1119c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   11150:	e0bffe17 	ldw	r2,-8(fp)
   11154:	00c00074 	movhi	r3,1
   11158:	18cb2904 	addi	r3,r3,11428
   1115c:	10800324 	muli	r2,r2,12
   11160:	10c7883a 	add	r3,r2,r3
   11164:	e0bfff17 	ldw	r2,-4(fp)
   11168:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   1116c:	00800074 	movhi	r2,1
   11170:	108ff304 	addi	r2,r2,16332
   11174:	10c00017 	ldw	r3,0(r2)
   11178:	e0bffe17 	ldw	r2,-8(fp)
   1117c:	1880040e 	bge	r3,r2,11190 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   11180:	00c00074 	movhi	r3,1
   11184:	18cff304 	addi	r3,r3,16332
   11188:	e0bffe17 	ldw	r2,-8(fp)
   1118c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   11190:	e0bffe17 	ldw	r2,-8(fp)
   11194:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   11198:	00000606 	br	111b4 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1119c:	e0bffe17 	ldw	r2,-8(fp)
   111a0:	10800044 	addi	r2,r2,1
   111a4:	e0bffe15 	stw	r2,-8(fp)
   111a8:	e0bffe17 	ldw	r2,-8(fp)
   111ac:	10800810 	cmplti	r2,r2,32
   111b0:	103fdf1e 	bne	r2,zero,11130 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   111b4:	e0bffd17 	ldw	r2,-12(fp)
}
   111b8:	e037883a 	mov	sp,fp
   111bc:	df000017 	ldw	fp,0(sp)
   111c0:	dec00104 	addi	sp,sp,4
   111c4:	f800283a 	ret

000111c8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   111c8:	defffb04 	addi	sp,sp,-20
   111cc:	df000415 	stw	fp,16(sp)
   111d0:	df000404 	addi	fp,sp,16
   111d4:	e13ffe15 	stw	r4,-8(fp)
   111d8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   111dc:	e0bfff17 	ldw	r2,-4(fp)
   111e0:	10840070 	cmpltui	r2,r2,4097
   111e4:	1000021e 	bne	r2,zero,111f0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   111e8:	00840004 	movi	r2,4096
   111ec:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   111f0:	e0fffe17 	ldw	r3,-8(fp)
   111f4:	e0bfff17 	ldw	r2,-4(fp)
   111f8:	1885883a 	add	r2,r3,r2
   111fc:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11200:	e0bffe17 	ldw	r2,-8(fp)
   11204:	e0bffd15 	stw	r2,-12(fp)
   11208:	00000506 	br	11220 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1120c:	e0bffd17 	ldw	r2,-12(fp)
   11210:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11214:	e0bffd17 	ldw	r2,-12(fp)
   11218:	10800804 	addi	r2,r2,32
   1121c:	e0bffd15 	stw	r2,-12(fp)
   11220:	e0fffd17 	ldw	r3,-12(fp)
   11224:	e0bffc17 	ldw	r2,-16(fp)
   11228:	18bff836 	bltu	r3,r2,1120c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1122c:	e0bffe17 	ldw	r2,-8(fp)
   11230:	108007cc 	andi	r2,r2,31
   11234:	1005003a 	cmpeq	r2,r2,zero
   11238:	1000021e 	bne	r2,zero,11244 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1123c:	e0bffd17 	ldw	r2,-12(fp)
   11240:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   11244:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   11248:	e037883a 	mov	sp,fp
   1124c:	df000017 	ldw	fp,0(sp)
   11250:	dec00104 	addi	sp,sp,4
   11254:	f800283a 	ret

00011258 <atexit>:
   11258:	200b883a 	mov	r5,r4
   1125c:	000d883a 	mov	r6,zero
   11260:	0009883a 	mov	r4,zero
   11264:	000f883a 	mov	r7,zero
   11268:	00113181 	jmpi	11318 <__register_exitproc>

0001126c <exit>:
   1126c:	defffe04 	addi	sp,sp,-8
   11270:	000b883a 	mov	r5,zero
   11274:	dc000015 	stw	r16,0(sp)
   11278:	dfc00115 	stw	ra,4(sp)
   1127c:	2021883a 	mov	r16,r4
   11280:	00114500 	call	11450 <__call_exitprocs>
   11284:	00800074 	movhi	r2,1
   11288:	108fea04 	addi	r2,r2,16296
   1128c:	11000017 	ldw	r4,0(r2)
   11290:	20800f17 	ldw	r2,60(r4)
   11294:	10000126 	beq	r2,zero,1129c <exit+0x30>
   11298:	103ee83a 	callr	r2
   1129c:	8009883a 	mov	r4,r16
   112a0:	00116400 	call	11640 <_exit>

000112a4 <memcmp>:
   112a4:	00c000c4 	movi	r3,3
   112a8:	1980032e 	bgeu	r3,r6,112b8 <memcmp+0x14>
   112ac:	2144b03a 	or	r2,r4,r5
   112b0:	10c4703a 	and	r2,r2,r3
   112b4:	10000f26 	beq	r2,zero,112f4 <memcmp+0x50>
   112b8:	31ffffc4 	addi	r7,r6,-1
   112bc:	3000061e 	bne	r6,zero,112d8 <memcmp+0x34>
   112c0:	00000a06 	br	112ec <memcmp+0x48>
   112c4:	39ffffc4 	addi	r7,r7,-1
   112c8:	00bfffc4 	movi	r2,-1
   112cc:	21000044 	addi	r4,r4,1
   112d0:	29400044 	addi	r5,r5,1
   112d4:	38800526 	beq	r7,r2,112ec <memcmp+0x48>
   112d8:	20c00003 	ldbu	r3,0(r4)
   112dc:	28800003 	ldbu	r2,0(r5)
   112e0:	18bff826 	beq	r3,r2,112c4 <memcmp+0x20>
   112e4:	1885c83a 	sub	r2,r3,r2
   112e8:	f800283a 	ret
   112ec:	0005883a 	mov	r2,zero
   112f0:	f800283a 	ret
   112f4:	180f883a 	mov	r7,r3
   112f8:	20c00017 	ldw	r3,0(r4)
   112fc:	28800017 	ldw	r2,0(r5)
   11300:	18bfed1e 	bne	r3,r2,112b8 <memcmp+0x14>
   11304:	31bfff04 	addi	r6,r6,-4
   11308:	21000104 	addi	r4,r4,4
   1130c:	29400104 	addi	r5,r5,4
   11310:	39bff936 	bltu	r7,r6,112f8 <memcmp+0x54>
   11314:	003fe806 	br	112b8 <memcmp+0x14>

00011318 <__register_exitproc>:
   11318:	defffa04 	addi	sp,sp,-24
   1131c:	00800074 	movhi	r2,1
   11320:	108fea04 	addi	r2,r2,16296
   11324:	dc000015 	stw	r16,0(sp)
   11328:	14000017 	ldw	r16,0(r2)
   1132c:	dd000415 	stw	r20,16(sp)
   11330:	2829883a 	mov	r20,r5
   11334:	81405217 	ldw	r5,328(r16)
   11338:	dcc00315 	stw	r19,12(sp)
   1133c:	dc800215 	stw	r18,8(sp)
   11340:	dc400115 	stw	r17,4(sp)
   11344:	dfc00515 	stw	ra,20(sp)
   11348:	2023883a 	mov	r17,r4
   1134c:	3027883a 	mov	r19,r6
   11350:	3825883a 	mov	r18,r7
   11354:	28002526 	beq	r5,zero,113ec <__register_exitproc+0xd4>
   11358:	29000117 	ldw	r4,4(r5)
   1135c:	008007c4 	movi	r2,31
   11360:	11002716 	blt	r2,r4,11400 <__register_exitproc+0xe8>
   11364:	8800101e 	bne	r17,zero,113a8 <__register_exitproc+0x90>
   11368:	2105883a 	add	r2,r4,r4
   1136c:	1085883a 	add	r2,r2,r2
   11370:	20c00044 	addi	r3,r4,1
   11374:	1145883a 	add	r2,r2,r5
   11378:	0009883a 	mov	r4,zero
   1137c:	15000215 	stw	r20,8(r2)
   11380:	28c00115 	stw	r3,4(r5)
   11384:	2005883a 	mov	r2,r4
   11388:	dfc00517 	ldw	ra,20(sp)
   1138c:	dd000417 	ldw	r20,16(sp)
   11390:	dcc00317 	ldw	r19,12(sp)
   11394:	dc800217 	ldw	r18,8(sp)
   11398:	dc400117 	ldw	r17,4(sp)
   1139c:	dc000017 	ldw	r16,0(sp)
   113a0:	dec00604 	addi	sp,sp,24
   113a4:	f800283a 	ret
   113a8:	29802204 	addi	r6,r5,136
   113ac:	00800044 	movi	r2,1
   113b0:	110e983a 	sll	r7,r2,r4
   113b4:	30c04017 	ldw	r3,256(r6)
   113b8:	2105883a 	add	r2,r4,r4
   113bc:	1085883a 	add	r2,r2,r2
   113c0:	1185883a 	add	r2,r2,r6
   113c4:	19c6b03a 	or	r3,r3,r7
   113c8:	14802015 	stw	r18,128(r2)
   113cc:	14c00015 	stw	r19,0(r2)
   113d0:	00800084 	movi	r2,2
   113d4:	30c04015 	stw	r3,256(r6)
   113d8:	88bfe31e 	bne	r17,r2,11368 <__register_exitproc+0x50>
   113dc:	30804117 	ldw	r2,260(r6)
   113e0:	11c4b03a 	or	r2,r2,r7
   113e4:	30804115 	stw	r2,260(r6)
   113e8:	003fdf06 	br	11368 <__register_exitproc+0x50>
   113ec:	00800074 	movhi	r2,1
   113f0:	10973804 	addi	r2,r2,23776
   113f4:	100b883a 	mov	r5,r2
   113f8:	80805215 	stw	r2,328(r16)
   113fc:	003fd606 	br	11358 <__register_exitproc+0x40>
   11400:	00800034 	movhi	r2,0
   11404:	10800004 	addi	r2,r2,0
   11408:	1000021e 	bne	r2,zero,11414 <__register_exitproc+0xfc>
   1140c:	013fffc4 	movi	r4,-1
   11410:	003fdc06 	br	11384 <__register_exitproc+0x6c>
   11414:	01006404 	movi	r4,400
   11418:	103ee83a 	callr	r2
   1141c:	1007883a 	mov	r3,r2
   11420:	103ffa26 	beq	r2,zero,1140c <__register_exitproc+0xf4>
   11424:	80805217 	ldw	r2,328(r16)
   11428:	180b883a 	mov	r5,r3
   1142c:	18000115 	stw	zero,4(r3)
   11430:	18800015 	stw	r2,0(r3)
   11434:	80c05215 	stw	r3,328(r16)
   11438:	18006215 	stw	zero,392(r3)
   1143c:	18006315 	stw	zero,396(r3)
   11440:	0009883a 	mov	r4,zero
   11444:	883fc826 	beq	r17,zero,11368 <__register_exitproc+0x50>
   11448:	003fd706 	br	113a8 <__register_exitproc+0x90>

0001144c <register_fini>:
   1144c:	f800283a 	ret

00011450 <__call_exitprocs>:
   11450:	00800074 	movhi	r2,1
   11454:	108fea04 	addi	r2,r2,16296
   11458:	10800017 	ldw	r2,0(r2)
   1145c:	defff304 	addi	sp,sp,-52
   11460:	df000b15 	stw	fp,44(sp)
   11464:	d8800115 	stw	r2,4(sp)
   11468:	00800034 	movhi	r2,0
   1146c:	10800004 	addi	r2,r2,0
   11470:	1005003a 	cmpeq	r2,r2,zero
   11474:	d8800215 	stw	r2,8(sp)
   11478:	d8800117 	ldw	r2,4(sp)
   1147c:	dd400815 	stw	r21,32(sp)
   11480:	dd000715 	stw	r20,28(sp)
   11484:	10805204 	addi	r2,r2,328
   11488:	dfc00c15 	stw	ra,48(sp)
   1148c:	ddc00a15 	stw	r23,40(sp)
   11490:	dd800915 	stw	r22,36(sp)
   11494:	dcc00615 	stw	r19,24(sp)
   11498:	dc800515 	stw	r18,20(sp)
   1149c:	dc400415 	stw	r17,16(sp)
   114a0:	dc000315 	stw	r16,12(sp)
   114a4:	282b883a 	mov	r21,r5
   114a8:	2039883a 	mov	fp,r4
   114ac:	d8800015 	stw	r2,0(sp)
   114b0:	2829003a 	cmpeq	r20,r5,zero
   114b4:	d8800117 	ldw	r2,4(sp)
   114b8:	14405217 	ldw	r17,328(r2)
   114bc:	88001026 	beq	r17,zero,11500 <__call_exitprocs+0xb0>
   114c0:	ddc00017 	ldw	r23,0(sp)
   114c4:	88800117 	ldw	r2,4(r17)
   114c8:	8c802204 	addi	r18,r17,136
   114cc:	143fffc4 	addi	r16,r2,-1
   114d0:	80000916 	blt	r16,zero,114f8 <__call_exitprocs+0xa8>
   114d4:	05bfffc4 	movi	r22,-1
   114d8:	a000151e 	bne	r20,zero,11530 <__call_exitprocs+0xe0>
   114dc:	8409883a 	add	r4,r16,r16
   114e0:	2105883a 	add	r2,r4,r4
   114e4:	1485883a 	add	r2,r2,r18
   114e8:	10c02017 	ldw	r3,128(r2)
   114ec:	a8c01126 	beq	r21,r3,11534 <__call_exitprocs+0xe4>
   114f0:	843fffc4 	addi	r16,r16,-1
   114f4:	85bff81e 	bne	r16,r22,114d8 <__call_exitprocs+0x88>
   114f8:	d8800217 	ldw	r2,8(sp)
   114fc:	10003126 	beq	r2,zero,115c4 <__call_exitprocs+0x174>
   11500:	dfc00c17 	ldw	ra,48(sp)
   11504:	df000b17 	ldw	fp,44(sp)
   11508:	ddc00a17 	ldw	r23,40(sp)
   1150c:	dd800917 	ldw	r22,36(sp)
   11510:	dd400817 	ldw	r21,32(sp)
   11514:	dd000717 	ldw	r20,28(sp)
   11518:	dcc00617 	ldw	r19,24(sp)
   1151c:	dc800517 	ldw	r18,20(sp)
   11520:	dc400417 	ldw	r17,16(sp)
   11524:	dc000317 	ldw	r16,12(sp)
   11528:	dec00d04 	addi	sp,sp,52
   1152c:	f800283a 	ret
   11530:	8409883a 	add	r4,r16,r16
   11534:	88c00117 	ldw	r3,4(r17)
   11538:	2105883a 	add	r2,r4,r4
   1153c:	1445883a 	add	r2,r2,r17
   11540:	18ffffc4 	addi	r3,r3,-1
   11544:	11800217 	ldw	r6,8(r2)
   11548:	1c001526 	beq	r3,r16,115a0 <__call_exitprocs+0x150>
   1154c:	10000215 	stw	zero,8(r2)
   11550:	303fe726 	beq	r6,zero,114f0 <__call_exitprocs+0xa0>
   11554:	00c00044 	movi	r3,1
   11558:	1c06983a 	sll	r3,r3,r16
   1155c:	90804017 	ldw	r2,256(r18)
   11560:	8cc00117 	ldw	r19,4(r17)
   11564:	1884703a 	and	r2,r3,r2
   11568:	10001426 	beq	r2,zero,115bc <__call_exitprocs+0x16c>
   1156c:	90804117 	ldw	r2,260(r18)
   11570:	1884703a 	and	r2,r3,r2
   11574:	10000c1e 	bne	r2,zero,115a8 <__call_exitprocs+0x158>
   11578:	2105883a 	add	r2,r4,r4
   1157c:	1485883a 	add	r2,r2,r18
   11580:	11400017 	ldw	r5,0(r2)
   11584:	e009883a 	mov	r4,fp
   11588:	303ee83a 	callr	r6
   1158c:	88800117 	ldw	r2,4(r17)
   11590:	98bfc81e 	bne	r19,r2,114b4 <__call_exitprocs+0x64>
   11594:	b8800017 	ldw	r2,0(r23)
   11598:	147fd526 	beq	r2,r17,114f0 <__call_exitprocs+0xa0>
   1159c:	003fc506 	br	114b4 <__call_exitprocs+0x64>
   115a0:	8c000115 	stw	r16,4(r17)
   115a4:	003fea06 	br	11550 <__call_exitprocs+0x100>
   115a8:	2105883a 	add	r2,r4,r4
   115ac:	1485883a 	add	r2,r2,r18
   115b0:	11000017 	ldw	r4,0(r2)
   115b4:	303ee83a 	callr	r6
   115b8:	003ff406 	br	1158c <__call_exitprocs+0x13c>
   115bc:	303ee83a 	callr	r6
   115c0:	003ff206 	br	1158c <__call_exitprocs+0x13c>
   115c4:	88800117 	ldw	r2,4(r17)
   115c8:	1000081e 	bne	r2,zero,115ec <__call_exitprocs+0x19c>
   115cc:	89000017 	ldw	r4,0(r17)
   115d0:	20000726 	beq	r4,zero,115f0 <__call_exitprocs+0x1a0>
   115d4:	b9000015 	stw	r4,0(r23)
   115d8:	8809883a 	mov	r4,r17
   115dc:	00000000 	call	0 <__reset>
   115e0:	bc400017 	ldw	r17,0(r23)
   115e4:	883fb71e 	bne	r17,zero,114c4 <__call_exitprocs+0x74>
   115e8:	003fc506 	br	11500 <__call_exitprocs+0xb0>
   115ec:	89000017 	ldw	r4,0(r17)
   115f0:	882f883a 	mov	r23,r17
   115f4:	2023883a 	mov	r17,r4
   115f8:	883fb21e 	bne	r17,zero,114c4 <__call_exitprocs+0x74>
   115fc:	003fc006 	br	11500 <__call_exitprocs+0xb0>

00011600 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   11600:	defffd04 	addi	sp,sp,-12
   11604:	df000215 	stw	fp,8(sp)
   11608:	df000204 	addi	fp,sp,8
   1160c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   11610:	e0bfff17 	ldw	r2,-4(fp)
   11614:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   11618:	e0bffe17 	ldw	r2,-8(fp)
   1161c:	1005003a 	cmpeq	r2,r2,zero
   11620:	1000021e 	bne	r2,zero,1162c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   11624:	002af070 	cmpltui	zero,zero,43969
   11628:	00000106 	br	11630 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   1162c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   11630:	e037883a 	mov	sp,fp
   11634:	df000017 	ldw	fp,0(sp)
   11638:	dec00104 	addi	sp,sp,4
   1163c:	f800283a 	ret

00011640 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   11640:	defffd04 	addi	sp,sp,-12
   11644:	dfc00215 	stw	ra,8(sp)
   11648:	df000115 	stw	fp,4(sp)
   1164c:	df000104 	addi	fp,sp,4
   11650:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   11654:	e13fff17 	ldw	r4,-4(fp)
   11658:	00116000 	call	11600 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1165c:	003fff06 	br	1165c <_exit+0x1c>
   11660:	00000010 	cmplti	zero,zero,0
   11664:	00000000 	call	0 <__reset>
   11668:	00527a01 	jmpi	527a0 <_gp+0x367fc>
   1166c:	011f7c01 	jmpi	11f7c0 <_gp+0x10381c>
   11670:	001b0c0b 	ldhu	zero,27696(zero)
   11674:	00000028 	cmpgeui	zero,zero,0
   11678:	00000018 	cmpnei	zero,zero,0
   1167c:	0000b81c 	xori	zero,zero,736
   11680:	000005dc 	xori	zero,zero,23
   11684:	400e4400 	call	400e440 <_gp+0x3ff249c>
   11688:	92099170 	cmpltui	r8,r18,9797
   1168c:	95079308 	cmpgei	r20,r18,7756
   11690:	97049605 	stb	fp,4696(r18)
   11694:	90019f03 	ldbu	zero,1660(r18)
   11698:	9c06940a 	0x9c06940a
   1169c:	00000002 	0x2
   116a0:	00000028 	cmpgeui	zero,zero,0
   116a4:	00000044 	movi	zero,1
   116a8:	0000bdf8 	rdprs	zero,zero,759
   116ac:	000005b0 	cmpltui	zero,zero,22
   116b0:	3c0e4400 	call	3c0e440 <_gp+0x3bf249c>
   116b4:	92099168 	cmpgeui	r8,r18,9797
   116b8:	95079308 	cmpgei	r20,r18,7756
   116bc:	9c039705 	stb	r16,3676(r19)
   116c0:	90019f02 	0x90019f02
   116c4:	9606940a 	0x9606940a
   116c8:	00000004 	movi	zero,0
   116cc:	0001144c 	andi	zero,zero,1105
